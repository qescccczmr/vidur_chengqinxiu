<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <package name="harfbuzz"/>
  <package name="harfbuzz-gobject"/>
  <c:include name="hb-gobject.h"/>
  <namespace name="HarfBuzz"
             version="0.0"
             shared-library="libharfbuzz-gobject.so.0,libharfbuzz.so.0"
             c:identifier-prefixes="hb_"
             c:symbol-prefixes="hb,hb_gobject">
    <alias name="bool_t" c:type="hb_bool_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="88">Data type for booleans.</doc>
      <source-position filename="src/hb-common.h" line="94"/>
      <type name="gint" c:type="int"/>
    </alias>
    <alias name="codepoint_t" c:type="hb_codepoint_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="96">Data type for holding Unicode codepoints. Also
used to hold glyph IDs.</doc>
      <source-position filename="src/hb-common.h" line="103"/>
      <type name="guint32" c:type="uint32_t"/>
    </alias>
    <alias name="color_t" c:type="hb_color_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="868">Data type for holding color values. Colors are eight bits per
channel RGB plus alpha transparency.</doc>
      <source-position filename="src/hb-common.h" line="876"/>
      <type name="guint32" c:type="uint32_t"/>
    </alias>
    <alias name="font_get_font_h_extents_func_t"
           c:type="hb_font_get_font_h_extents_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="137">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the extents for a font, for horizontal-direction
text segments. Extents must be returned in an #hb_glyph_extents output
parameter.</doc>
      <source-position filename="src/hb-font.h" line="147"/>
      <type name="font_get_font_extents_func_t"
            c:type="hb_font_get_font_extents_func_t"/>
    </alias>
    <alias name="font_get_font_v_extents_func_t"
           c:type="hb_font_get_font_v_extents_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="149">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the extents for a font, for vertical-direction
text segments. Extents must be returned in an #hb_glyph_extents output
parameter.</doc>
      <source-position filename="src/hb-font.h" line="159"/>
      <type name="font_get_font_extents_func_t"
            c:type="hb_font_get_font_extents_func_t"/>
    </alias>
    <alias name="font_get_glyph_h_advance_func_t"
           c:type="hb_font_get_glyph_h_advance_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="254">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advance for a specified glyph, in
horizontal-direction text segments. Advances must be returned in
an #hb_position_t output parameter.</doc>
      <source-position filename="src/hb-font.h" line="264"/>
      <type name="font_get_glyph_advance_func_t"
            c:type="hb_font_get_glyph_advance_func_t"/>
    </alias>
    <alias name="font_get_glyph_h_advances_func_t"
           c:type="hb_font_get_glyph_h_advances_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="302">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advances for a sequence of glyphs, in
horizontal-direction text segments.</doc>
      <source-position filename="src/hb-font.h" line="311"/>
      <type name="font_get_glyph_advances_func_t"
            c:type="hb_font_get_glyph_advances_func_t"/>
    </alias>
    <alias name="font_get_glyph_h_kerning_func_t"
           c:type="hb_font_get_glyph_h_kerning_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="386">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the kerning-adjustment value for a glyph-pair in
the specified font, for horizontal text segments.</doc>
      <source-position filename="src/hb-font.h" line="395"/>
      <type name="font_get_glyph_kerning_func_t"
            c:type="hb_font_get_glyph_kerning_func_t"/>
    </alias>
    <alias name="font_get_glyph_h_origin_func_t"
           c:type="hb_font_get_glyph_h_origin_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="347">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the (X,Y) coordinates (in font units) of the
origin for a glyph, for horizontal-direction text segments. Each
coordinate must be returned in an #hb_position_t output parameter.</doc>
      <source-position filename="src/hb-font.h" line="357"/>
      <type name="font_get_glyph_origin_func_t"
            c:type="hb_font_get_glyph_origin_func_t"/>
    </alias>
    <alias name="font_get_glyph_v_advance_func_t"
           c:type="hb_font_get_glyph_v_advance_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="266">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advance for a specified glyph, in
vertical-direction text segments. Advances must be returned in
an #hb_position_t output parameter.</doc>
      <source-position filename="src/hb-font.h" line="276"/>
      <type name="font_get_glyph_advance_func_t"
            c:type="hb_font_get_glyph_advance_func_t"/>
    </alias>
    <alias name="font_get_glyph_v_advances_func_t"
           c:type="hb_font_get_glyph_v_advances_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="313">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advances for a sequence of glyphs, in
vertical-direction text segments.</doc>
      <source-position filename="src/hb-font.h" line="322"/>
      <type name="font_get_glyph_advances_func_t"
            c:type="hb_font_get_glyph_advances_func_t"/>
    </alias>
    <alias name="font_get_glyph_v_kerning_func_t"
           c:type="hb_font_get_glyph_v_kerning_func_t">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="226">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the kerning-adjustment value for a glyph-pair in
the specified font, for vertical text segments.</doc>
      <source-position filename="src/hb-deprecated.h" line="235"/>
      <type name="font_get_glyph_kerning_func_t"
            c:type="hb_font_get_glyph_kerning_func_t"/>
    </alias>
    <alias name="font_get_glyph_v_origin_func_t"
           c:type="hb_font_get_glyph_v_origin_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="359">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the (X,Y) coordinates (in font units) of the
origin for a glyph, for vertical-direction text segments. Each coordinate
must be returned in an #hb_position_t output parameter.</doc>
      <source-position filename="src/hb-font.h" line="369"/>
      <type name="font_get_glyph_origin_func_t"
            c:type="hb_font_get_glyph_origin_func_t"/>
    </alias>
    <alias name="mask_t" c:type="hb_mask_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="123">Data type for bitmasks.</doc>
      <source-position filename="src/hb-common.h" line="129"/>
      <type name="guint32" c:type="uint32_t"/>
    </alias>
    <alias name="ot_name_id_t" c:type="hb_ot_name_id_t">
      <doc xml:space="preserve"
           filename="src/hb-ot-name.h"
           line="106">An integral type representing an OpenType 'name' table name identifier.
There are predefined name IDs, as well as name IDs return from other
API.  These can be used to fetch name strings from a font face.</doc>
      <source-position filename="src/hb-ot-name.h" line="115"/>
      <type name="guint" c:type="unsigned int"/>
    </alias>
    <alias name="position_t" c:type="hb_position_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="114">Data type for holding a single coordinate value.
Contour points and other multi-dimensional data are
stored as tuples of #hb_position_t's.</doc>
      <source-position filename="src/hb-common.h" line="122"/>
      <type name="gint32" c:type="int32_t"/>
    </alias>
    <alias name="tag_t" c:type="hb_tag_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="153">Data type for tag identifiers. Tags are four
byte integers, each byte representing a character.

Tags are used to identify tables, design-variation axes,
scripts, languages, font features, and baselines with
human-readable names.</doc>
      <source-position filename="src/hb-common.h" line="164"/>
      <type name="guint32" c:type="uint32_t"/>
    </alias>
    <constant name="AAT_LAYOUT_NO_SELECTOR_INDEX"
              value="65535"
              c:type="HB_AAT_LAYOUT_NO_SELECTOR_INDEX">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.h"
           line="751">Used when getting or setting AAT feature selectors. Indicates that
there is no selector index corresponding to the selector of interest.</doc>
      <source-position filename="src/hb-aat-layout.h" line="758"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUFFER_REPLACEMENT_CODEPOINT_DEFAULT"
              value="65533"
              c:type="HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT"
              version="0.9.31">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="459">The default code point for replacing invalid characters in a given encoding.
Set to U+FFFD REPLACEMENT CHARACTER.</doc>
      <source-position filename="src/hb-buffer.h" line="463"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CODEPOINT_INVALID"
              value="4294967295"
              c:type="HB_CODEPOINT_INVALID"
              version="8.0.0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="105">Unused #hb_codepoint_t value.</doc>
      <source-position filename="src/hb-common.h" line="112"/>
      <type name="codepoint_t" c:type="hb_codepoint_t"/>
    </constant>
    <function-macro name="COLOR"
                    c:identifier="HB_COLOR"
                    version="2.1.0"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="878">Constructs an #hb_color_t from four integers.</doc>
      <source-position filename="src/hb-common.h" line="889"/>
      <parameters>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="880">blue channel value</doc>
        </parameter>
        <parameter name="g">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="881">green channel value</doc>
        </parameter>
        <parameter name="r">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="882">red channel value</doc>
        </parameter>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="883">alpha channel value</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="HB_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="src/hb-common.h" line="78"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_IS_BACKWARD"
                    c:identifier="HB_DIRECTION_IS_BACKWARD"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="287">Tests whether a text direction moves backward (from right to left, or from
bottom to top). Requires that the direction be valid.</doc>
      <source-position filename="src/hb-common.h" line="295"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="289">#hb_direction_t to test</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_IS_FORWARD"
                    c:identifier="HB_DIRECTION_IS_FORWARD"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="278">Tests whether a text direction moves forward (from left to right, or from
top to bottom). Requires that the direction be valid.</doc>
      <source-position filename="src/hb-common.h" line="286"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="280">#hb_direction_t to test</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_IS_HORIZONTAL"
                    c:identifier="HB_DIRECTION_IS_HORIZONTAL"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="260">Tests whether a text direction is horizontal. Requires
that the direction be valid.</doc>
      <source-position filename="src/hb-common.h" line="268"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="262">#hb_direction_t to test</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_IS_VALID"
                    c:identifier="HB_DIRECTION_IS_VALID"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="251">Tests whether a text direction is valid.</doc>
      <source-position filename="src/hb-common.h" line="258"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="253">#hb_direction_t to test</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_IS_VERTICAL"
                    c:identifier="HB_DIRECTION_IS_VERTICAL"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="269">Tests whether a text direction is vertical. Requires
that the direction be valid.</doc>
      <source-position filename="src/hb-common.h" line="277"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="271">#hb_direction_t to test</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DIRECTION_REVERSE"
                    c:identifier="HB_DIRECTION_REVERSE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="296">Reverses a text direction. Requires that the direction
be valid.</doc>
      <source-position filename="src/hb-common.h" line="304"/>
      <parameters>
        <parameter name="dir">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="298">#hb_direction_t to reverse</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="FEATURE_GLOBAL_START"
              value="0"
              c:type="HB_FEATURE_GLOBAL_START"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="794">Special setting for #hb_feature_t.start to apply the feature from the start
of the buffer.</doc>
      <source-position filename="src/hb-common.h" line="802"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FONT_NO_VAR_NAMED_INSTANCE"
              value="4294967295"
              c:type="HB_FONT_NO_VAR_NAMED_INSTANCE"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="1133">Constant signifying that a font does not have any
named-instance index set.  This is the default of
a font.</doc>
      <source-position filename="src/hb-font.h" line="1142"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="LANGUAGE_INVALID"
              value="0"
              c:type="HB_LANGUAGE_INVALID"
              version="0.6.0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="324">An unset #hb_language_t.</doc>
      <source-position filename="src/hb-common.h" line="331"/>
      <type name="language_t" c:type="hb_language_t"/>
    </constant>
    <constant name="OT_LAYOUT_DEFAULT_LANGUAGE_INDEX"
              value="65535"
              c:type="HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="200">Special value for language index indicating default or unsupported language.</doc>
      <source-position filename="src/hb-ot-layout.h" line="205"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_LAYOUT_NO_FEATURE_INDEX"
              value="65535"
              c:type="HB_OT_LAYOUT_NO_FEATURE_INDEX">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="194">Special value for feature index indicating unsupported feature.</doc>
      <source-position filename="src/hb-ot-layout.h" line="199"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_LAYOUT_NO_SCRIPT_INDEX"
              value="65535"
              c:type="HB_OT_LAYOUT_NO_SCRIPT_INDEX">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="188">Special value for script index indicating unsupported script.</doc>
      <source-position filename="src/hb-ot-layout.h" line="193"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_LAYOUT_NO_VARIATIONS_INDEX"
              value="4294967295"
              c:type="HB_OT_LAYOUT_NO_VARIATIONS_INDEX">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="206">Special value for variations index indicating unsupported variation.</doc>
      <source-position filename="src/hb-ot-layout.h" line="211"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_MAX_TAGS_PER_LANGUAGE"
              value="3"
              c:type="HB_OT_MAX_TAGS_PER_LANGUAGE"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="100">Maximum number of OpenType tags that can correspond to a give #hb_language_t.</doc>
      <source-position filename="src/hb-ot-layout.h" line="107"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_MAX_TAGS_PER_SCRIPT"
              value="3"
              c:type="HB_OT_MAX_TAGS_PER_SCRIPT"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-ot-layout.h"
           line="92">Maximum number of OpenType tags that can correspond to a give #hb_script_t.</doc>
      <source-position filename="src/hb-ot-layout.h" line="99"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OT_VAR_NO_AXIS_INDEX"
              value="4294967295"
              c:type="HB_OT_VAR_NO_AXIS_INDEX"
              version="1.4.2"
              deprecated="1"
              deprecated-version="2.2.0">
      <doc xml:space="preserve"
           filename="src/hb-ot-deprecated.h"
           line="97">Do not use.</doc>
      <source-position filename="src/hb-ot-deprecated.h" line="105"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="TAG" c:identifier="HB_TAG" introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="166">Constructs an #hb_tag_t from four character literals.</doc>
      <source-position filename="src/hb-common.h" line="176"/>
      <parameters>
        <parameter name="c1">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="168">1st character of the tag</doc>
        </parameter>
        <parameter name="c2">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="169">2nd character of the tag</doc>
        </parameter>
        <parameter name="c3">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="170">3rd character of the tag</doc>
        </parameter>
        <parameter name="c4">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="171">4th character of the tag</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="UNICODE_COMBINING_CLASS_CCC133"
              value="133"
              c:type="HB_UNICODE_COMBINING_CLASS_CCC133"
              deprecated="1"
              deprecated-version="7.2.0">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="112">[Tibetan]</doc>
      <source-position filename="src/hb-deprecated.h" line="119"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UNICODE_MAX"
              value="1114111"
              c:type="HB_UNICODE_MAX"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-unicode.h"
           line="43">Maximum valid Unicode code point.</doc>
      <source-position filename="src/hb-unicode.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="UNICODE_MAX_DECOMPOSITION_LEN"
              value="19"
              c:type="HB_UNICODE_MAX_DECOMPOSITION_LEN"
              deprecated="1"
              deprecated-version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="192">See Unicode 6.1 for details on the maximum decomposition length.</doc>
      <source-position filename="src/hb-deprecated.h" line="199"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="UNTAG"
                    c:identifier="HB_UNTAG"
                    version="0.6.0"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="178">Extracts four character literals from an #hb_tag_t.</doc>
      <source-position filename="src/hb-common.h" line="187"/>
      <parameters>
        <parameter name="tag">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="180">an #hb_tag_t</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VERSION_ATLEAST"
                    c:identifier="HB_VERSION_ATLEAST"
                    introspectable="0">
      <source-position filename="src/hb-version.h" line="74"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_MAJOR" value="9" c:type="HB_VERSION_MAJOR">
      <source-position filename="src/hb-version.h" line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MICRO" value="0" c:type="HB_VERSION_MICRO">
      <source-position filename="src/hb-version.h" line="56"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MINOR" value="0" c:type="HB_VERSION_MINOR">
      <source-position filename="src/hb-version.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_STRING" value="9.0.0" c:type="HB_VERSION_STRING">
      <source-position filename="src/hb-version.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="aat_layout_feature_selector_info_t"
            c:type="hb_aat_layout_feature_selector_info_t">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.h"
           line="735">Structure representing a setting for an #hb_aat_layout_feature_type_t.</doc>
      <source-position filename="src/hb-aat-layout.h" line="749"/>
      <field name="name_id" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="737">The selector's name identifier</doc>
        <type name="ot_name_id_t" c:type="hb_ot_name_id_t"/>
      </field>
      <field name="enable" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="738">The value to turn the selector on</doc>
        <type name="aat_layout_feature_selector_t"
              c:type="hb_aat_layout_feature_selector_t"/>
      </field>
      <field name="disable" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="739">The value to turn the selector off</doc>
        <type name="aat_layout_feature_selector_t"
              c:type="hb_aat_layout_feature_selector_t"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <type name="guint" c:type="unsigned int"/>
      </field>
    </record>
    <enumeration name="aat_layout_feature_selector_t"
                 version="2.2.0"
                 glib:type-name="hb_aat_layout_feature_selector_t"
                 glib:get-type="hb_gobject_aat_layout_feature_selector_get_type"
                 c:type="hb_aat_layout_feature_selector_t">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.h"
           line="133">The selectors defined for specifying AAT feature settings.</doc>
      <member name="invalid"
              value="65535"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID"
              glib:nick="invalid"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="135">Initial, unset feature selector</doc>
      </member>
      <member name="all_type_features_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON"
              glib:nick="all-type-features-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="136">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC</doc>
      </member>
      <member name="all_type_features_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF"
              glib:nick="all-type-features-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="137">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC</doc>
      </member>
      <member name="required_ligatures_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON"
              glib:nick="required-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="138">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="required_ligatures_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF"
              glib:nick="required-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="139">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="common_ligatures_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON"
              glib:nick="common-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="140">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="common_ligatures_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF"
              glib:nick="common-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="141">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="rare_ligatures_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON"
              glib:nick="rare-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="142">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="rare_ligatures_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF"
              glib:nick="rare-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="143">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="logos_on"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON"
              glib:nick="logos-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="144">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="logos_off"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF"
              glib:nick="logos-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="145">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="rebus_pictures_on"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON"
              glib:nick="rebus-pictures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="146">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="rebus_pictures_off"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF"
              glib:nick="rebus-pictures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="147">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="diphthong_ligatures_on"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON"
              glib:nick="diphthong-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="148">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="diphthong_ligatures_off"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF"
              glib:nick="diphthong-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="149">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="squared_ligatures_on"
              value="12"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON"
              glib:nick="squared-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="150">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="squared_ligatures_off"
              value="13"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF"
              glib:nick="squared-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="151">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="abbrev_squared_ligatures_on"
              value="14"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON"
              glib:nick="abbrev-squared-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="152">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="abbrev_squared_ligatures_off"
              value="15"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF"
              glib:nick="abbrev-squared-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="153">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="symbol_ligatures_on"
              value="16"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON"
              glib:nick="symbol-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="154">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="symbol_ligatures_off"
              value="17"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF"
              glib:nick="symbol-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="155">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="contextual_ligatures_on"
              value="18"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON"
              glib:nick="contextual-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="156">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="contextual_ligatures_off"
              value="19"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF"
              glib:nick="contextual-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="157">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="historical_ligatures_on"
              value="20"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON"
              glib:nick="historical-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="158">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="historical_ligatures_off"
              value="21"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF"
              glib:nick="historical-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="159">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="unconnected"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED"
              glib:nick="unconnected"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="160">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="partially_connected"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED"
              glib:nick="partially-connected"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="161">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="cursive"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE"
              glib:nick="cursive"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="162">for #HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES</doc>
      </member>
      <member name="upper_and_lower_case"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE"
              glib:nick="upper-and-lower-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="163">Deprecated</doc>
      </member>
      <member name="all_caps"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS"
              glib:nick="all-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="164">Deprecated</doc>
      </member>
      <member name="all_lower_case"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE"
              glib:nick="all-lower-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="165">Deprecated</doc>
      </member>
      <member name="small_caps"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS"
              glib:nick="small-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="166">Deprecated</doc>
      </member>
      <member name="initial_caps"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS"
              glib:nick="initial-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="167">Deprecated</doc>
      </member>
      <member name="initial_caps_and_small_caps"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS"
              glib:nick="initial-caps-and-small-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="168">Deprecated</doc>
      </member>
      <member name="substitute_vertical_forms_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON"
              glib:nick="substitute-vertical-forms-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="169">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION</doc>
      </member>
      <member name="substitute_vertical_forms_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF"
              glib:nick="substitute-vertical-forms-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="170">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION</doc>
      </member>
      <member name="linguistic_rearrangement_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON"
              glib:nick="linguistic-rearrangement-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="171">for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT</doc>
      </member>
      <member name="linguistic_rearrangement_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF"
              glib:nick="linguistic-rearrangement-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="172">for #HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT</doc>
      </member>
      <member name="monospaced_numbers"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS"
              glib:nick="monospaced-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="173">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING</doc>
      </member>
      <member name="proportional_numbers"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS"
              glib:nick="proportional-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="174">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING</doc>
      </member>
      <member name="third_width_numbers"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS"
              glib:nick="third-width-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="175">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING</doc>
      </member>
      <member name="quarter_width_numbers"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS"
              glib:nick="quarter-width-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="176">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING</doc>
      </member>
      <member name="word_initial_swashes_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON"
              glib:nick="word-initial-swashes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="177">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="word_initial_swashes_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF"
              glib:nick="word-initial-swashes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="178">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="word_final_swashes_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON"
              glib:nick="word-final-swashes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="179">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="word_final_swashes_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF"
              glib:nick="word-final-swashes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="180">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="line_initial_swashes_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON"
              glib:nick="line-initial-swashes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="181">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="line_initial_swashes_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF"
              glib:nick="line-initial-swashes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="182">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="line_final_swashes_on"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON"
              glib:nick="line-final-swashes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="183">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="line_final_swashes_off"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF"
              glib:nick="line-final-swashes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="184">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="non_final_swashes_on"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON"
              glib:nick="non-final-swashes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="185">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="non_final_swashes_off"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF"
              glib:nick="non-final-swashes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="186">for #HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE</doc>
      </member>
      <member name="show_diacritics"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS"
              glib:nick="show-diacritics"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="187">for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE</doc>
      </member>
      <member name="hide_diacritics"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS"
              glib:nick="hide-diacritics"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="188">for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE</doc>
      </member>
      <member name="decompose_diacritics"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS"
              glib:nick="decompose-diacritics"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="189">for #HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE</doc>
      </member>
      <member name="normal_position"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION"
              glib:nick="normal-position"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="190">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION</doc>
      </member>
      <member name="superiors"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS"
              glib:nick="superiors"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="191">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION</doc>
      </member>
      <member name="inferiors"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS"
              glib:nick="inferiors"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="192">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION</doc>
      </member>
      <member name="ordinals"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS"
              glib:nick="ordinals"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="193">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION</doc>
      </member>
      <member name="scientific_inferiors"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS"
              glib:nick="scientific-inferiors"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="194">for #HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION</doc>
      </member>
      <member name="no_fractions"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS"
              glib:nick="no-fractions"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="195">for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS</doc>
      </member>
      <member name="vertical_fractions"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS"
              glib:nick="vertical-fractions"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="196">for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS</doc>
      </member>
      <member name="diagonal_fractions"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS"
              glib:nick="diagonal-fractions"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="197">for #HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS</doc>
      </member>
      <member name="prevent_overlap_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON"
              glib:nick="prevent-overlap-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="198">for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE</doc>
      </member>
      <member name="prevent_overlap_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF"
              glib:nick="prevent-overlap-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="199">for #HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE</doc>
      </member>
      <member name="hyphens_to_em_dash_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON"
              glib:nick="hyphens-to-em-dash-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="200">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="hyphens_to_em_dash_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF"
              glib:nick="hyphens-to-em-dash-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="201">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="hyphen_to_en_dash_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON"
              glib:nick="hyphen-to-en-dash-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="202">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="hyphen_to_en_dash_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF"
              glib:nick="hyphen-to-en-dash-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="203">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="slashed_zero_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON"
              glib:nick="slashed-zero-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="204">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="slashed_zero_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF"
              glib:nick="slashed-zero-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="205">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="form_interrobang_on"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON"
              glib:nick="form-interrobang-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="206">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="form_interrobang_off"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF"
              glib:nick="form-interrobang-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="207">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="smart_quotes_on"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON"
              glib:nick="smart-quotes-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="208">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="smart_quotes_off"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF"
              glib:nick="smart-quotes-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="209">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="periods_to_ellipsis_on"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON"
              glib:nick="periods-to-ellipsis-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="210">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="periods_to_ellipsis_off"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF"
              glib:nick="periods-to-ellipsis-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="211">for #HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS</doc>
      </member>
      <member name="hyphen_to_minus_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON"
              glib:nick="hyphen-to-minus-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="212">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="hyphen_to_minus_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF"
              glib:nick="hyphen-to-minus-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="213">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="asterisk_to_multiply_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON"
              glib:nick="asterisk-to-multiply-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="214">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="asterisk_to_multiply_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF"
              glib:nick="asterisk-to-multiply-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="215">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="slash_to_divide_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON"
              glib:nick="slash-to-divide-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="216">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="slash_to_divide_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF"
              glib:nick="slash-to-divide-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="217">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="inequality_ligatures_on"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON"
              glib:nick="inequality-ligatures-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="218">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="inequality_ligatures_off"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF"
              glib:nick="inequality-ligatures-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="219">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="exponents_on"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON"
              glib:nick="exponents-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="220">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="exponents_off"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF"
              glib:nick="exponents-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="221">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="mathematical_greek_on"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON"
              glib:nick="mathematical-greek-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="222">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="mathematical_greek_off"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF"
              glib:nick="mathematical-greek-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="223">for #HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS</doc>
      </member>
      <member name="no_ornaments"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS"
              glib:nick="no-ornaments"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="224">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="dingbats"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS"
              glib:nick="dingbats"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="225">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="pi_characters"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS"
              glib:nick="pi-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="226">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="fleurons"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS"
              glib:nick="fleurons"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="227">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="decorative_borders"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS"
              glib:nick="decorative-borders"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="228">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="international_symbols"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS"
              glib:nick="international-symbols"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="229">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="math_symbols"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS"
              glib:nick="math-symbols"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="230">for #HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE</doc>
      </member>
      <member name="no_alternates"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES"
              glib:nick="no-alternates"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="231">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES</doc>
      </member>
      <member name="design_level1"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1"
              glib:nick="design-level1"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="232">for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE</doc>
      </member>
      <member name="design_level2"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2"
              glib:nick="design-level2"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="233">for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE</doc>
      </member>
      <member name="design_level3"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3"
              glib:nick="design-level3"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="234">for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE</doc>
      </member>
      <member name="design_level4"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4"
              glib:nick="design-level4"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="235">for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE</doc>
      </member>
      <member name="design_level5"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5"
              glib:nick="design-level5"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="236">for #HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE</doc>
      </member>
      <member name="no_style_options"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS"
              glib:nick="no-style-options"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="237">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="display_text"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT"
              glib:nick="display-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="238">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="engraved_text"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT"
              glib:nick="engraved-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="239">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="illuminated_caps"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS"
              glib:nick="illuminated-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="240">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="titling_caps"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS"
              glib:nick="titling-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="241">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="tall_caps"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS"
              glib:nick="tall-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="242">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS</doc>
      </member>
      <member name="traditional_characters"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS"
              glib:nick="traditional-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="243">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="simplified_characters"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS"
              glib:nick="simplified-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="244">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="jis1978_characters"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS"
              glib:nick="jis1978-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="245">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="jis1983_characters"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS"
              glib:nick="jis1983-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="246">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="jis1990_characters"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS"
              glib:nick="jis1990-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="247">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_alt_one"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE"
              glib:nick="traditional-alt-one"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="248">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_alt_two"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO"
              glib:nick="traditional-alt-two"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="249">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_alt_three"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE"
              glib:nick="traditional-alt-three"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="250">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_alt_four"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR"
              glib:nick="traditional-alt-four"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="251">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_alt_five"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE"
              glib:nick="traditional-alt-five"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="252">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="expert_characters"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS"
              glib:nick="expert-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="253">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="jis2004_characters"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS"
              glib:nick="jis2004-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="254">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="hojo_characters"
              value="12"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS"
              glib:nick="hojo-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="255">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="nlccharacters"
              value="13"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS"
              glib:nick="nlccharacters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="256">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="traditional_names_characters"
              value="14"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS"
              glib:nick="traditional-names-characters"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="257">for #HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE</doc>
      </member>
      <member name="lower_case_numbers"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS"
              glib:nick="lower-case-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="258">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE</doc>
      </member>
      <member name="upper_case_numbers"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS"
              glib:nick="upper-case-numbers"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="259">for #HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE</doc>
      </member>
      <member name="proportional_text"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT"
              glib:nick="proportional-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="260">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="monospaced_text"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT"
              glib:nick="monospaced-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="261">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="half_width_text"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT"
              glib:nick="half-width-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="262">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="third_width_text"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT"
              glib:nick="third-width-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="263">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="quarter_width_text"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT"
              glib:nick="quarter-width-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="264">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="alt_proportional_text"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT"
              glib:nick="alt-proportional-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="265">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="alt_half_width_text"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT"
              glib:nick="alt-half-width-text"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="266">for #HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING</doc>
      </member>
      <member name="no_transliteration"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION"
              glib:nick="no-transliteration"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="267">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="hanja_to_hangul"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL"
              glib:nick="hanja-to-hangul"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="268">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="hiragana_to_katakana"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA"
              glib:nick="hiragana-to-katakana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="269">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="katakana_to_hiragana"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA"
              glib:nick="katakana-to-hiragana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="270">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="kana_to_romanization"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION"
              glib:nick="kana-to-romanization"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="271">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="romanization_to_hiragana"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA"
              glib:nick="romanization-to-hiragana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="272">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="romanization_to_katakana"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA"
              glib:nick="romanization-to-katakana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="273">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="hanja_to_hangul_alt_one"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE"
              glib:nick="hanja-to-hangul-alt-one"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="274">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="hanja_to_hangul_alt_two"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO"
              glib:nick="hanja-to-hangul-alt-two"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="275">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="hanja_to_hangul_alt_three"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE"
              glib:nick="hanja-to-hangul-alt-three"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="276">for #HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION</doc>
      </member>
      <member name="no_annotation"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION"
              glib:nick="no-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="277">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="box_annotation"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION"
              glib:nick="box-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="278">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="rounded_box_annotation"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION"
              glib:nick="rounded-box-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="279">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="circle_annotation"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION"
              glib:nick="circle-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="280">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="inverted_circle_annotation"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION"
              glib:nick="inverted-circle-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="281">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="parenthesis_annotation"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION"
              glib:nick="parenthesis-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="282">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="period_annotation"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION"
              glib:nick="period-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="283">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="roman_numeral_annotation"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION"
              glib:nick="roman-numeral-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="284">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="diamond_annotation"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION"
              glib:nick="diamond-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="285">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="inverted_box_annotation"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION"
              glib:nick="inverted-box-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="286">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="inverted_rounded_box_annotation"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION"
              glib:nick="inverted-rounded-box-annotation"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="287">for #HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE</doc>
      </member>
      <member name="full_width_kana"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA"
              glib:nick="full-width-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="288">for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE</doc>
      </member>
      <member name="proportional_kana"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA"
              glib:nick="proportional-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="289">for #HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE</doc>
      </member>
      <member name="full_width_ideographs"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS"
              glib:nick="full-width-ideographs"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="290">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE</doc>
      </member>
      <member name="proportional_ideographs"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS"
              glib:nick="proportional-ideographs"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="291">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE</doc>
      </member>
      <member name="half_width_ideographs"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS"
              glib:nick="half-width-ideographs"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="292">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE</doc>
      </member>
      <member name="canonical_composition_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON"
              glib:nick="canonical-composition-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="293">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="canonical_composition_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF"
              glib:nick="canonical-composition-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="294">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="compatibility_composition_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON"
              glib:nick="compatibility-composition-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="295">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="compatibility_composition_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF"
              glib:nick="compatibility-composition-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="296">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="transcoding_composition_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON"
              glib:nick="transcoding-composition-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="297">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="transcoding_composition_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF"
              glib:nick="transcoding-composition-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="298">for #HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE</doc>
      </member>
      <member name="no_ruby_kana"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA"
              glib:nick="no-ruby-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="299">Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF instead</doc>
      </member>
      <member name="ruby_kana"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA"
              glib:nick="ruby-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="300">Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON instead</doc>
      </member>
      <member name="ruby_kana_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON"
              glib:nick="ruby-kana-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="301">for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA</doc>
      </member>
      <member name="ruby_kana_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF"
              glib:nick="ruby-kana-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="302">for #HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA</doc>
      </member>
      <member name="no_cjk_symbol_alternatives"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES"
              glib:nick="no-cjk-symbol-alternatives"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="303">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_symbol_alt_one"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE"
              glib:nick="cjk-symbol-alt-one"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="304">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_symbol_alt_two"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO"
              glib:nick="cjk-symbol-alt-two"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="305">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_symbol_alt_three"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE"
              glib:nick="cjk-symbol-alt-three"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="306">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_symbol_alt_four"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR"
              glib:nick="cjk-symbol-alt-four"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="307">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_symbol_alt_five"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE"
              glib:nick="cjk-symbol-alt-five"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="308">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="no_ideographic_alternatives"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES"
              glib:nick="no-ideographic-alternatives"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="309">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="ideographic_alt_one"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE"
              glib:nick="ideographic-alt-one"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="310">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="ideographic_alt_two"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO"
              glib:nick="ideographic-alt-two"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="311">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="ideographic_alt_three"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE"
              glib:nick="ideographic-alt-three"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="312">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="ideographic_alt_four"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR"
              glib:nick="ideographic-alt-four"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="313">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="ideographic_alt_five"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE"
              glib:nick="ideographic-alt-five"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="314">for #HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE</doc>
      </member>
      <member name="cjk_vertical_roman_centered"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED"
              glib:nick="cjk-vertical-roman-centered"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="315">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE</doc>
      </member>
      <member name="cjk_vertical_roman_hbaseline"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE"
              glib:nick="cjk-vertical-roman-hbaseline"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="316">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE</doc>
      </member>
      <member name="no_cjk_italic_roman"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN"
              glib:nick="no-cjk-italic-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="317">Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF instead</doc>
      </member>
      <member name="cjk_italic_roman"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN"
              glib:nick="cjk-italic-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="318">Deprecated; use #HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON instead</doc>
      </member>
      <member name="cjk_italic_roman_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON"
              glib:nick="cjk-italic-roman-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="319">for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN</doc>
      </member>
      <member name="cjk_italic_roman_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF"
              glib:nick="cjk-italic-roman-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="320">for #HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN</doc>
      </member>
      <member name="case_sensitive_layout_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON"
              glib:nick="case-sensitive-layout-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="321">for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT</doc>
      </member>
      <member name="case_sensitive_layout_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF"
              glib:nick="case-sensitive-layout-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="322">for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT</doc>
      </member>
      <member name="case_sensitive_spacing_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON"
              glib:nick="case-sensitive-spacing-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="323">for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT</doc>
      </member>
      <member name="case_sensitive_spacing_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF"
              glib:nick="case-sensitive-spacing-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="324">for #HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT</doc>
      </member>
      <member name="alternate_horiz_kana_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON"
              glib:nick="alternate-horiz-kana-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="325">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA</doc>
      </member>
      <member name="alternate_horiz_kana_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF"
              glib:nick="alternate-horiz-kana-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="326">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA</doc>
      </member>
      <member name="alternate_vert_kana_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON"
              glib:nick="alternate-vert-kana-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="327">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA</doc>
      </member>
      <member name="alternate_vert_kana_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF"
              glib:nick="alternate-vert-kana-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="328">for #HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA</doc>
      </member>
      <member name="no_stylistic_alternates"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES"
              glib:nick="no-stylistic-alternates"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="329">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_one_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON"
              glib:nick="stylistic-alt-one-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="330">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_one_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF"
              glib:nick="stylistic-alt-one-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="331">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_two_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON"
              glib:nick="stylistic-alt-two-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="332">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_two_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF"
              glib:nick="stylistic-alt-two-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="333">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_three_on"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON"
              glib:nick="stylistic-alt-three-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="334">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_three_off"
              value="7"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF"
              glib:nick="stylistic-alt-three-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="335">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_four_on"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON"
              glib:nick="stylistic-alt-four-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="336">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_four_off"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF"
              glib:nick="stylistic-alt-four-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="337">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_five_on"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON"
              glib:nick="stylistic-alt-five-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="338">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_five_off"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF"
              glib:nick="stylistic-alt-five-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="339">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_six_on"
              value="12"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON"
              glib:nick="stylistic-alt-six-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="340">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_six_off"
              value="13"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF"
              glib:nick="stylistic-alt-six-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="341">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_seven_on"
              value="14"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON"
              glib:nick="stylistic-alt-seven-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="342">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_seven_off"
              value="15"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF"
              glib:nick="stylistic-alt-seven-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="343">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eight_on"
              value="16"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON"
              glib:nick="stylistic-alt-eight-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="344">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eight_off"
              value="17"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF"
              glib:nick="stylistic-alt-eight-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="345">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_nine_on"
              value="18"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON"
              glib:nick="stylistic-alt-nine-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="346">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_nine_off"
              value="19"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF"
              glib:nick="stylistic-alt-nine-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="347">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_ten_on"
              value="20"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON"
              glib:nick="stylistic-alt-ten-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="348">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_ten_off"
              value="21"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF"
              glib:nick="stylistic-alt-ten-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="349">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eleven_on"
              value="22"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON"
              glib:nick="stylistic-alt-eleven-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="350">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eleven_off"
              value="23"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF"
              glib:nick="stylistic-alt-eleven-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="351">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_twelve_on"
              value="24"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON"
              glib:nick="stylistic-alt-twelve-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="352">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_twelve_off"
              value="25"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF"
              glib:nick="stylistic-alt-twelve-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="353">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_thirteen_on"
              value="26"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON"
              glib:nick="stylistic-alt-thirteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="354">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_thirteen_off"
              value="27"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF"
              glib:nick="stylistic-alt-thirteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="355">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_fourteen_on"
              value="28"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON"
              glib:nick="stylistic-alt-fourteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="356">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_fourteen_off"
              value="29"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF"
              glib:nick="stylistic-alt-fourteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="357">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_fifteen_on"
              value="30"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON"
              glib:nick="stylistic-alt-fifteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="358">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_fifteen_off"
              value="31"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF"
              glib:nick="stylistic-alt-fifteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="359">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_sixteen_on"
              value="32"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON"
              glib:nick="stylistic-alt-sixteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="360">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_sixteen_off"
              value="33"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF"
              glib:nick="stylistic-alt-sixteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="361">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_seventeen_on"
              value="34"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON"
              glib:nick="stylistic-alt-seventeen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="362">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_seventeen_off"
              value="35"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF"
              glib:nick="stylistic-alt-seventeen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="363">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eighteen_on"
              value="36"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON"
              glib:nick="stylistic-alt-eighteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="364">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_eighteen_off"
              value="37"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF"
              glib:nick="stylistic-alt-eighteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="365">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_nineteen_on"
              value="38"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON"
              glib:nick="stylistic-alt-nineteen-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="366">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_nineteen_off"
              value="39"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF"
              glib:nick="stylistic-alt-nineteen-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="367">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_twenty_on"
              value="40"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON"
              glib:nick="stylistic-alt-twenty-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="368">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="stylistic_alt_twenty_off"
              value="41"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF"
              glib:nick="stylistic-alt-twenty-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="369">for #HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES</doc>
      </member>
      <member name="contextual_alternates_on"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON"
              glib:nick="contextual-alternates-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="370">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="contextual_alternates_off"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF"
              glib:nick="contextual-alternates-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="371">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="swash_alternates_on"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON"
              glib:nick="swash-alternates-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="372">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="swash_alternates_off"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF"
              glib:nick="swash-alternates-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="373">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="contextual_swash_alternates_on"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON"
              glib:nick="contextual-swash-alternates-on"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="374">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="contextual_swash_alternates_off"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF"
              glib:nick="contextual-swash-alternates-off"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="375">for #HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES</doc>
      </member>
      <member name="default_lower_case"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE"
              glib:nick="default-lower-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="376">for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE</doc>
      </member>
      <member name="lower_case_small_caps"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS"
              glib:nick="lower-case-small-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="377">for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE</doc>
      </member>
      <member name="lower_case_petite_caps"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS"
              glib:nick="lower-case-petite-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="378">for #HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE</doc>
      </member>
      <member name="default_upper_case"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE"
              glib:nick="default-upper-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="379">for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE</doc>
      </member>
      <member name="upper_case_small_caps"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS"
              glib:nick="upper-case-small-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="380">for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE</doc>
      </member>
      <member name="upper_case_petite_caps"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS"
              glib:nick="upper-case-petite-caps"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="381">for #HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE</doc>
      </member>
      <member name="half_width_cjk_roman"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN"
              glib:nick="half-width-cjk-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="382">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE</doc>
      </member>
      <member name="proportional_cjk_roman"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN"
              glib:nick="proportional-cjk-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="383">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE</doc>
      </member>
      <member name="default_cjk_roman"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN"
              glib:nick="default-cjk-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="384">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE</doc>
      </member>
      <member name="full_width_cjk_roman"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN"
              glib:nick="full-width-cjk-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="385">for #HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE</doc>
      </member>
    </enumeration>
    <function name="aat_layout_feature_type_get_name_id"
              c:identifier="hb_aat_layout_feature_type_get_name_id"
              version="2.2.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="398">Fetches the name identifier of the specified feature type in the face's `name` table.</doc>
      <source-position filename="src/hb-aat-layout.h" line="732"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="405">Name identifier of the requested feature type</doc>
        <type name="ot_name_id_t" c:type="hb_ot_name_id_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="400">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="feature_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="401">The #hb_aat_layout_feature_type_t of the requested feature type</doc>
          <type name="aat_layout_feature_type_t"
                c:type="hb_aat_layout_feature_type_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="aat_layout_feature_type_get_selector_infos"
              c:identifier="hb_aat_layout_feature_type_get_selector_infos"
              version="2.2.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="416">Fetches a list of the selectors available for the specified feature in the given face.

If upon return, @default_index is set to #HB_AAT_LAYOUT_NO_SELECTOR_INDEX, then
the feature type is non-exclusive.  Otherwise, @default_index is the index of
the selector that is selected by default.</doc>
      <source-position filename="src/hb-aat-layout.h" line="761"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="433">Number of all available feature selectors</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="418">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="feature_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="419">The #hb_aat_layout_feature_type_t of the requested feature type</doc>
          <type name="aat_layout_feature_type_t"
                c:type="hb_aat_layout_feature_type_t"/>
        </parameter>
        <parameter name="start_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="420">offset of the first feature type to retrieve</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="selector_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="421">Input = the maximum number of selectors to return;
                 Output = the actual number of selectors returned (may be zero)</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="selectors"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="423">
            A buffer pointer. The selectors available for the feature type queries.</doc>
          <array length="3"
                 zero-terminated="0"
                 c:type="hb_aat_layout_feature_selector_info_t*">
            <type name="aat_layout_feature_selector_info_t"
                  c:type="hb_aat_layout_feature_selector_info_t"/>
          </array>
        </parameter>
        <parameter name="default_index"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="425">The index of the feature's default selector, if any</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
      </parameters>
    </function>
    <enumeration name="aat_layout_feature_type_t"
                 version="2.2.0"
                 glib:type-name="hb_aat_layout_feature_type_t"
                 glib:get-type="hb_gobject_aat_layout_feature_type_get_type"
                 c:type="hb_aat_layout_feature_type_t">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.h"
           line="38">The possible feature types defined for AAT shaping, from Apple [Font Feature Registry](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html).</doc>
      <member name="invalid"
              value="65535"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_INVALID"
              glib:nick="invalid"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_INVALID">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="40">Initial, unset feature type</doc>
      </member>
      <member name="all_typographic"
              value="0"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC"
              glib:nick="all-typographic"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="41">[All Typographic Features](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type0)</doc>
      </member>
      <member name="ligatures"
              value="1"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES"
              glib:nick="ligatures"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="42">[Ligatures](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type1)</doc>
      </member>
      <member name="cursive_connection"
              value="2"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION"
              glib:nick="cursive-connection"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="43">[Cursive Connection](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type2)</doc>
      </member>
      <member name="letter_case"
              value="3"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE"
              glib:nick="letter-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="44">[Letter Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type3)</doc>
      </member>
      <member name="vertical_substitution"
              value="4"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION"
              glib:nick="vertical-substitution"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="45">[Vertical Substitution](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type4)</doc>
      </member>
      <member name="linguistic_rearrangement"
              value="5"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT"
              glib:nick="linguistic-rearrangement"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="46">[Linguistic Rearrangement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type5)</doc>
      </member>
      <member name="number_spacing"
              value="6"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING"
              glib:nick="number-spacing"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="47">[Number Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type6)</doc>
      </member>
      <member name="smart_swash_type"
              value="8"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE"
              glib:nick="smart-swash-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="48">[Smart Swash](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type8)</doc>
      </member>
      <member name="diacritics_type"
              value="9"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE"
              glib:nick="diacritics-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="49">[Diacritics](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type9)</doc>
      </member>
      <member name="vertical_position"
              value="10"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION"
              glib:nick="vertical-position"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="50">[Vertical Position](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type10)</doc>
      </member>
      <member name="fractions"
              value="11"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS"
              glib:nick="fractions"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="51">[Fractions](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type11)</doc>
      </member>
      <member name="overlapping_characters_type"
              value="13"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE"
              glib:nick="overlapping-characters-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="52">[Overlapping Characters](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type13)</doc>
      </member>
      <member name="typographic_extras"
              value="14"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS"
              glib:nick="typographic-extras"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="53">[Typographic Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type14)</doc>
      </member>
      <member name="mathematical_extras"
              value="15"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS"
              glib:nick="mathematical-extras"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="54">[Mathematical Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type15)</doc>
      </member>
      <member name="ornament_sets_type"
              value="16"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE"
              glib:nick="ornament-sets-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="55">[Ornament Sets](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type16)</doc>
      </member>
      <member name="character_alternatives"
              value="17"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES"
              glib:nick="character-alternatives"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="56">[Character Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type17)</doc>
      </member>
      <member name="design_complexity_type"
              value="18"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE"
              glib:nick="design-complexity-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="57">[Design Complexity](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type18)</doc>
      </member>
      <member name="style_options"
              value="19"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS"
              glib:nick="style-options"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="58">[Style Options](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type19)</doc>
      </member>
      <member name="character_shape"
              value="20"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE"
              glib:nick="character-shape"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="59">[Character Shape](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type20)</doc>
      </member>
      <member name="number_case"
              value="21"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE"
              glib:nick="number-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="60">[Number Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type21)</doc>
      </member>
      <member name="text_spacing"
              value="22"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING"
              glib:nick="text-spacing"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="61">[Text Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type22)</doc>
      </member>
      <member name="transliteration"
              value="23"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION"
              glib:nick="transliteration"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="62">[Transliteration](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type23)</doc>
      </member>
      <member name="annotation_type"
              value="24"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE"
              glib:nick="annotation-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="63">[Annotation](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type24)</doc>
      </member>
      <member name="kana_spacing_type"
              value="25"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE"
              glib:nick="kana-spacing-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="64">[Kana Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type25)</doc>
      </member>
      <member name="ideographic_spacing_type"
              value="26"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE"
              glib:nick="ideographic-spacing-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="65">[Ideographic Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type26)</doc>
      </member>
      <member name="unicode_decomposition_type"
              value="27"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE"
              glib:nick="unicode-decomposition-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="66">[Unicode Decomposition](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type27)</doc>
      </member>
      <member name="ruby_kana"
              value="28"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA"
              glib:nick="ruby-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="67">[Ruby Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type28)</doc>
      </member>
      <member name="cjk_symbol_alternatives_type"
              value="29"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE"
              glib:nick="cjk-symbol-alternatives-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="68">[CJK Symbol Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type29)</doc>
      </member>
      <member name="ideographic_alternatives_type"
              value="30"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE"
              glib:nick="ideographic-alternatives-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="69">[Ideographic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type30)</doc>
      </member>
      <member name="cjk_vertical_roman_placement_type"
              value="31"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE"
              glib:nick="cjk-vertical-roman-placement-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="70">[CJK Vertical Roman Placement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type31)</doc>
      </member>
      <member name="italic_cjk_roman"
              value="32"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN"
              glib:nick="italic-cjk-roman"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="71">[Italic CJK Roman](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type32)</doc>
      </member>
      <member name="case_sensitive_layout"
              value="33"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT"
              glib:nick="case-sensitive-layout"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="72">[Case Sensitive Layout](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type33)</doc>
      </member>
      <member name="alternate_kana"
              value="34"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA"
              glib:nick="alternate-kana"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="73">[Alternate Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type34)</doc>
      </member>
      <member name="stylistic_alternatives"
              value="35"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES"
              glib:nick="stylistic-alternatives"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="74">[Stylistic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type35)</doc>
      </member>
      <member name="contextual_alternatives"
              value="36"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES"
              glib:nick="contextual-alternatives"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="75">[Contextual Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type36)</doc>
      </member>
      <member name="lower_case"
              value="37"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE"
              glib:nick="lower-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="76">[Lower Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type37)</doc>
      </member>
      <member name="upper_case"
              value="38"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE"
              glib:nick="upper-case"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="77">[Upper Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type38)</doc>
      </member>
      <member name="language_tag_type"
              value="39"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE"
              glib:nick="language-tag-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="78">[Language Tag](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type39)</doc>
      </member>
      <member name="cjk_roman_spacing_type"
              value="103"
              c:identifier="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE"
              glib:nick="cjk-roman-spacing-type"
              glib:name="HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.h"
             line="79">[CJK Roman Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html#Type103)</doc>
      </member>
    </enumeration>
    <function name="aat_layout_get_feature_types"
              c:identifier="hb_aat_layout_get_feature_types"
              version="2.2.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="375">Fetches a list of the AAT feature types included in the specified face.</doc>
      <source-position filename="src/hb-aat-layout.h" line="726"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="385">Number of all available feature types.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="377">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="start_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="378">offset of the first feature type to retrieve</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="feature_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="379">Input = the maximum number of feature types to return;
                Output = the actual number of feature types returned (may be zero)</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="features"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="381">Array of feature types found</doc>
          <array length="2"
                 zero-terminated="0"
                 c:type="hb_aat_layout_feature_type_t*">
            <type name="aat_layout_feature_type_t"
                  c:type="hb_aat_layout_feature_type_t"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="aat_layout_has_positioning"
              c:identifier="hb_aat_layout_has_positioning"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="313">Tests whether the specified face includes any positioning information
in the `kerx` table.

&lt;note&gt;Note: does not examine the `GPOS` table.&lt;/note&gt;</doc>
      <source-position filename="src/hb-aat-layout.h" line="782"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="322">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="315">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="aat_layout_has_substitution"
              c:identifier="hb_aat_layout_has_substitution"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="230">Tests whether the specified face includes any substitutions in the
`morx` or `mort` tables.

&lt;note&gt;Note: does not examine the `GSUB` table.&lt;/note&gt;</doc>
      <source-position filename="src/hb-aat-layout.h" line="774"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="239">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="232">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="aat_layout_has_tracking"
              c:identifier="hb_aat_layout_has_tracking"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="src/hb-aat-layout.cc"
           line="347">Tests whether the specified face includes any tracking information
in the `trak` table.</doc>
      <source-position filename="src/hb-aat-layout.h" line="790"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-aat-layout.cc"
             line="354">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-aat-layout.cc"
               line="349">#hb_face_t to work upon</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_copy_writable_or_fail"
              c:identifier="hb_blob_copy_writable_or_fail"
              version="1.8.0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="189">Makes a writable copy of @blob.</doc>
      <source-position filename="src/hb-blob.h" line="118"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="195">The new blob, or nullptr if allocation failed</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="191">A blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_create"
              c:identifier="hb_blob_create"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="52">Creates a new "blob" object wrapping @data.  The @mode parameter is used
to negotiate ownership and lifecycle of @data.</doc>
      <source-position filename="src/hb-blob.h" line="87"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="63">New blob, or the empty blob if something failed or if @length is
zero.  Destroy with hb_blob_destroy().</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="54">Pointer to blob data.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="55">Length of @data in bytes.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="56">Memory mode for @data.</doc>
          <type name="memory_mode_t" c:type="hb_memory_mode_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="57">Data parameter to pass to @destroy.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="58">Callback to call when @data is not needed anymore.</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_create_from_file"
              c:identifier="hb_blob_create_from_file"
              version="1.7.7">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="594">Creates a new blob containing the data from the
specified binary font file.

The filename is passed directly to the system on all platforms,
except on Windows, where the filename is interpreted as UTF-8.
Only if the filename is not valid UTF-8, it will be interpreted
according to the system codepage.</doc>
      <source-position filename="src/hb-blob.h" line="101"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="606">An #hb_blob_t pointer with the content of the file,
or hb_blob_get_empty() if failed.</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="file_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="596">A font filename</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_create_from_file_or_fail"
              c:identifier="hb_blob_create_from_file_or_fail"
              version="2.8.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="618">Creates a new blob containing the data from the
specified binary font file.

The filename is passed directly to the system on all platforms,
except on Windows, where the filename is interpreted as UTF-8.
Only if the filename is not valid UTF-8, it will be interpreted
according to the system codepage.</doc>
      <source-position filename="src/hb-blob.h" line="104"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="630">An #hb_blob_t pointer with the content of the file,
or `NULL` if failed.</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="file_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="620">A font filename</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_create_or_fail"
              c:identifier="hb_blob_create_or_fail"
              version="2.8.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="87">Creates a new "blob" object wrapping @data.  The @mode parameter is used
to negotiate ownership and lifecycle of @data.

Note that this function returns a freshly-allocated empty blob even if @length
is zero. This is in contrast to hb_blob_create(), which returns the singleton
empty blob (as returned by hb_blob_get_empty()) if @length is zero.</doc>
      <source-position filename="src/hb-blob.h" line="94"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="102">New blob, or `NULL` if failed.  Destroy with hb_blob_destroy().</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="89">Pointer to blob data.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="90">Length of @data in bytes.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="91">Memory mode for @data.</doc>
          <type name="memory_mode_t" c:type="hb_memory_mode_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="92">Data parameter to pass to @destroy.</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="93">Callback to call when @data is not needed anymore.</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_create_sub_blob"
              c:identifier="hb_blob_create_sub_blob"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="148">Returns a blob that represents a range of bytes in @parent.  The new
blob is always created with #HB_MEMORY_MODE_READONLY, meaning that it
will never modify data in the parent blob.  The parent data is not
expected to be modified, and will result in undefined behavior if it
is.

Makes @parent immutable.</doc>
      <source-position filename="src/hb-blob.h" line="113"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="162">New blob, or the empty blob if something failed or if
@length is zero or @offset is beyond the end of @parent's data.  Destroy
with hb_blob_destroy().</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="150">Parent blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="151">Start offset of sub-blob within @parent, in bytes.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="152">Length of sub-blob.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_destroy"
              c:identifier="hb_blob_destroy"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="249">Decreases the reference count on @blob, and if it reaches zero, destroys
@blob, freeing all memory, possibly calling the destroy-callback the blob
was created for if it has not been called already.

See TODO:link object types for more information.</doc>
      <source-position filename="src/hb-blob.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="251">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_get_data"
              c:identifier="hb_blob_get_data"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="363">Fetches the data from a blob.</doc>
      <source-position filename="src/hb-blob.h" line="153"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="370">the byte data of @blob.</doc>
        <array length="1" zero-terminated="0" c:type="const char*">
          <type name="utf8" c:type="char"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="365">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
        <parameter name="length"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="366">The length in bytes of the data retrieved</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_get_data_writable"
              c:identifier="hb_blob_get_data_writable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="383">Tries to make blob data writable (possibly copying it) and
return pointer to data.

Fails if blob has been made immutable, or if memory allocation
fails.</doc>
      <source-position filename="src/hb-blob.h" line="156"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="394">Writable blob data,
or `NULL` if failed.</doc>
        <array length="1" zero-terminated="0" c:type="char*">
          <type name="utf8" c:type="char"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="385">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
        <parameter name="length"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="386">output length of the writable data.</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_get_empty"
              c:identifier="hb_blob_get_empty"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="214">Returns the singleton empty blob.

See TODO:link object types for more information.</doc>
      <source-position filename="src/hb-blob.h" line="121"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="221">The empty blob.</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
    </function>
    <function name="blob_get_length"
              c:identifier="hb_blob_get_length"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="347">Fetches the length of a blob's data.</doc>
      <source-position filename="src/hb-blob.h" line="150"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="353">the length of @blob data in bytes.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="349">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_get_user_data"
              c:identifier="hb_blob_get_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="293">Fetches the user data associated with the specified key,
attached to the specified font-functions structure.</doc>
      <source-position filename="src/hb-blob.h" line="138"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="301">A pointer to the user data</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="295">a blob</doc>
          <type name="blob_t" c:type="const hb_blob_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="296">The user-data key to query</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_is_immutable"
              c:identifier="hb_blob_is_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="330">Tests whether a blob is immutable.</doc>
      <source-position filename="src/hb-blob.h" line="146"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="336">`true` if @blob is immutable, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="332">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_make_immutable"
              c:identifier="hb_blob_make_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="313">Makes a blob immutable.</doc>
      <source-position filename="src/hb-blob.h" line="143"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="315">a blob</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_reference"
              c:identifier="hb_blob_reference"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="231">Increases the reference count on @blob.

See TODO:link object types for more information.</doc>
      <source-position filename="src/hb-blob.h" line="124"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="239">@blob.</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="233">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="blob_set_user_data"
              c:identifier="hb_blob_set_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-blob.cc"
           line="269">Attaches a user-data key/data pair to the specified blob.</doc>
      <source-position filename="src/hb-blob.h" line="130"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-blob.cc"
             line="279">`true` if success, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="271">An #hb_blob_t</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="272">The user-data key to set</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="273">A pointer to the user data to set</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="274">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-blob.cc"
               line="275">Whether to replace an existing data with the same key</doc>
          <type name="bool_t" c:type="hb_bool_t"/>
        </parameter>
      </parameters>
    </function>
    <record name="blob_t"
            c:type="hb_blob_t"
            opaque="1"
            glib:type-name="hb_blob_t"
            glib:get-type="hb_gobject_blob_get_type"
            c:symbol-prefix="gobject_blob">
      <doc xml:space="preserve"
           filename="src/hb-blob.h"
           line="76">Data type for blobs. A blob wraps a chunk of binary
data and facilitates its lifecycle management between
a client program and HarfBuzz.</doc>
      <source-position filename="src/hb-blob.h" line="84"/>
    </record>
    <function name="buffer_add" c:identifier="hb_buffer_add" version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1460">Appends a character with the Unicode value of @codepoint to @buffer, and
gives it the initial cluster value of @cluster. Clusters can be any thing
the client wants, they are usually used to refer to the index of the
character in the input text stream and are output in
#hb_glyph_info_t.cluster field.

This function does not check the validity of @codepoint, it is up to the
caller to ensure it is a valid Unicode code point.</doc>
      <source-position filename="src/hb-buffer.h" line="526"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1462">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="codepoint" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1463">A Unicode code point.</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="cluster" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1464">The cluster value of @codepoint.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_codepoints"
              c:identifier="hb_buffer_add_codepoints"
              version="0.9.31">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1901">Appends characters from @text array to @buffer. The @item_offset is the
position of the first character from @text that will be appended, and
@item_length is the number of character. When shaping part of a larger text
(e.g. a run of text from a paragraph), instead of passing just the substring
corresponding to the run, it is preferable to pass the whole
paragraph and specify the run start and length as @item_offset and
@item_length, respectively, to give HarfBuzz the full context to be able,
for example, to do cross-run Arabic shaping or properly handle combining
marks at stat of run.

This function does not check the validity of @text, it is up to the caller
to ensure it contains a valid Unicode scalar values.  In contrast,
hb_buffer_add_utf32() can be used that takes similar input but performs
sanity-check on the input.</doc>
      <source-position filename="src/hb-buffer.h" line="559"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1903">a #hb_buffer_t to append characters to.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1904">an array of Unicode code points to append.</doc>
          <array length="2" zero-terminated="0" c:type="const hb_codepoint_t*">
            <type name="codepoint_t" c:type="hb_codepoint_t"/>
          </array>
        </parameter>
        <parameter name="text_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1905">the length of the @text, or -1 if it is `NULL` terminated.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="item_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1906">the offset of the first code point to add to the @buffer.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1907">the number of code points to add to the @buffer, or -1 for the
              end of @text (assuming it is `NULL` terminated).</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_latin1"
              c:identifier="hb_buffer_add_latin1"
              version="0.9.39">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1874">Similar to hb_buffer_add_codepoints(), but allows only access to first 256
Unicode code points that can fit in 8-bit strings.

&lt;note&gt;Has nothing to do with non-Unicode Latin-1 encoding.&lt;/note&gt;</doc>
      <source-position filename="src/hb-buffer.h" line="552"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1876">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1877">an array of UTF-8
              characters to append</doc>
          <array length="2" zero-terminated="0" c:type="const uint8_t*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="text_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1879">the length of the @text, or -1 if it is `NULL` terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="item_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1880">the offset of the first character to add to the @buffer</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1881">the number of characters to add to the @buffer, or -1 for the
              end of @text (assuming it is `NULL` terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_utf16"
              c:identifier="hb_buffer_add_utf16"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1822">See hb_buffer_add_codepoints().

Replaces invalid UTF-16 characters with the @buffer replacement code point,
see hb_buffer_set_replacement_codepoint().</doc>
      <source-position filename="src/hb-buffer.h" line="538"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1824">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1825">An array of UTF-16 characters to append</doc>
          <array length="2" zero-terminated="0" c:type="const uint16_t*">
            <type name="guint16" c:type="uint16_t"/>
          </array>
        </parameter>
        <parameter name="text_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1826">The length of the @text, or -1 if it is `NULL` terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="item_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1827">The offset of the first character to add to the @buffer</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1828">The number of characters to add to the @buffer, or -1 for the
              end of @text (assuming it is `NULL` terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_utf32"
              c:identifier="hb_buffer_add_utf32"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1848">See hb_buffer_add_codepoints().

Replaces invalid UTF-32 characters with the @buffer replacement code point,
see hb_buffer_set_replacement_codepoint().</doc>
      <source-position filename="src/hb-buffer.h" line="545"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1850">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1851">An array of UTF-32 characters to append</doc>
          <array length="2" zero-terminated="0" c:type="const uint32_t*">
            <type name="guint32" c:type="uint32_t"/>
          </array>
        </parameter>
        <parameter name="text_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1852">The length of the @text, or -1 if it is `NULL` terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="item_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1853">The offset of the first character to add to the @buffer</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1854">The number of characters to add to the @buffer, or -1 for the
              end of @text (assuming it is `NULL` terminated)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_utf8"
              c:identifier="hb_buffer_add_utf8"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1795">See hb_buffer_add_codepoints().

Replaces invalid UTF-8 characters with the @buffer replacement code point,
see hb_buffer_set_replacement_codepoint().</doc>
      <source-position filename="src/hb-buffer.h" line="531"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1797">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1798">An array of UTF-8
              characters to append.</doc>
          <array length="2" zero-terminated="0" c:type="const char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="text_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1800">The length of the @text, or -1 if it is `NULL` terminated.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="item_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1801">The offset of the first character to add to the @buffer.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="item_length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1802">The number of characters to add to the @buffer, or -1 for the
              end of @text (assuming it is `NULL` terminated).</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_allocation_successful"
              c:identifier="hb_buffer_allocation_successful"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1443">Check if allocating memory for the buffer succeeded.</doc>
      <source-position filename="src/hb-buffer.h" line="510"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1449">`true` if @buffer memory allocation succeeded, `false` otherwise.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1445">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_append"
              c:identifier="hb_buffer_append"
              version="1.5.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1938">Append (part of) contents of another buffer to this buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="566"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1940">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1941">source #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1942">start index into source buffer to copy.  Use 0 to copy from start of buffer.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1943">end index into source buffer to copy.  Use @HB_FEATURE_GLOBAL_END to copy to end of buffer.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_clear_contents"
              c:identifier="hb_buffer_clear_contents"
              version="0.9.11">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1407">Similar to hb_buffer_reset(), but does not clear the Unicode functions and
the replacement code point.</doc>
      <source-position filename="src/hb-buffer.h" line="502"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1409">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <enumeration name="buffer_cluster_level_t"
                 version="0.9.42"
                 glib:type-name="hb_buffer_cluster_level_t"
                 glib:get-type="hb_gobject_buffer_cluster_level_get_type"
                 c:type="hb_buffer_cluster_level_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="417">Data type for holding HarfBuzz's clustering behavior options. The cluster level
dictates one aspect of how HarfBuzz will treat non-base characters
during shaping.

In @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES, non-base
characters are merged into the cluster of the base character that precedes them.

In @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS, non-base characters are initially
assigned their own cluster values, which are not merged into preceding base
clusters. This allows HarfBuzz to perform additional operations like reorder
sequences of adjacent marks.

@HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES is the default, because it maintains
backward compatibility with older versions of HarfBuzz. New client programs that
do not need to maintain such backward compatibility are recommended to use
@HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS instead of the default.</doc>
      <member name="monotone_graphemes"
              value="0"
              c:identifier="HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES"
              glib:nick="monotone-graphemes"
              glib:name="HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="419">Return cluster values grouped by graphemes into
  monotone order.</doc>
      </member>
      <member name="monotone_characters"
              value="1"
              c:identifier="HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS"
              glib:nick="monotone-characters"
              glib:name="HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="421">Return cluster values grouped into monotone order.</doc>
      </member>
      <member name="characters"
              value="2"
              c:identifier="HB_BUFFER_CLUSTER_LEVEL_CHARACTERS"
              glib:nick="characters"
              glib:name="HB_BUFFER_CLUSTER_LEVEL_CHARACTERS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="422">Don't group cluster values.</doc>
      </member>
      <member name="default"
              value="0"
              c:identifier="HB_BUFFER_CLUSTER_LEVEL_DEFAULT"
              glib:nick="default"
              glib:name="HB_BUFFER_CLUSTER_LEVEL_DEFAULT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="423">Default cluster level,
  equal to @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES.</doc>
      </member>
    </enumeration>
    <enumeration name="buffer_content_type_t"
                 glib:type-name="hb_buffer_content_type_t"
                 glib:get-type="hb_gobject_buffer_content_type_get_type"
                 c:type="hb_buffer_content_type_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="283">The type of #hb_buffer_t contents.</doc>
      <member name="invalid"
              value="0"
              c:identifier="HB_BUFFER_CONTENT_TYPE_INVALID"
              glib:nick="invalid"
              glib:name="HB_BUFFER_CONTENT_TYPE_INVALID">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="285">Initial value for new buffer.</doc>
      </member>
      <member name="unicode"
              value="1"
              c:identifier="HB_BUFFER_CONTENT_TYPE_UNICODE"
              glib:nick="unicode"
              glib:name="HB_BUFFER_CONTENT_TYPE_UNICODE">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="286">The buffer contains input characters (before shaping).</doc>
      </member>
      <member name="glyphs"
              value="2"
              c:identifier="HB_BUFFER_CONTENT_TYPE_GLYPHS"
              glib:nick="glyphs"
              glib:name="HB_BUFFER_CONTENT_TYPE_GLYPHS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="287">The buffer contains output glyphs (after shaping).</doc>
      </member>
    </enumeration>
    <function name="buffer_create"
              c:identifier="hb_buffer_create"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="722">Creates a new #hb_buffer_t with all properties to defaults.</doc>
      <source-position filename="src/hb-buffer.h" line="253"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="727">
A newly allocated #hb_buffer_t with a reference count of 1. The initial
reference count should be released with hb_buffer_destroy() when you are done
using the #hb_buffer_t. This function never returns `NULL`. If memory cannot
be allocated, a special #hb_buffer_t object will be returned on which
hb_buffer_allocation_successful() returns `false`.</doc>
        <type name="buffer_t" c:type="hb_buffer_t*"/>
      </return-value>
    </function>
    <function name="buffer_create_similar"
              c:identifier="hb_buffer_create_similar"
              version="3.3.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="752">Creates a new #hb_buffer_t, similar to hb_buffer_create(). The only
difference is that the buffer is configured similarly to @src.</doc>
      <source-position filename="src/hb-buffer.h" line="256"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="759">
A newly allocated #hb_buffer_t, similar to hb_buffer_create().</doc>
        <type name="buffer_t" c:type="hb_buffer_t*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="754">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_deserialize_glyphs"
              c:identifier="hb_buffer_deserialize_glyphs"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="727">Deserializes glyphs @buffer from textual representation in the format
produced by hb_buffer_serialize_glyphs().</doc>
      <source-position filename="src/hb-buffer.h" line="687"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="740">`true` if parse was successful, `false` if an error
occurred.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="729">an #hb_buffer_t buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="730">string to deserialize</doc>
          <array length="2" zero-terminated="0" c:type="const char*">
            <type name="utf8" c:type="char"/>
          </array>
        </parameter>
        <parameter name="buf_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="731">the size of @buf, or -1 if it is `NULL`-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="end_ptr"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="732">output pointer to the character after last
                              consumed one.</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="font"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="734">font for getting glyph IDs</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="735">the #hb_buffer_serialize_format_t of the input @buf</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_deserialize_unicode"
              c:identifier="hb_buffer_deserialize_unicode"
              version="2.7.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="801">Deserializes Unicode @buffer from textual representation in the format
produced by hb_buffer_serialize_unicode().</doc>
      <source-position filename="src/hb-buffer.h" line="695"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="813">`true` if parse was successful, `false` if an error
occurred.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="803">an #hb_buffer_t buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="804">string to deserialize</doc>
          <array length="2" zero-terminated="0" c:type="const char*">
            <type name="utf8" c:type="char"/>
          </array>
        </parameter>
        <parameter name="buf_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="805">the size of @buf, or -1 if it is `NULL`-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="end_ptr"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="806">output pointer to the character after last
                              consumed one.</doc>
          <type name="utf8" c:type="const char**"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="808">the #hb_buffer_serialize_format_t of the input @buf</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_destroy"
              c:identifier="hb_buffer_destroy"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="825">Deallocate the @buffer.
Decreases the reference count on @buffer by one. If the result is zero, then
@buffer and all associated resources are freed. See hb_buffer_reference().</doc>
      <source-position filename="src/hb-buffer.h" line="269"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="827">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_diff" c:identifier="hb_buffer_diff" version="1.5.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="2119">If dottedcircle_glyph is (hb_codepoint_t) -1 then #HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT
and #HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT are never returned.  This should be used by most
callers if just comparing two buffers is needed.</doc>
      <source-position filename="src/hb-buffer.h" line="765"/>
      <return-value transfer-ownership="none">
        <type name="buffer_diff_flags_t" c:type="hb_buffer_diff_flags_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2121">a buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="reference" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2122">other buffer to compare to.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="dottedcircle_glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2123">glyph id of U+25CC DOTTED CIRCLE, or (hb_codepoint_t) -1.</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="position_fuzz" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2124">allowed absolute difference in position values.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <bitfield name="buffer_diff_flags_t"
              version="1.5.0"
              glib:type-name="hb_buffer_diff_flags_t"
              glib:get-type="hb_gobject_buffer_diff_flags_get_type"
              c:type="hb_buffer_diff_flags_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="707">Flags from comparing two #hb_buffer_t's.

Buffer with different #hb_buffer_content_type_t cannot be meaningfully
compared in any further detail.

For buffers with differing length, the per-glyph comparison is not
attempted, though we do still scan reference buffer for dotted circle and
`.notdef` glyphs.

If the buffers have the same length, we compare them glyph-by-glyph and
report which aspect(s) of the glyph info/position are different.</doc>
      <member name="equal"
              value="0"
              c:identifier="HB_BUFFER_DIFF_FLAG_EQUAL"
              glib:nick="equal"
              glib:name="HB_BUFFER_DIFF_FLAG_EQUAL">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="709">equal buffers.</doc>
      </member>
      <member name="content_type_mismatch"
              value="1"
              c:identifier="HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH"
              glib:nick="content-type-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="710">buffers with different
    #hb_buffer_content_type_t.</doc>
      </member>
      <member name="length_mismatch"
              value="2"
              c:identifier="HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH"
              glib:nick="length-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="712">buffers with differing length.</doc>
      </member>
      <member name="notdef_present"
              value="4"
              c:identifier="HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT"
              glib:nick="notdef-present"
              glib:name="HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="713">`.notdef` glyph is present in the
    reference buffer.</doc>
      </member>
      <member name="dotted_circle_present"
              value="8"
              c:identifier="HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT"
              glib:nick="dotted-circle-present"
              glib:name="HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="715">dotted circle glyph is present
    in the reference buffer.</doc>
      </member>
      <member name="codepoint_mismatch"
              value="16"
              c:identifier="HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH"
              glib:nick="codepoint-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="717">difference in #hb_glyph_info_t.codepoint</doc>
      </member>
      <member name="cluster_mismatch"
              value="32"
              c:identifier="HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH"
              glib:nick="cluster-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="718">difference in #hb_glyph_info_t.cluster</doc>
      </member>
      <member name="glyph_flags_mismatch"
              value="64"
              c:identifier="HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH"
              glib:nick="glyph-flags-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="719">difference in #hb_glyph_flags_t.</doc>
      </member>
      <member name="position_mismatch"
              value="128"
              c:identifier="HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH"
              glib:nick="position-mismatch"
              glib:name="HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="720">difference in #hb_glyph_position_t.</doc>
      </member>
    </bitfield>
    <bitfield name="buffer_flags_t"
              version="0.9.20"
              glib:type-name="hb_buffer_flags_t"
              glib:get-type="hb_gobject_buffer_flags_get_type"
              c:type="hb_buffer_flags_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="346">Flags for #hb_buffer_t.</doc>
      <member name="default"
              value="0"
              c:identifier="HB_BUFFER_FLAG_DEFAULT"
              glib:nick="default"
              glib:name="HB_BUFFER_FLAG_DEFAULT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="348">the default buffer flag.</doc>
      </member>
      <member name="bot"
              value="1"
              c:identifier="HB_BUFFER_FLAG_BOT"
              glib:nick="bot"
              glib:name="HB_BUFFER_FLAG_BOT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="349">flag indicating that special handling of the beginning
                     of text paragraph can be applied to this buffer. Should usually
                     be set, unless you are passing to the buffer only part
                     of the text without the full context.</doc>
      </member>
      <member name="eot"
              value="2"
              c:identifier="HB_BUFFER_FLAG_EOT"
              glib:nick="eot"
              glib:name="HB_BUFFER_FLAG_EOT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="353">flag indicating that special handling of the end of text
                     paragraph can be applied to this buffer, similar to
                     @HB_BUFFER_FLAG_BOT.</doc>
      </member>
      <member name="preserve_default_ignorables"
              value="4"
              c:identifier="HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES"
              glib:nick="preserve-default-ignorables"
              glib:name="HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="356">flag indication that character with Default_Ignorable
                     Unicode property should use the corresponding glyph
                     from the font, instead of hiding them (done by
                     replacing them with the space glyph and zeroing the
                     advance width.)  This flag takes precedence over
                     @HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES.</doc>
      </member>
      <member name="remove_default_ignorables"
              value="8"
              c:identifier="HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES"
              glib:nick="remove-default-ignorables"
              glib:name="HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="363">flag indication that character with Default_Ignorable
                     Unicode property should be removed from glyph string
                     instead of hiding them (done by replacing them with the
                     space glyph and zeroing the advance width.)
                     @HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES takes
                     precedence over this flag. Since: 1.8.0</doc>
      </member>
      <member name="do_not_insert_dotted_circle"
              value="16"
              c:identifier="HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE"
              glib:nick="do-not-insert-dotted-circle"
              glib:name="HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="370">flag indicating that a dotted circle should
                     not be inserted in the rendering of incorrect
                     character sequences (such at &lt;0905 093E&gt;). Since: 2.4.0</doc>
      </member>
      <member name="verify"
              value="32"
              c:identifier="HB_BUFFER_FLAG_VERIFY"
              glib:nick="verify"
              glib:name="HB_BUFFER_FLAG_VERIFY">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="374">flag indicating that the hb_shape() call and its variants
                     should perform various verification processes on the results
                     of the shaping operation on the buffer.  If the verification
                     fails, then either a buffer message is sent, if a message
                     handler is installed on the buffer, or a message is written
                     to standard error.  In either case, the shaping result might
                     be modified to show the failed output. Since: 3.4.0</doc>
      </member>
      <member name="produce_unsafe_to_concat"
              value="64"
              c:identifier="HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT"
              glib:nick="produce-unsafe-to-concat"
              glib:name="HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="382">flag indicating that the @HB_GLYPH_FLAG_UNSAFE_TO_CONCAT
                     glyph-flag should be produced by the shaper. By default
                     it will not be produced since it incurs a cost. Since: 4.0.0</doc>
      </member>
      <member name="produce_safe_to_insert_tatweel"
              value="128"
              c:identifier="HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL"
              glib:nick="produce-safe-to-insert-tatweel"
              glib:name="HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="386">flag indicating that the @HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL
                     glyph-flag should be produced by the shaper. By default
                     it will not be produced. Since: 5.1.0</doc>
      </member>
      <member name="defined"
              value="255"
              c:identifier="HB_BUFFER_FLAG_DEFINED"
              glib:nick="defined"
              glib:name="HB_BUFFER_FLAG_DEFINED">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="390">All currently defined flags: Since: 4.4.0</doc>
      </member>
    </bitfield>
    <function name="buffer_get_cluster_level"
              c:identifier="hb_buffer_get_cluster_level"
              version="0.9.42">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1224">Fetches the cluster level of a buffer. The #hb_buffer_cluster_level_t
dictates one aspect of how HarfBuzz will treat non-base characters
during shaping.</doc>
      <source-position filename="src/hb-buffer.h" line="457"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1232">The cluster level of @buffer</doc>
        <type name="buffer_cluster_level_t"
              c:type="hb_buffer_cluster_level_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1226">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_content_type"
              c:identifier="hb_buffer_get_content_type"
              version="0.9.5">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="939">Fetches the type of @buffer contents. Buffers are either empty, contain
characters (before shaping), or contain glyphs (the result of shaping).</doc>
      <source-position filename="src/hb-buffer.h" line="302"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="946">The type of @buffer contents</doc>
        <type name="buffer_content_type_t" c:type="hb_buffer_content_type_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="941">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_direction"
              c:identifier="hb_buffer_get_direction"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1024">See hb_buffer_set_direction()</doc>
      <source-position filename="src/hb-buffer.h" line="317"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1030">The direction of the @buffer.</doc>
        <type name="direction_t" c:type="hb_direction_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1026">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_empty"
              c:identifier="hb_buffer_get_empty"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="792">Fetches an empty #hb_buffer_t.</doc>
      <source-position filename="src/hb-buffer.h" line="263"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="797">The empty buffer</doc>
        <type name="buffer_t" c:type="hb_buffer_t*"/>
      </return-value>
    </function>
    <function name="buffer_get_flags"
              c:identifier="hb_buffer_get_flags"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1186">Fetches the #hb_buffer_flags_t of @buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="415"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1192">The @buffer flags</doc>
        <type name="buffer_flags_t" c:type="hb_buffer_flags_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1188">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_glyph_infos"
              c:identifier="hb_buffer_get_glyph_infos"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1546">Returns @buffer glyph information array.  Returned pointer
is valid as long as @buffer contents are not modified.</doc>
      <source-position filename="src/hb-buffer.h" line="581"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1554">
The @buffer glyph information array.
The value valid as long as buffer has not been modified.</doc>
        <array length="1" zero-terminated="0" c:type="hb_glyph_info_t*">
          <type name="glyph_info_t" c:type="hb_glyph_info_t"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1548">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="length"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1549">The output-array length.</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_glyph_positions"
              c:identifier="hb_buffer_get_glyph_positions"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1570">Returns @buffer glyph position array.  Returned pointer
is valid as long as @buffer contents are not modified.

If buffer did not have positions before, the positions will be
initialized to zeros, unless this function is called from
within a buffer message callback (see hb_buffer_set_message_func()),
in which case `NULL` is returned.</doc>
      <source-position filename="src/hb-buffer.h" line="585"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1583">
The @buffer glyph position array.
The value valid as long as buffer has not been modified.</doc>
        <array length="1" zero-terminated="0" c:type="hb_glyph_position_t*">
          <type name="glyph_position_t" c:type="hb_glyph_position_t"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1572">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="length"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1573">The output length</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_invisible_glyph"
              c:identifier="hb_buffer_get_invisible_glyph"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1306">See hb_buffer_set_invisible_glyph().</doc>
      <source-position filename="src/hb-buffer.h" line="481"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1312">The @buffer invisible #hb_codepoint_t</doc>
        <type name="codepoint_t" c:type="hb_codepoint_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1308">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_language"
              c:identifier="hb_buffer_get_language"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1112">See hb_buffer_set_language().</doc>
      <source-position filename="src/hb-buffer.h" line="332"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1118">
The #hb_language_t of the buffer. Must not be freed by the caller.</doc>
        <type name="language_t" c:type="hb_language_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1114">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_length"
              c:identifier="hb_buffer_get_length"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1528">Returns the number of items in the buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="576"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1534">The @buffer length.
The value valid as long as buffer has not been modified.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1530">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_not_found_glyph"
              c:identifier="hb_buffer_get_not_found_glyph"
              version="3.1.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1346">See hb_buffer_set_not_found_glyph().</doc>
      <source-position filename="src/hb-buffer.h" line="488"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1352">The @buffer not-found #hb_codepoint_t</doc>
        <type name="codepoint_t" c:type="hb_codepoint_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1348">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_random_state"
              c:identifier="hb_buffer_get_random_state"
              version="8.4.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1390">See hb_buffer_set_random_state().</doc>
      <source-position filename="src/hb-buffer.h" line="495"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1396">The @buffer random state</doc>
        <type name="guint" c:type="unsigned"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1392">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_replacement_codepoint"
              c:identifier="hb_buffer_get_replacement_codepoint"
              version="0.9.31">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1265">Fetches the #hb_codepoint_t that replaces invalid entries for a given encoding
when adding text to @buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="474"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1272">The @buffer replacement #hb_codepoint_t</doc>
        <type name="codepoint_t" c:type="hb_codepoint_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1267">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_script"
              c:identifier="hb_buffer_get_script"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1068">Fetches the script of @buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="324"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1074">The #hb_script_t of the @buffer</doc>
        <type name="script_t" c:type="hb_script_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1070">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_segment_properties"
              c:identifier="hb_buffer_get_segment_properties"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1150">Sets @props to the #hb_segment_properties_t of @buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="339"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1152">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
        <parameter name="props"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1153">The output #hb_segment_properties_t</doc>
          <type name="segment_properties_t" c:type="hb_segment_properties_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_unicode_funcs"
              c:identifier="hb_buffer_get_unicode_funcs"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="983">Fetches the Unicode-functions structure of a buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="310"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="989">The Unicode-functions structure</doc>
        <type name="unicode_funcs_t" c:type="hb_unicode_funcs_t*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="985">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_user_data"
              c:identifier="hb_buffer_get_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="876">Fetches the user data associated with the specified key,
attached to the specified buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="279"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="884">A pointer to the user data</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="878">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="const hb_buffer_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="879">The user-data key to query</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_guess_segment_properties"
              c:identifier="hb_buffer_guess_segment_properties"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1690">Sets unset buffer segment properties based on buffer Unicode
contents.  If buffer is not empty, it must have content type
#HB_BUFFER_CONTENT_TYPE_UNICODE.

If buffer script is not set (ie. is #HB_SCRIPT_INVALID), it
will be set to the Unicode script of the first character in
the buffer that has a script other than #HB_SCRIPT_COMMON,
#HB_SCRIPT_INHERITED, and #HB_SCRIPT_UNKNOWN.

Next, if buffer direction is not set (ie. is #HB_DIRECTION_INVALID),
it will be set to the natural horizontal direction of the
buffer script as returned by hb_script_get_horizontal_direction().
If hb_script_get_horizontal_direction() returns #HB_DIRECTION_INVALID,
then #HB_DIRECTION_LTR is used.

Finally, if buffer language is not set (ie. is #HB_LANGUAGE_INVALID),
it will be set to the process's default language as returned by
hb_language_get_default().  This may change in the future by
taking buffer script into consideration when choosing a language.
Note that hb_language_get_default() is NOT threadsafe the first time
it is called.  See documentation for that function for details.</doc>
      <source-position filename="src/hb-buffer.h" line="343"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1692">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_has_positions"
              c:identifier="hb_buffer_has_positions"
              version="2.7.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1607">Returns whether @buffer has glyph position data.
A buffer gains position data when hb_buffer_get_glyph_positions() is called on it,
and cleared of position data when hb_buffer_clear_contents() is called.</doc>
      <source-position filename="src/hb-buffer.h" line="589"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1615">`true` if the @buffer has position array, `false` otherwise.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1609">an #hb_buffer_t.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="buffer_message_func_t"
              c:type="hb_buffer_message_func_t"
              version="1.1.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="775">A callback method for #hb_buffer_t. The method gets called with the
#hb_buffer_t it was set on, the #hb_font_t the buffer is shaped with and a
message describing what step of the shaping process will be performed.
Returning `false` from this method will skip this shaping step and move to
the next one.</doc>
      <source-position filename="src/hb-buffer.h" line="792"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="788">`true` to perform the shaping step, `false` to skip it.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.h"
               line="777">An #hb_buffer_t to work upon</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.h"
               line="778">The #hb_font_t the @buffer is shaped with</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.h"
               line="779">`NULL`-terminated message passed to the function</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/hb-buffer.h"
               line="780">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="buffer_normalize_glyphs"
              c:identifier="hb_buffer_normalize_glyphs"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="2069">Reorders a glyph buffer to have canonical in-cluster glyph order / position.
The resulting clusters should behave identical to pre-reordering clusters.

&lt;note&gt;This has nothing to do with Unicode normalization.&lt;/note&gt;</doc>
      <source-position filename="src/hb-buffer.h" line="593"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2071">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_pre_allocate"
              c:identifier="hb_buffer_pre_allocate"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1425">Pre allocates memory for @buffer to fit at least @size number of items.</doc>
      <source-position filename="src/hb-buffer.h" line="505"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1432">`true` if @buffer memory allocation succeeded, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1427">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1428">Number of items to pre allocate.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_reference"
              c:identifier="hb_buffer_reference"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="807">Increases the reference count on @buffer by one. This prevents @buffer from
being destroyed until a matching call to hb_buffer_destroy() is made.</doc>
      <source-position filename="src/hb-buffer.h" line="266"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="814">
The referenced #hb_buffer_t.</doc>
        <type name="buffer_t" c:type="hb_buffer_t*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="809">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_reset"
              c:identifier="hb_buffer_reset"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="774">Resets the buffer to its initial status, as if it was just newly created
with hb_buffer_create().</doc>
      <source-position filename="src/hb-buffer.h" line="259"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="776">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_reverse"
              c:identifier="hb_buffer_reverse"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1643">Reverses buffer contents.</doc>
      <source-position filename="src/hb-buffer.h" line="513"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1645">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_reverse_clusters"
              c:identifier="hb_buffer_reverse_clusters"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1674">Reverses buffer clusters.  That is, the buffer contents are
reversed, then each cluster (consecutive items having the
same cluster number) are reversed again.</doc>
      <source-position filename="src/hb-buffer.h" line="520"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1676">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_reverse_range"
              c:identifier="hb_buffer_reverse_range"
              version="0.9.41">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1657">Reverses buffer contents between @start and @end.</doc>
      <source-position filename="src/hb-buffer.h" line="516"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1659">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1660">start index</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1661">end index</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_serialize"
              c:identifier="hb_buffer_serialize"
              version="2.7.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="632">Serializes @buffer into a textual representation of its content, whether
Unicode codepoints or glyph identifiers and positioning information. This is
useful for showing the contents of the buffer, for example during debugging.
See the documentation of hb_buffer_serialize_unicode() and
hb_buffer_serialize_glyphs() for a description of the output format.</doc>
      <source-position filename="src/hb-buffer.h" line="676"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="653">The number of serialized items.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="634">an #hb_buffer_t buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="635">the first item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="636">the last item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="637">output string to
      write serialized buffer into.</doc>
          <array length="4" zero-terminated="0" c:type="char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="buf_size"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="639">the size of @buf.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf_consumed"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="640">if not `NULL`, will be set to the number of bytes written into @buf.</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="font"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="641">the #hb_font_t used to shape this buffer, needed to
       read glyph names and extents. If `NULL`, an empty font will be used.</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="643">the #hb_buffer_serialize_format_t to use for formatting the output.</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="644">the #hb_buffer_serialize_flags_t that control what glyph properties
        to serialize.</doc>
          <type name="buffer_serialize_flags_t"
                c:type="hb_buffer_serialize_flags_t"/>
        </parameter>
      </parameters>
    </function>
    <bitfield name="buffer_serialize_flags_t"
              version="0.9.20"
              glib:type-name="hb_buffer_serialize_flags_t"
              glib:get-type="hb_gobject_buffer_serialize_flags_get_type"
              c:type="hb_buffer_serialize_flags_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="600">Flags that control what glyph information are serialized in hb_buffer_serialize_glyphs().</doc>
      <member name="default"
              value="0"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_DEFAULT"
              glib:nick="default"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_DEFAULT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="602">serialize glyph names, clusters and positions.</doc>
      </member>
      <member name="no_clusters"
              value="1"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS"
              glib:nick="no-clusters"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="603">do not serialize glyph cluster.</doc>
      </member>
      <member name="no_positions"
              value="2"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS"
              glib:nick="no-positions"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="604">do not serialize glyph position information.</doc>
      </member>
      <member name="no_glyph_names"
              value="4"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES"
              glib:nick="no-glyph-names"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="605">do no serialize glyph name.</doc>
      </member>
      <member name="glyph_extents"
              value="8"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS"
              glib:nick="glyph-extents"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="606">serialize glyph extents.</doc>
      </member>
      <member name="glyph_flags"
              value="16"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS"
              glib:nick="glyph-flags"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="607">serialize glyph flags. Since: 1.5.0</doc>
      </member>
      <member name="no_advances"
              value="32"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES"
              glib:nick="no-advances"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="608">do not serialize glyph advances,
 glyph offsets will reflect absolute glyph positions. Since: 1.8.0</doc>
      </member>
      <member name="defined"
              value="63"
              c:identifier="HB_BUFFER_SERIALIZE_FLAG_DEFINED"
              glib:nick="defined"
              glib:name="HB_BUFFER_SERIALIZE_FLAG_DEFINED">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="610">All currently defined flags. Since: 4.4.0</doc>
      </member>
    </bitfield>
    <function name="buffer_serialize_format_from_string"
              c:identifier="hb_buffer_serialize_format_from_string"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="56">Parses a string into an #hb_buffer_serialize_format_t. Does not check if
@str is a valid buffer serialization format, use
hb_buffer_serialize_list_formats() to get the list of supported formats.</doc>
      <source-position filename="src/hb-buffer.h" line="646"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="65">The parsed #hb_buffer_serialize_format_t.</doc>
        <type name="buffer_serialize_format_t"
              c:type="hb_buffer_serialize_format_t"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="58">a string to parse</doc>
          <array length="1" zero-terminated="0" c:type="const char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="59">length of @str, or -1 if string is `NULL` terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <enumeration name="buffer_serialize_format_t"
                 version="0.9.2"
                 glib:type-name="hb_buffer_serialize_format_t"
                 glib:get-type="hb_gobject_buffer_serialize_format_get_type"
                 c:type="hb_buffer_serialize_format_t">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="628">The buffer serialization and de-serialization format used in
hb_buffer_serialize_glyphs() and hb_buffer_deserialize_glyphs().</doc>
      <member name="text"
              value="1413830740"
              c:identifier="HB_BUFFER_SERIALIZE_FORMAT_TEXT"
              glib:nick="text"
              glib:name="HB_BUFFER_SERIALIZE_FORMAT_TEXT">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="630">a human-readable, plain text format.</doc>
      </member>
      <member name="json"
              value="1246973774"
              c:identifier="HB_BUFFER_SERIALIZE_FORMAT_JSON"
              glib:nick="json"
              glib:name="HB_BUFFER_SERIALIZE_FORMAT_JSON">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="631">a machine-readable JSON format.</doc>
      </member>
      <member name="invalid"
              value="0"
              c:identifier="HB_BUFFER_SERIALIZE_FORMAT_INVALID"
              glib:nick="invalid"
              glib:name="HB_BUFFER_SERIALIZE_FORMAT_INVALID">
        <doc xml:space="preserve"
             filename="src/hb-buffer.h"
             line="632">invalid format.</doc>
      </member>
    </enumeration>
    <function name="buffer_serialize_format_to_string"
              c:identifier="hb_buffer_serialize_format_to_string"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="77">Converts @format to the string corresponding it, or `NULL` if it is not a valid
#hb_buffer_serialize_format_t.</doc>
      <source-position filename="src/hb-buffer.h" line="649"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="84">
A `NULL` terminated string corresponding to @format. Should not be freed.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="79">an #hb_buffer_serialize_format_t to convert.</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_serialize_glyphs"
              c:identifier="hb_buffer_serialize_glyphs"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="395">Serializes @buffer into a textual representation of its glyph content,
useful for showing the contents of the buffer, for example during debugging.
There are currently two supported serialization formats:

## text
A human-readable, plain text format.
The serialized glyphs will look something like:

```
[uni0651=0@518,0+0|uni0628=0+1897]
```

- The serialized glyphs are delimited with `[` and `]`.
- Glyphs are separated with `|`
- Each glyph starts with glyph name, or glyph index if
  #HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES flag is set. Then,
  - If #HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS is not set, `=` then #hb_glyph_info_t.cluster.
  - If #HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS is not set, the #hb_glyph_position_t in the format:
    - If both #hb_glyph_position_t.x_offset and #hb_glyph_position_t.y_offset are not 0, `@x_offset,y_offset`. Then,
    - `+x_advance`, then `,y_advance` if #hb_glyph_position_t.y_advance is not 0. Then,
  - If #HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS is set, the #hb_glyph_extents_t in the format `&lt;x_bearing,y_bearing,width,height&gt;`

## json
A machine-readable, structured format.
The serialized glyphs will look something like:

```
[{"g":"uni0651","cl":0,"dx":518,"dy":0,"ax":0,"ay":0},
{"g":"uni0628","cl":0,"dx":0,"dy":0,"ax":1897,"ay":0}]
```

Each glyph is a JSON object, with the following properties:
- `g`: the glyph name or glyph index if
  #HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES flag is set.
- `cl`: #hb_glyph_info_t.cluster if
  #HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS is not set.
- `dx`,`dy`,`ax`,`ay`: #hb_glyph_position_t.x_offset, #hb_glyph_position_t.y_offset,
   #hb_glyph_position_t.x_advance and #hb_glyph_position_t.y_advance
   respectively, if #HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS is not set.
- `xb`,`yb`,`w`,`h`: #hb_glyph_extents_t.x_bearing, #hb_glyph_extents_t.y_bearing,
   #hb_glyph_extents_t.width and #hb_glyph_extents_t.height respectively if
   #HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS is set.</doc>
      <source-position filename="src/hb-buffer.h" line="655"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="453">The number of serialized items.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="397">an #hb_buffer_t buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="398">the first item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="399">the last item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="400">output string to
      write serialized buffer into.</doc>
          <array length="4" zero-terminated="0" c:type="char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="buf_size"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="402">the size of @buf.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf_consumed"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="403">if not `NULL`, will be set to the number of bytes written into @buf.</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="font"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="404">the #hb_font_t used to shape this buffer, needed to
       read glyph names and extents. If `NULL`, an empty font will be used.</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="406">the #hb_buffer_serialize_format_t to use for formatting the output.</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="407">the #hb_buffer_serialize_flags_t that control what glyph properties
        to serialize.</doc>
          <type name="buffer_serialize_flags_t"
                c:type="hb_buffer_serialize_flags_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_serialize_list_formats"
              c:identifier="hb_buffer_serialize_list_formats"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="40">Returns a list of supported buffer serialization formats.</doc>
      <source-position filename="src/hb-buffer.h" line="652"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="45">
A string array of buffer serialization formats. Should not be freed.</doc>
        <array c:type="const char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="buffer_serialize_unicode"
              c:identifier="hb_buffer_serialize_unicode"
              version="2.7.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer-serialize.cc"
           line="509">Serializes @buffer into a textual representation of its content,
when the buffer contains Unicode codepoints (i.e., before shaping). This is
useful for showing the contents of the buffer, for example during debugging.
There are currently two supported serialization formats:

## text
A human-readable, plain text format.
The serialized codepoints will look something like:

```
 &lt;U+0651=0|U+0628=1&gt;
```

- Glyphs are separated with `|`
- Unicode codepoints are expressed as zero-padded four (or more)
  digit hexadecimal numbers preceded by `U+`
- If #HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS is not set, the cluster
  will be indicated with a `=` then #hb_glyph_info_t.cluster.

## json
A machine-readable, structured format.
The serialized codepoints will be a list of objects with the following
properties:
- `u`: the Unicode codepoint as a decimal integer
- `cl`: #hb_glyph_info_t.cluster if
  #HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS is not set.

For example:

```
[{u:1617,cl:0},{u:1576,cl:1}]
```</doc>
      <source-position filename="src/hb-buffer.h" line="666"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer-serialize.cc"
             line="555">The number of serialized items.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="511">an #hb_buffer_t buffer.</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="512">the first item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="513">the last item in @buffer to serialize.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="514">output string to
      write serialized buffer into.</doc>
          <array length="4" zero-terminated="0" c:type="char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="buf_size"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="516">the size of @buf.</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="buf_consumed"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="517">if not `NULL`, will be set to the number of bytes written into @buf.</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="518">the #hb_buffer_serialize_format_t to use for formatting the output.</doc>
          <type name="buffer_serialize_format_t"
                c:type="hb_buffer_serialize_format_t"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer-serialize.cc"
               line="519">the #hb_buffer_serialize_flags_t that control what glyph properties
        to serialize.</doc>
          <type name="buffer_serialize_flags_t"
                c:type="hb_buffer_serialize_flags_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_cluster_level"
              c:identifier="hb_buffer_set_cluster_level"
              version="0.9.42">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1203">Sets the cluster level of a buffer. The #hb_buffer_cluster_level_t
dictates one aspect of how HarfBuzz will treat non-base characters
during shaping.</doc>
      <source-position filename="src/hb-buffer.h" line="453"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1205">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="cluster_level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1206">The cluster level to set on the buffer</doc>
          <type name="buffer_cluster_level_t"
                c:type="hb_buffer_cluster_level_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_content_type"
              c:identifier="hb_buffer_set_content_type"
              version="0.9.5">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="896">Sets the type of @buffer contents. Buffers are either empty, contain
characters (before shaping), or contain glyphs (the result of shaping).

You rarely need to call this function, since a number of other
functions transition the content type for you. Namely:

- A newly created buffer starts with content type
  %HB_BUFFER_CONTENT_TYPE_INVALID. Calling hb_buffer_reset(),
  hb_buffer_clear_contents(), as well as calling hb_buffer_set_length()
  with an argument of zero all set the buffer content type to invalid
  as well.

- Calling hb_buffer_add_utf8(), hb_buffer_add_utf16(),
  hb_buffer_add_utf32(), hb_buffer_add_codepoints() and
  hb_buffer_add_latin1() expect that buffer is either empty and
  have a content type of invalid, or that buffer content type is
  %HB_BUFFER_CONTENT_TYPE_UNICODE, and they also set the content
  type to Unicode if they added anything to an empty buffer.

- Finally hb_shape() and hb_shape_full() expect that the buffer
  is either empty and have content type of invalid, or that buffer
  content type is %HB_BUFFER_CONTENT_TYPE_UNICODE, and upon
  success they set the buffer content type to
  %HB_BUFFER_CONTENT_TYPE_GLYPHS.

The above transitions are designed such that one can use a buffer
in a loop of "reset : add-text : shape" without needing to ever
modify the content type manually.</doc>
      <source-position filename="src/hb-buffer.h" line="298"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="898">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="content_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="899">The type of buffer contents to set</doc>
          <type name="buffer_content_type_t"
                c:type="hb_buffer_content_type_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_direction"
              c:identifier="hb_buffer_set_direction"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="999">Set the text flow direction of the buffer. No shaping can happen without
setting @buffer direction, and it controls the visual direction for the
output glyphs; for RTL direction the glyphs will be reversed. Many layout
features depend on the proper setting of the direction, for example,
reversing RTL text before shaping, then shaping with LTR direction is not
the same as keeping the text in logical order and shaping with RTL
direction.</doc>
      <source-position filename="src/hb-buffer.h" line="313"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1001">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1002">the #hb_direction_t of the @buffer</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_flags"
              c:identifier="hb_buffer_set_flags"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1167">Sets @buffer flags to @flags. See #hb_buffer_flags_t.</doc>
      <source-position filename="src/hb-buffer.h" line="411"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1169">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1170">The buffer flags to set</doc>
          <type name="buffer_flags_t" c:type="hb_buffer_flags_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_invisible_glyph"
              c:identifier="hb_buffer_set_invisible_glyph"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1284">Sets the #hb_codepoint_t that replaces invisible characters in
the shaping result.  If set to zero (default), the glyph for the
U+0020 SPACE character is used.  Otherwise, this value is used
verbatim.</doc>
      <source-position filename="src/hb-buffer.h" line="477"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1286">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="invisible" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1287">the invisible #hb_codepoint_t</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_language"
              c:identifier="hb_buffer_set_language"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1085">Sets the language of @buffer to @language.

Languages are crucial for selecting which OpenType feature to apply to the
buffer which can result in applying language-specific behaviour. Languages
are orthogonal to the scripts, and though they are related, they are
different concepts and should not be confused with each other.

Use hb_language_from_string() to convert from BCP 47 language tags to
#hb_language_t.</doc>
      <source-position filename="src/hb-buffer.h" line="327"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1087">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="language" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1088">An hb_language_t to set</doc>
          <type name="language_t" c:type="hb_language_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_length"
              c:identifier="hb_buffer_set_length"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1486">Similar to hb_buffer_pre_allocate(), but clears any new items added at the
end.</doc>
      <source-position filename="src/hb-buffer.h" line="572"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="1494">`true` if @buffer memory allocation succeeded, `false` otherwise.</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1488">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1489">The new length of @buffer</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_message_func"
              c:identifier="hb_buffer_set_message_func"
              version="1.1.3">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="2215">Sets the implementation function for #hb_buffer_message_func_t.</doc>
      <source-position filename="src/hb-buffer.h" line="798"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2217">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2218">Callback function</doc>
          <type name="buffer_message_func_t"
                c:type="hb_buffer_message_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2219">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="2220">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_not_found_glyph"
              c:identifier="hb_buffer_set_not_found_glyph"
              version="3.1.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1323">Sets the #hb_codepoint_t that replaces characters not found in
the font during shaping.

The not-found glyph defaults to zero, sometimes known as the
".notdef" glyph.  This API allows for differentiating the two.</doc>
      <source-position filename="src/hb-buffer.h" line="484"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1325">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="not_found" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1326">the not-found #hb_codepoint_t</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_random_state"
              c:identifier="hb_buffer_set_random_state"
              version="8.4.0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1363">Sets the random state of the buffer. The state changes
every time a glyph uses randomness (eg. the `rand`
OpenType feature). This function together with
hb_buffer_get_random_state() allow for transferring
the current random state to a subsequent buffer, to
get better randomness distribution.

Defaults to 1 and when buffer contents are cleared.
A value of 0 disables randomness during shaping.</doc>
      <source-position filename="src/hb-buffer.h" line="491"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1365">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1366">the new random state</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_replacement_codepoint"
              c:identifier="hb_buffer_set_replacement_codepoint"
              version="0.9.31">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1243">Sets the #hb_codepoint_t that replaces invalid entries for a given encoding
when adding text to @buffer.

Default is #HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT.</doc>
      <source-position filename="src/hb-buffer.h" line="470"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1245">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="replacement" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1246">the replacement #hb_codepoint_t</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_script"
              c:identifier="hb_buffer_set_script"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1041">Sets the script of @buffer to @script.

Script is crucial for choosing the proper shaping behaviour for scripts that
require it (e.g. Arabic) and the which OpenType features defined in the font
to be applied.

You can pass one of the predefined #hb_script_t values, or use
hb_script_from_string() or hb_script_from_iso15924_tag() to get the
corresponding script from an ISO 15924 script tag.</doc>
      <source-position filename="src/hb-buffer.h" line="320"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1043">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="script" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1044">An #hb_script_t to set.</doc>
          <type name="script_t" c:type="hb_script_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_segment_properties"
              c:identifier="hb_buffer_set_segment_properties"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="1129">Sets the segment properties of the buffer, a shortcut for calling
hb_buffer_set_direction(), hb_buffer_set_script() and
hb_buffer_set_language() individually.</doc>
      <source-position filename="src/hb-buffer.h" line="335"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1131">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="props" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="1132">An #hb_segment_properties_t to use</doc>
          <type name="segment_properties_t"
                c:type="const hb_segment_properties_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_unicode_funcs"
              c:identifier="hb_buffer_set_unicode_funcs"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="958">Sets the Unicode-functions structure of a buffer to
@unicode_funcs.</doc>
      <source-position filename="src/hb-buffer.h" line="306"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="960">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="unicode_funcs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="961">The Unicode-functions structure</doc>
          <type name="unicode_funcs_t" c:type="hb_unicode_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_set_user_data"
              c:identifier="hb_buffer_set_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-buffer.cc"
           line="852">Attaches a user-data key/data pair to the specified buffer.</doc>
      <source-position filename="src/hb-buffer.h" line="272"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-buffer.cc"
             line="862">`true` if success, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="854">An #hb_buffer_t</doc>
          <type name="buffer_t" c:type="hb_buffer_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="855">The user-data key</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="856">A pointer to the user data</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="857">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-buffer.cc"
               line="858">Whether to replace an existing data with the same key</doc>
          <type name="bool_t" c:type="hb_bool_t"/>
        </parameter>
      </parameters>
    </function>
    <record name="buffer_t"
            c:type="hb_buffer_t"
            opaque="1"
            glib:type-name="hb_buffer_t"
            glib:get-type="hb_gobject_buffer_get_type"
            c:symbol-prefix="gobject_buffer">
      <doc xml:space="preserve"
           filename="src/hb-buffer.h"
           line="243">The main structure holding the input text and its properties before shaping,
and output glyphs and their information after shaping.</doc>
      <source-position filename="src/hb-buffer.h" line="250"/>
    </record>
    <function name="color_get_alpha"
              c:identifier="hb_color_get_alpha"
              version="2.1.0">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="1148">Fetches the alpha channel of the given @color.</doc>
      <source-position filename="src/hb-common.h" line="892"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="1154">Alpha channel value</doc>
        <type name="guint8" c:type="uint8_t"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="1150">an #hb_color_t we are interested in its channels.</doc>
          <type name="color_t" c:type="hb_color_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_get_blue"
              c:identifier="hb_color_get_blue"
              version="2.1.0">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="1196">Fetches the blue channel of the given @color.</doc>
      <source-position filename="src/hb-common.h" line="904"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="1202">Blue channel value</doc>
        <type name="guint8" c:type="uint8_t"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="1198">an #hb_color_t we are interested in its channels.</doc>
          <type name="color_t" c:type="hb_color_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_get_green"
              c:identifier="hb_color_get_green"
              version="2.1.0">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="1180">Fetches the green channel of the given @color.</doc>
      <source-position filename="src/hb-common.h" line="900"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="1186">Green channel value</doc>
        <type name="guint8" c:type="uint8_t"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="1182">an #hb_color_t we are interested in its channels.</doc>
          <type name="color_t" c:type="hb_color_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_get_red"
              c:identifier="hb_color_get_red"
              version="2.1.0">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="1164">Fetches the red channel of the given @color.</doc>
      <source-position filename="src/hb-common.h" line="896"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="1170">Red channel value</doc>
        <type name="guint8" c:type="uint8_t"/>
      </return-value>
      <parameters>
        <parameter name="color" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="1166">an #hb_color_t we are interested in its channels.</doc>
          <type name="color_t" c:type="hb_color_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="color_line_get_color_stops"
              c:identifier="hb_color_line_get_color_stops"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-paint.cc"
           line="393">Fetches a list of color stops from the given color line object.

Note that due to variations being applied, the returned color stops
may be out of order. It is the callers responsibility to ensure that
color stops are sorted by their offset before they are used.</doc>
      <source-position filename="src/hb-paint.h" line="430"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-paint.cc"
             line="407">the total number of color stops in @color_line</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="color_line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.cc"
               line="395">a #hb_color_line_t object</doc>
          <type name="color_line_t" c:type="hb_color_line_t*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.cc"
               line="396">the index of the first color stop to return</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.cc"
               line="397">Input = the maximum number of feature tags to return;
    Output = the actual number of feature tags returned (may be zero)</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="color_stops"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.cc"
               line="399">Array of #hb_color_stop_t to populate</doc>
          <array length="2" zero-terminated="0" c:type="hb_color_stop_t*">
            <type name="color_stop_t" c:type="hb_color_stop_t"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <callback name="color_line_get_color_stops_func_t"
              c:type="hb_color_line_get_color_stops_func_t"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-paint.h"
           line="364">A virtual method for the #hb_color_line_t to fetch color stops.</doc>
      <source-position filename="src/hb-paint.h" line="380"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-paint.h"
             line="376">the total number of color stops in @color_line</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="color_line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="366">a #hb_color_line_t object</doc>
          <type name="color_line_t" c:type="hb_color_line_t*"/>
        </parameter>
        <parameter name="color_line_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="367">the data accompanying @color_line</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="368">the index of the first color stop to return</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="369">Input = the maximum number of feature tags to return;
    Output = the actual number of feature tags returned (may be zero)</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="color_stops"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="371">Array of #hb_color_stop_t to populate</doc>
          <array length="3" zero-terminated="0" c:type="hb_color_stop_t*">
            <type name="color_stop_t" c:type="hb_color_stop_t"/>
          </array>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="372">the data accompanying this method</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="color_line_get_extend"
              c:identifier="hb_color_line_get_extend"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-paint.cc"
           line="424">Fetches the extend mode of the color line object.</doc>
      <source-position filename="src/hb-paint.h" line="436"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-paint.cc"
             line="430">the extend mode of @color_line</doc>
        <type name="paint_extend_t" c:type="hb_paint_extend_t"/>
      </return-value>
      <parameters>
        <parameter name="color_line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.cc"
               line="426">a #hb_color_line_t object</doc>
          <type name="color_line_t" c:type="hb_color_line_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="color_line_get_extend_func_t"
              c:type="hb_color_line_get_extend_func_t"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-paint.h"
           line="387">A virtual method for the @hb_color_line_t to fetches the extend mode.</doc>
      <source-position filename="src/hb-paint.h" line="399"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-paint.h"
             line="395">the extend mode of @color_line</doc>
        <type name="paint_extend_t" c:type="hb_paint_extend_t"/>
      </return-value>
      <parameters>
        <parameter name="color_line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="389">a #hb_color_line_t object</doc>
          <type name="color_line_t" c:type="hb_color_line_t*"/>
        </parameter>
        <parameter name="color_line_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="390">the data accompanying @color_line</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/hb-paint.h"
               line="391">the data accompanying this method</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="color_line_t"
            c:type="hb_color_line_t"
            version="7.0.0"
            glib:type-name="hb_color_line_t"
            glib:get-type="hb_gobject_color_line_get_type"
            c:symbol-prefix="gobject_color_line">
      <doc xml:space="preserve"
           filename="src/hb-paint.h"
           line="403">A struct containing color information for a gradient.</doc>
      <source-position filename="src/hb-paint.h" line="427"/>
      <field name="data" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="get_color_stops" writable="1">
        <type name="color_line_get_color_stops_func_t"
              c:type="hb_color_line_get_color_stops_func_t"/>
      </field>
      <field name="get_color_stops_user_data" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="get_extend" writable="1">
        <type name="color_line_get_extend_func_t"
              c:type="hb_color_line_get_extend_func_t"/>
      </field>
      <field name="get_extend_user_data" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved0" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved1" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved2" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved3" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved5" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved6" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved7" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="reserved8" writable="1">
        <type name="gpointer" c:type="void*"/>
      </field>
    </record>
    <record name="color_stop_t"
            c:type="hb_color_stop_t"
            version="7.0.0"
            glib:type-name="hb_color_stop_t"
            glib:get-type="hb_gobject_color_stop_get_type"
            c:symbol-prefix="gobject_color_stop">
      <doc xml:space="preserve"
           filename="src/hb-paint.h"
           line="312">Information about a color stop on a color line.

Color lines typically have offsets ranging between 0 and 1,
but that is not required.

Note: despite @color being unpremultiplied here, interpolation in
gradients shall happen in premultiplied space. See the OpenType spec
[COLR](https://learn.microsoft.com/en-us/typography/opentype/spec/colr)
section for details.</doc>
      <source-position filename="src/hb-paint.h" line="334"/>
      <field name="offset" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-paint.h"
             line="314">the offset of the color stop</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="is_foreground" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-paint.h"
             line="315">whether the color is the foreground</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </field>
      <field name="color" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-paint.h"
             line="316">the color, unpremultiplied</doc>
        <type name="color_t" c:type="hb_color_t"/>
      </field>
    </record>
    <callback name="destroy_func_t" c:type="hb_destroy_func_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="782">A virtual method for destroy user-data callbacks.</doc>
      <source-position filename="src/hb-common.h" line="789"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="src/hb-common.h"
               line="784">the data to be destroyed</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="direction_from_string"
              c:identifier="hb_direction_from_string"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="144">Converts a string to an #hb_direction_t.

Matching is loose and applies only to the first letter. For
examples, "LTR" and "left-to-right" will both return #HB_DIRECTION_LTR.

Unmatched strings will return #HB_DIRECTION_INVALID.</doc>
      <source-position filename="src/hb-common.h" line="246"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="156">The #hb_direction_t matching @str</doc>
        <type name="direction_t" c:type="hb_direction_t"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="146">String to convert</doc>
          <array length="1" zero-terminated="0" c:type="const char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="147">Length of @str, or -1 if it is `NULL`-terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <enumeration name="direction_t"
                 glib:type-name="hb_direction_t"
                 glib:get-type="hb_gobject_direction_get_type"
                 c:type="hb_direction_t">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="221">The direction of a text segment or buffer.

A segment can also be tested for horizontal or vertical
orientation (irrespective of specific direction) with
HB_DIRECTION_IS_HORIZONTAL() or HB_DIRECTION_IS_VERTICAL().</doc>
      <member name="invalid"
              value="0"
              c:identifier="HB_DIRECTION_INVALID"
              glib:nick="invalid"
              glib:name="HB_DIRECTION_INVALID">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="223">Initial, unset direction.</doc>
      </member>
      <member name="ltr"
              value="4"
              c:identifier="HB_DIRECTION_LTR"
              glib:nick="ltr"
              glib:name="HB_DIRECTION_LTR">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="224">Text is set horizontally from left to right.</doc>
      </member>
      <member name="rtl"
              value="5"
              c:identifier="HB_DIRECTION_RTL"
              glib:nick="rtl"
              glib:name="HB_DIRECTION_RTL">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="225">Text is set horizontally from right to left.</doc>
      </member>
      <member name="ttb"
              value="6"
              c:identifier="HB_DIRECTION_TTB"
              glib:nick="ttb"
              glib:name="HB_DIRECTION_TTB">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="226">Text is set vertically from top to bottom.</doc>
      </member>
      <member name="btt"
              value="7"
              c:identifier="HB_DIRECTION_BTT"
              glib:nick="btt"
              glib:name="HB_DIRECTION_BTT">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="227">Text is set vertically from bottom to top.</doc>
      </member>
    </enumeration>
    <function name="direction_to_string"
              c:identifier="hb_direction_to_string"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="177">Converts an #hb_direction_t to a string.</doc>
      <source-position filename="src/hb-common.h" line="249"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="183">The string corresponding to @direction</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="179">The #hb_direction_t to convert</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_close_path"
              c:identifier="hb_draw_close_path"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="440">Perform a "close-path" draw operation.</doc>
      <source-position filename="src/hb-draw.h" line="334"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="442">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="443">associated draw data passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="444">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="draw_close_path_func_t"
              c:type="hb_draw_close_path_func_t"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="181">A virtual method for the #hb_draw_funcs_t to perform a "close-path" draw
operation.</doc>
      <source-position filename="src/hb-draw.h" line="194"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="183">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="184">The data accompanying the draw functions in hb_font_draw_glyph()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="185">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="186">User data pointer passed to hb_draw_funcs_set_close_path_func()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="draw_cubic_to"
              c:identifier="hb_draw_cubic_to"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="411">Perform a "cubic-to" draw operation.</doc>
      <source-position filename="src/hb-draw.h" line="327"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="413">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="414">associated draw data passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="415">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="control1_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="416">X component of first control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control1_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="417">Y component of first control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control2_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="418">X component of second control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control2_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="419">Y component of second control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="420">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="421">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <callback name="draw_cubic_to_func_t"
              c:type="hb_draw_cubic_to_func_t"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="155">A virtual method for the #hb_draw_funcs_t to perform a "cubic-to" draw
operation.</doc>
      <source-position filename="src/hb-draw.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="157">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="158">The data accompanying the draw functions in hb_font_draw_glyph()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="159">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="control1_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="160">X component of first control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control1_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="161">Y component of first control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control2_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="162">X component of second control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control2_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="163">Y component of second control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="164">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="165">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="9">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="166">User data pointer passed to hb_draw_funcs_set_cubic_to_func()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="draw_funcs_create"
              c:identifier="hb_draw_funcs_create"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="166">Creates a new draw callbacks object.</doc>
      <source-position filename="src/hb-draw.h" line="280"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="171">
A newly allocated #hb_draw_funcs_t with a reference count of 1. The initial
reference count should be released with hb_draw_funcs_destroy when you are
done using the #hb_draw_funcs_t. This function never returns `NULL`. If
memory cannot be allocated, a special singleton #hb_draw_funcs_t object will
be returned.</doc>
        <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
      </return-value>
    </function>
    <function name="draw_funcs_destroy"
              c:identifier="hb_draw_funcs_destroy"
              version="4.0.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="238">Deallocate the @dfuncs.
Decreases the reference count on @dfuncs by one. If the result is zero, then
@dfuncs and all associated resources are freed. See hb_draw_funcs_reference().</doc>
      <source-position filename="src/hb-draw.h" line="289"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="240">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_get_empty"
              c:identifier="hb_draw_funcs_get_empty"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="203">Fetches the singleton empty draw-functions structure.</doc>
      <source-position filename="src/hb-draw.h" line="283"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="208">The empty draw-functions structure</doc>
        <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
      </return-value>
    </function>
    <function name="draw_funcs_get_user_data"
              c:identifier="hb_draw_funcs_get_user_data"
              version="7.0.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="291">Fetches the user-data associated with the specified key,
attached to the specified draw-functions structure.</doc>
      <source-position filename="src/hb-draw.h" line="300"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="299">A pointer to the user data</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="293">The draw-functions structure</doc>
          <type name="draw_funcs_t" c:type="const hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="294">The user-data key to query</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_is_immutable"
              c:identifier="hb_draw_funcs_is_immutable"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="327">Checks whether @dfuncs is immutable.</doc>
      <source-position filename="src/hb-draw.h" line="307"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="333">`true` if @dfuncs is immutable, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="329">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_make_immutable"
              c:identifier="hb_draw_funcs_make_immutable"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="310">Makes @dfuncs object immutable.</doc>
      <source-position filename="src/hb-draw.h" line="304"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="312">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_reference"
              c:identifier="hb_draw_funcs_reference"
              version="4.0.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="218">Increases the reference count on @dfuncs by one.

This prevents @dfuncs from being destroyed until a matching
call to hb_draw_funcs_destroy() is made.</doc>
      <source-position filename="src/hb-draw.h" line="286"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="227">
The referenced #hb_draw_funcs_t.</doc>
        <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="220">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_close_path_func"
              c:identifier="hb_draw_funcs_set_close_path_func"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="262">Sets close-path callback to the draw functions object.</doc>
      <source-position filename="src/hb-draw.h" line="274"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="264">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="265">close-path callback</doc>
          <type name="draw_close_path_func_t"
                c:type="hb_draw_close_path_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="266">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="267">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_cubic_to_func"
              c:identifier="hb_draw_funcs_set_cubic_to_func"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="246">Sets cubic-to callback to the draw functions object.</doc>
      <source-position filename="src/hb-draw.h" line="258"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="248">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="249">cubic-to callback</doc>
          <type name="draw_cubic_to_func_t" c:type="hb_draw_cubic_to_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="250">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="251">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_line_to_func"
              c:identifier="hb_draw_funcs_set_line_to_func"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="214">Sets line-to callback to the draw functions object.</doc>
      <source-position filename="src/hb-draw.h" line="226"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="216">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="217">line-to callback</doc>
          <type name="draw_line_to_func_t" c:type="hb_draw_line_to_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="218">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="219">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_move_to_func"
              c:identifier="hb_draw_funcs_set_move_to_func"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="198">Sets move-to callback to the draw functions object.</doc>
      <source-position filename="src/hb-draw.h" line="210"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="200">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="201">move-to callback</doc>
          <type name="draw_move_to_func_t" c:type="hb_draw_move_to_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="202">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="203">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_quadratic_to_func"
              c:identifier="hb_draw_funcs_set_quadratic_to_func"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="230">Sets quadratic-to callback to the draw functions object.</doc>
      <source-position filename="src/hb-draw.h" line="242"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="232">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="233">quadratic-to callback</doc>
          <type name="draw_quadratic_to_func_t"
                c:type="hb_draw_quadratic_to_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="234">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="235">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="draw_funcs_set_user_data"
              c:identifier="hb_draw_funcs_set_user_data"
              version="7.0.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="267">Attaches a user-data key/data pair to the specified draw-functions structure.</doc>
      <source-position filename="src/hb-draw.h" line="292"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-draw.cc"
             line="277">`true` if success, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="269">The draw-functions structure</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="270">The user-data key</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="271">A pointer to the user data</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="272">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="273">Whether to replace an existing data with the same key</doc>
          <type name="bool_t" c:type="hb_bool_t"/>
        </parameter>
      </parameters>
    </function>
    <record name="draw_funcs_t"
            c:type="hb_draw_funcs_t"
            opaque="1"
            version="4.0.0"
            glib:type-name="hb_draw_funcs_t"
            glib:get-type="hb_gobject_draw_funcs_get_type"
            c:symbol-prefix="gobject_draw_funcs">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="76">Glyph draw callbacks.

#hb_draw_move_to_func_t, #hb_draw_line_to_func_t and
#hb_draw_cubic_to_func_t calls are necessary to be defined but we translate
#hb_draw_quadratic_to_func_t calls to #hb_draw_cubic_to_func_t if the
callback isn't defined.</doc>
      <source-position filename="src/hb-draw.h" line="89"/>
    </record>
    <function name="draw_line_to"
              c:identifier="hb_draw_line_to"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="365">Perform a "line-to" draw operation.</doc>
      <source-position filename="src/hb-draw.h" line="316"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="367">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="368">associated draw data passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="369">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="370">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="371">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <callback name="draw_line_to_func_t"
              c:type="hb_draw_line_to_func_t"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="112">A virtual method for the #hb_draw_funcs_t to perform a "line-to" draw
operation.</doc>
      <source-position filename="src/hb-draw.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="114">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="115">The data accompanying the draw functions in hb_font_draw_glyph()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="116">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="117">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="118">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="119">User data pointer passed to hb_draw_funcs_set_line_to_func()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="draw_move_to"
              c:identifier="hb_draw_move_to"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="344">Perform a "move-to" draw operation.</doc>
      <source-position filename="src/hb-draw.h" line="311"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="346">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="347">associated draw data passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="348">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="349">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="350">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <callback name="draw_move_to_func_t"
              c:type="hb_draw_move_to_func_t"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="92">A virtual method for the #hb_draw_funcs_t to perform a "move-to" draw
operation.</doc>
      <source-position filename="src/hb-draw.h" line="107"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="94">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="95">The data accompanying the draw functions in hb_font_draw_glyph()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="96">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="97">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="98">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="99">User data pointer passed to hb_draw_funcs_set_move_to_func()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="draw_quadratic_to"
              c:identifier="hb_draw_quadratic_to"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.cc"
           line="386">Perform a "quadratic-to" draw operation.</doc>
      <source-position filename="src/hb-draw.h" line="321"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="388">draw functions</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="389">associated draw data passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="390">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="control_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="391">X component of control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="392">Y component of control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="393">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.cc"
               line="394">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <callback name="draw_quadratic_to_func_t"
              c:type="hb_draw_quadratic_to_func_t"
              version="4.0.0">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="132">A virtual method for the #hb_draw_funcs_t to perform a "quadratic-to" draw
operation.</doc>
      <source-position filename="src/hb-draw.h" line="149"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="134">draw functions object</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="135">The data accompanying the draw functions in hb_font_draw_glyph()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="st" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="136">current draw state</doc>
          <type name="draw_state_t" c:type="hb_draw_state_t*"/>
        </parameter>
        <parameter name="control_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="137">X component of control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="control_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="138">Y component of control point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="139">X component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="to_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="140">Y component of target point</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="7">
          <doc xml:space="preserve"
               filename="src/hb-draw.h"
               line="141">User data pointer passed to hb_draw_funcs_set_quadratic_to_func()</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="draw_state_t"
            c:type="hb_draw_state_t"
            version="4.0.0"
            glib:type-name="hb_draw_state_t"
            glib:get-type="hb_gobject_draw_state_get_type"
            c:symbol-prefix="gobject_draw_state">
      <doc xml:space="preserve"
           filename="src/hb-draw.h"
           line="37">Current drawing state.</doc>
      <source-position filename="src/hb-draw.h" line="66"/>
      <field name="path_open" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.h"
             line="39">Whether there is an open path</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </field>
      <field name="path_start_x" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.h"
             line="40">X component of the start of current path</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="path_start_y" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.h"
             line="41">Y component of the start of current path</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="current_x" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.h"
             line="42">X component of current point</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="current_y" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-draw.h"
             line="43">Y component of current point</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="reserved1" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved2" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved3" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved4" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved5" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved6" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
      <field name="reserved7" readable="0" private="1">
        <type name="var_num_t" c:type="hb_var_num_t"/>
      </field>
    </record>
    <function name="face_builder_add_table"
              c:identifier="hb_face_builder_add_table"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-face-builder.cc"
           line="179">Add table for @tag with data provided by @blob to the face.  @face must
be created using hb_face_builder_create().</doc>
      <source-position filename="src/hb-face.h" line="176"/>
      <return-value transfer-ownership="none">
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face-builder.cc"
               line="181">A face object created with hb_face_builder_create()</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face-builder.cc"
               line="182">The #hb_tag_t of the table to add</doc>
          <type name="tag_t" c:type="hb_tag_t"/>
        </parameter>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face-builder.cc"
               line="183">The blob containing the table data to add</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_builder_create"
              c:identifier="hb_face_builder_create"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-face-builder.cc"
           line="157">Creates a #hb_face_t that can be used with hb_face_builder_add_table().
After tables are added to the face, it can be compiled to a binary
font file by calling hb_face_reference_blob().</doc>
      <source-position filename="src/hb-face.h" line="173"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face-builder.cc"
             line="164">New face.</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
    </function>
    <function name="face_builder_sort_tables"
              c:identifier="hb_face_builder_sort_tables"
              version="5.3.0">
      <doc xml:space="preserve"
           filename="src/hb-face-builder.cc"
           line="212">Set the ordering of tables for serialization. Any tables not
specified in the tags list will be ordered after the tables in
tags, ordered by the default sort ordering.</doc>
      <source-position filename="src/hb-face.h" line="181"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face-builder.cc"
               line="214">A face object created with hb_face_builder_create()</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="tags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face-builder.cc"
               line="215">ordered list of table tags terminated by
  %HB_TAG_NONE</doc>
          <array c:type="const hb_tag_t*">
            <type name="tag_t" c:type="hb_tag_t"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="face_collect_nominal_glyph_mapping"
              c:identifier="hb_face_collect_nominal_glyph_mapping"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="609">Collects the mapping from Unicode characters to nominal glyphs of the @face,
and optionally all of the Unicode characters covered by @face.</doc>
      <source-position filename="src/hb-face.h" line="154"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="611">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="mapping"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="612">The map to add Unicode-to-glyph mapping to</doc>
          <type name="map_t" c:type="hb_map_t*"/>
        </parameter>
        <parameter name="unicodes"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="613">The set to add Unicode characters to, or `NULL`</doc>
          <type name="set_t" c:type="hb_set_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_collect_unicodes"
              c:identifier="hb_face_collect_unicodes"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="593">Collects all of the Unicode characters covered by @face and adds
them to the #hb_set_t set @out.</doc>
      <source-position filename="src/hb-face.h" line="150"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="595">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="596">The set to add Unicode characters to</doc>
          <type name="set_t" c:type="hb_set_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_collect_variation_selectors"
              c:identifier="hb_face_collect_variation_selectors"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="630">Collects all Unicode "Variation Selector" characters covered by @face and adds
them to the #hb_set_t set @out.</doc>
      <source-position filename="src/hb-face.h" line="159"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="632">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="633">The set to add Variation Selector characters to</doc>
          <type name="set_t" c:type="hb_set_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_collect_variation_unicodes"
              c:identifier="hb_face_collect_variation_unicodes"
              version="1.9.0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="646">Collects all Unicode characters for @variation_selector covered by @face and adds
them to the #hb_set_t set @out.</doc>
      <source-position filename="src/hb-face.h" line="163"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="648">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="variation_selector" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="649">The Variation Selector to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="out"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="650">The set to add Unicode characters to</doc>
          <type name="set_t" c:type="hb_set_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_count" c:identifier="hb_face_count" version="1.7.7">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="59">Fetches the number of faces in a blob.</doc>
      <source-position filename="src/hb-face.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="65">Number of faces in @blob</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="61">a blob.</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_create" c:identifier="hb_face_create" version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="197">Constructs a new face object from the specified blob and
a face index into that blob.

The face index is used for blobs of file formats such as TTC and
DFont that can contain more than one face.  Face indices within
such collections are zero-based.

&lt;note&gt;Note: If the blob font format is not a collection, @index
is ignored.  Otherwise, only the lower 16-bits of @index are used.
The unmodified @index can be accessed via hb_face_get_index().&lt;/note&gt;

&lt;note&gt;Note: The high 16-bits of @index, if non-zero, are used by
hb_font_create() to load named-instances in variable fonts.  See
hb_font_create() for details.&lt;/note&gt;</doc>
      <source-position filename="src/hb-face.h" line="59"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="217">The new face object</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
      <parameters>
        <parameter name="blob" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="199">#hb_blob_t to work upon</doc>
          <type name="blob_t" c:type="hb_blob_t*"/>
        </parameter>
        <parameter name="index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="200">The index of the face within @blob</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_create_for_tables"
              c:identifier="hb_face_create_for_tables"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="105">Variant of hb_face_create(), built for those cases where it is more
convenient to provide data for individual tables instead of the whole font
data. With the caveat that hb_face_get_table_tags() does not currently work
with faces created this way.

Creates a new face object from the specified @user_data and @reference_table_func,
with the @destroy callback.</doc>
      <source-position filename="src/hb-face.h" line="79"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="119">The new face object</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
      <parameters>
        <parameter name="reference_table_func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="1"
                   destroy="2">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="107">Table-referencing function</doc>
          <type name="reference_table_func_t"
                c:type="hb_reference_table_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="108">A pointer to the user data</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="109">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_destroy"
              c:identifier="hb_face_destroy"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="281">Decreases the reference count on a face object. When the
reference count reaches zero, the face is destroyed,
freeing all memory.</doc>
      <source-position filename="src/hb-face.h" line="90"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="283">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_get_empty"
              c:identifier="hb_face_get_empty"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="249">Fetches the singleton empty face object.</doc>
      <source-position filename="src/hb-face.h" line="84"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="254">The empty face object</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
    </function>
    <function name="face_get_glyph_count"
              c:identifier="hb_face_get_glyph_count"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="534">Fetches the glyph-count value of the specified face object.</doc>
      <source-position filename="src/hb-face.h" line="136"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="540">The glyph-count value of @face</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="536">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_get_index"
              c:identifier="hb_face_get_index"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="455">Fetches the face-index corresponding to the given face.

&lt;note&gt;Note: face indices within a collection are zero-based.&lt;/note&gt;</doc>
      <source-position filename="src/hb-face.h" line="122"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="463">The index of @face.</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="457">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_get_table_tags"
              c:identifier="hb_face_get_table_tags"
              version="1.6.0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="550">Fetches a list of all table tags for a face, if possible. The list returned will
begin at the offset provided</doc>
      <source-position filename="src/hb-face.h" line="139"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="561">Total number of tables, or zero if it is not possible to list</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="552">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
        <parameter name="start_offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="553">The index of first table tag to retrieve</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="table_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="554">Input = the maximum number of table tags to return;
               Output = the actual number of table tags returned (may be zero)</doc>
          <type name="guint" c:type="unsigned int*"/>
        </parameter>
        <parameter name="table_tags"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="556">The array of table tags found</doc>
          <array length="2" zero-terminated="0" c:type="hb_tag_t*">
            <type name="tag_t" c:type="hb_tag_t"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="face_get_upem"
              c:identifier="hb_face_get_upem"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="494">Fetches the units-per-em (UPEM) value of the specified face object.

Typical UPEM values for fonts are 1000, or 2048, but any value
in between 16 and 16,384 is allowed for OpenType fonts.</doc>
      <source-position filename="src/hb-face.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="503">The upem value of @face</doc>
        <type name="guint" c:type="unsigned int"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="496">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_get_user_data"
              c:identifier="hb_face_get_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="339">Fetches the user data associated with the specified key,
attached to the specified face object.</doc>
      <source-position filename="src/hb-face.h" line="100"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="347">A pointer to the user data</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="341">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="342">The user-data key to query</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_is_immutable"
              c:identifier="hb_face_is_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="375">Tests whether the given face object is immutable.</doc>
      <source-position filename="src/hb-face.h" line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="381">`true` is @face is immutable, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="377">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_make_immutable"
              c:identifier="hb_face_make_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="358">Makes the given face object immutable.</doc>
      <source-position filename="src/hb-face.h" line="104"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="360">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_reference"
              c:identifier="hb_face_reference"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="265">Increases the reference count on a face object.</doc>
      <source-position filename="src/hb-face.h" line="87"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="271">The @face object</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="267">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_reference_blob"
              c:identifier="hb_face_reference_blob"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="414">Fetches a pointer to the binary blob that contains the
specified face. Returns an empty blob if referencing face data is not
possible.</doc>
      <source-position filename="src/hb-face.h" line="115"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="422">A pointer to the blob for @face</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="416">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_reference_table"
              c:identifier="hb_face_reference_table"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="392">Fetches a reference to the specified table within
the specified face.</doc>
      <source-position filename="src/hb-face.h" line="111"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="400">A pointer to the @tag table within @face</doc>
        <type name="blob_t" c:type="hb_blob_t*"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="394">A face object</doc>
          <type name="face_t" c:type="const hb_face_t*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="395">The #hb_tag_t of the table to query</doc>
          <type name="tag_t" c:type="hb_tag_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_set_glyph_count"
              c:identifier="hb_face_set_glyph_count"
              version="0.9.7">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="513">Sets the glyph count for a face object to the specified value.

This API is used in rare circumstances.</doc>
      <source-position filename="src/hb-face.h" line="132"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="515">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="glyph_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="516">The glyph-count value to assign</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_set_index"
              c:identifier="hb_face_set_index"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="432">Assigns the specified face-index to @face. Fails if the
face is immutable.

&lt;note&gt;Note: changing the index has no effect on the face itself
This only changes the value returned by hb_face_get_index().&lt;/note&gt;</doc>
      <source-position filename="src/hb-face.h" line="118"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="434">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="435">The index to assign</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_set_upem"
              c:identifier="hb_face_set_upem"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="473">Sets the units-per-em (upem) for a face object to the specified value.

This API is used in rare circumstances.</doc>
      <source-position filename="src/hb-face.h" line="125"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="475">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="upem" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="476">The units-per-em value to assign</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="face_set_user_data"
              c:identifier="hb_face_set_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-face.cc"
           line="315">Attaches a user-data key/data pair to the given face object.</doc>
      <source-position filename="src/hb-face.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-face.cc"
             line="325">`true` if success, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="317">A face object</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="318">The user-data key to set</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="319">A pointer to the user data</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="320">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-face.cc"
               line="321">Whether to replace an existing data with the same key</doc>
          <type name="bool_t" c:type="hb_bool_t"/>
        </parameter>
      </parameters>
    </function>
    <record name="face_t"
            c:type="hb_face_t"
            opaque="1"
            glib:type-name="hb_face_t"
            glib:get-type="hb_gobject_face_get_type"
            c:symbol-prefix="gobject_face">
      <doc xml:space="preserve"
           filename="src/hb-face.h"
           line="50">Data type for holding font faces.</doc>
      <source-position filename="src/hb-face.h" line="56"/>
    </record>
    <function name="feature_from_string"
              c:identifier="hb_feature_from_string"
              version="0.9.5">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="888">Parses a string into a #hb_feature_t.

The format for specifying feature strings follows. All valid CSS
font-feature-settings values other than 'normal' and the global values are
also accepted, though not documented below. CSS string escapes are not
supported.

The range indices refer to the positions between Unicode characters. The
position before the first character is always 0.

The format is Python-esque.  Here is how it all works:

&lt;informaltable pgwide='1' align='left' frame='none'&gt;
&lt;tgroup cols='5'&gt;
&lt;thead&gt;
&lt;row&gt;&lt;entry&gt;Syntax&lt;/entry&gt;    &lt;entry&gt;Value&lt;/entry&gt; &lt;entry&gt;Start&lt;/entry&gt; &lt;entry&gt;End&lt;/entry&gt;&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;&lt;entry&gt;Setting value:&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern&lt;/entry&gt;      &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;+kern&lt;/entry&gt;     &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;-kern&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature off&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern=0&lt;/entry&gt;    &lt;entry&gt;0&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature off&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern=1&lt;/entry&gt;    &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;aalt=2&lt;/entry&gt;    &lt;entry&gt;2&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Choose 2nd alternate&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;Setting index:&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[]&lt;/entry&gt;    &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[:]&lt;/entry&gt;   &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[5:]&lt;/entry&gt;  &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;5&lt;/entry&gt;      &lt;entry&gt;∞&lt;/entry&gt;   &lt;entry&gt;Turn feature on, partial&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[:5]&lt;/entry&gt;  &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;0&lt;/entry&gt;      &lt;entry&gt;5&lt;/entry&gt;   &lt;entry&gt;Turn feature on, partial&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[3:5]&lt;/entry&gt; &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;3&lt;/entry&gt;      &lt;entry&gt;5&lt;/entry&gt;   &lt;entry&gt;Turn feature on, range&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;kern[3]&lt;/entry&gt;   &lt;entry&gt;1&lt;/entry&gt;     &lt;entry&gt;3&lt;/entry&gt;      &lt;entry&gt;3+1&lt;/entry&gt; &lt;entry&gt;Turn feature on, single char&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;Mixing it all:&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;aalt[3:5]=2&lt;/entry&gt; &lt;entry&gt;2&lt;/entry&gt;   &lt;entry&gt;3&lt;/entry&gt;      &lt;entry&gt;5&lt;/entry&gt;   &lt;entry&gt;Turn 2nd alternate on for range&lt;/entry&gt;&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;</doc>
      <source-position filename="src/hb-common.h" line="837"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="932">`true` if @str is successfully parsed, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="890">a string to parse</doc>
          <array length="1" zero-terminated="0" c:type="const char*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="891">length of @str, or -1 if string is `NULL` terminated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="feature"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="892">the #hb_feature_t to initialize with the parsed values</doc>
          <type name="feature_t" c:type="hb_feature_t*"/>
        </parameter>
      </parameters>
    </function>
    <record name="feature_t"
            c:type="hb_feature_t"
            glib:type-name="hb_feature_t"
            glib:get-type="hb_gobject_feature_get_type"
            c:symbol-prefix="gobject_feature">
      <doc xml:space="preserve"
           filename="src/hb-common.h"
           line="814">The #hb_feature_t is the structure that holds information about requested
feature application. The feature will be applied with the given value to all
glyphs which are in clusters between @start (inclusive) and @end (exclusive).
Setting start to #HB_FEATURE_GLOBAL_START and end to #HB_FEATURE_GLOBAL_END
specifies that the feature always applies to the entire buffer.</doc>
      <source-position filename="src/hb-common.h" line="834"/>
      <field name="tag" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="816">The #hb_tag_t tag of the feature</doc>
        <type name="tag_t" c:type="hb_tag_t"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="817">The value of the feature. 0 disables the feature, non-zero (usually
1) enables the feature.  For features implemented as lookup type 3 (like
'salt') the @value is a one based index into the alternates.</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="start" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="820">the cluster to start applying this feature setting (inclusive).</doc>
        <type name="guint" c:type="unsigned int"/>
      </field>
      <field name="end" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-common.h"
             line="821">the cluster to end applying this feature setting (exclusive).</doc>
        <type name="guint" c:type="unsigned int"/>
      </field>
      <method name="_string"
              c:identifier="hb_feature_to_string"
              moved-to="feature_to_string"
              version="0.9.5">
        <doc xml:space="preserve"
             filename="src/hb-common.cc"
             line="958">Converts a #hb_feature_t into a `NULL`-terminated string in the format
understood by hb_feature_from_string(). The client in responsible for
allocating big enough size for @buf, 128 bytes is more than enough.</doc>
        <source-position filename="src/hb-common.h" line="841"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hb-common.cc"
                 line="960">an #hb_feature_t to convert</doc>
            <type name="feature_t" c:type="hb_feature_t*"/>
          </instance-parameter>
          <parameter name="buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/hb-common.cc"
                 line="961">output string</doc>
            <array length="1" zero-terminated="0" c:type="char*">
              <type name="utf8" c:type="char"/>
            </array>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/hb-common.cc"
                 line="962">the allocated size of @buf</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function name="feature_to_string"
              c:identifier="hb_feature_to_string"
              version="0.9.5">
      <doc xml:space="preserve"
           filename="src/hb-common.cc"
           line="958">Converts a #hb_feature_t into a `NULL`-terminated string in the format
understood by hb_feature_from_string(). The client in responsible for
allocating big enough size for @buf, 128 bytes is more than enough.</doc>
      <source-position filename="src/hb-common.h" line="841"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="feature" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="960">an #hb_feature_t to convert</doc>
          <type name="feature_t" c:type="hb_feature_t*"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="961">output string</doc>
          <array length="2" zero-terminated="0" c:type="char*">
            <type name="utf8" c:type="char"/>
          </array>
        </parameter>
        <parameter name="size"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-common.cc"
               line="962">the allocated size of @buf</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_add_glyph_origin_for_direction"
              c:identifier="hb_font_add_glyph_origin_for_direction"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1573">Adds the origin coordinates to an (X,Y) point coordinate, in
the specified glyph ID in the specified font.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="943"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1575">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1576">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1577">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="x"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1578">Input = The original X coordinate
    Output = The X coordinate plus the X-coordinate of the origin</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="y"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1580">Input = The original Y coordinate
    Output = The Y coordinate plus the Y-coordinate of the origin</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_changed"
              c:identifier="hb_font_changed"
              version="4.4.0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="2104">Notifies the @font that underlying font data has changed.
This has the effect of increasing the serial as returned
by hb_font_get_serial(), which invalidates internal caches.</doc>
      <source-position filename="src/hb-font.h" line="1026"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="2106">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_create" c:identifier="hb_font_create" version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1835">Constructs a new font object from the specified face.

&lt;note&gt;Note: If @face's index value (as passed to hb_face_create()
has non-zero top 16-bits, those bits minus one are passed to
hb_font_set_var_named_instance(), effectively loading a named-instance
of a variable font, instead of the default-instance.  This allows
specifying which named-instance to load by default when creating the
face.&lt;/note&gt;</doc>
      <source-position filename="src/hb-font.h" line="990"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1848">The new font object</doc>
        <type name="font_t" c:type="hb_font_t*"/>
      </return-value>
      <parameters>
        <parameter name="face" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1837">a face.</doc>
          <type name="face_t" c:type="hb_face_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_create_sub_font"
              c:identifier="hb_font_create_sub_font"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1886">Constructs a sub-font font object from the specified @parent font,
replicating the parent's properties.</doc>
      <source-position filename="src/hb-font.h" line="993"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1893">The new sub-font font object</doc>
        <type name="font_t" c:type="hb_font_t*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1888">The parent font object</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_destroy"
              c:identifier="hb_font_destroy"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1974">Decreases the reference count on the given font object. When the
reference count reaches zero, the font is destroyed,
freeing all memory.</doc>
      <source-position filename="src/hb-font.h" line="1002"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1976">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_draw_glyph"
              c:identifier="hb_font_draw_glyph"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1416">Draws the outline that corresponds to a glyph in the specified @font.

The outline is returned by way of calls to the callbacks of the @dfuncs
objects, with @draw_data passed to them.</doc>
      <source-position filename="src/hb-font.h" line="900"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1418">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1419">The glyph ID</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="dfuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1420">#hb_draw_funcs_t to draw to</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1421">User data to pass to draw callbacks</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_draw_glyph_func_t"
              c:type="hb_font_draw_glyph_func_t"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="488">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.</doc>
      <source-position filename="src/hb-font.h" line="502"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="490">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="491">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="492">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="draw_funcs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="493">The draw functions to send the shape data to</doc>
          <type name="draw_funcs_t" c:type="hb_draw_funcs_t*"/>
        </parameter>
        <parameter name="draw_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="494">The data accompanying the draw functions</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="495">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="font_extents_t" c:type="hb_font_extents_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="94">Font-wide extent values, measured in font units.

Note that typically @ascender is positive and @descender
negative, in coordinate systems that grow up.</doc>
      <source-position filename="src/hb-font.h" line="119"/>
      <field name="ascender" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="96">The height of typographic ascenders.</doc>
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="descender" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="97">The depth of typographic descenders.</doc>
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="line_gap" writable="1">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="98">The suggested line-spacing gap.</doc>
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved9" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved8" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved7" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved6" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved5" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved4" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved3" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved2" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
      <field name="reserved1" readable="0" private="1">
        <type name="position_t" c:type="hb_position_t"/>
      </field>
    </record>
    <function name="font_funcs_create"
              c:identifier="hb_font_funcs_create"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="712">Creates a new #hb_font_funcs_t structure of font functions.</doc>
      <source-position filename="src/hb-font.h" line="61"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="717">The font-functions structure</doc>
        <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
      </return-value>
    </function>
    <function name="font_funcs_destroy"
              c:identifier="hb_font_funcs_destroy"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="765">Decreases the reference count on a font-functions structure. When
the reference count reaches zero, the font-functions structure is
destroyed, freeing all memory.</doc>
      <source-position filename="src/hb-font.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="767">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_get_empty"
              c:identifier="hb_font_funcs_get_empty"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="734">Fetches an empty font-functions structure.</doc>
      <source-position filename="src/hb-font.h" line="64"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="739">The font-functions structure</doc>
        <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
      </return-value>
    </function>
    <function name="font_funcs_get_user_data"
              c:identifier="hb_font_funcs_get_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="818">Fetches the user data associated with the specified key,
attached to the specified font-functions structure.</doc>
      <source-position filename="src/hb-font.h" line="81"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="826">A pointer to the user data</doc>
        <type name="gpointer" c:type="void*"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="820">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="const hb_font_funcs_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="821">The user-data key to query</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_is_immutable"
              c:identifier="hb_font_funcs_is_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="855">Tests whether a font-functions structure is immutable.</doc>
      <source-position filename="src/hb-font.h" line="89"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="861">`true` if @ffuncs is immutable, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="857">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_make_immutable"
              c:identifier="hb_font_funcs_make_immutable"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="838">Makes a font-functions structure immutable.</doc>
      <source-position filename="src/hb-font.h" line="86"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="840">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_reference"
              c:identifier="hb_font_funcs_reference"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="749">Increases the reference count on a font-functions structure.</doc>
      <source-position filename="src/hb-font.h" line="67"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="755">The font-functions structure</doc>
        <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="751">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_draw_glyph_func"
              c:identifier="hb_font_funcs_set_draw_glyph_func"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="787">Sets the implementation function for #hb_font_draw_glyph_func_t.</doc>
      <source-position filename="src/hb-font.h" line="799"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="789">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="790">The callback function to assign</doc>
          <type name="font_draw_glyph_func_t"
                c:type="hb_font_draw_glyph_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="791">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="792">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_font_h_extents_func"
              c:identifier="hb_font_funcs_set_font_h_extents_func"
              version="1.1.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="531">Sets the implementation function for #hb_font_get_font_h_extents_func_t.</doc>
      <source-position filename="src/hb-font.h" line="543"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="533">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="534">The callback function to assign</doc>
          <type name="font_get_font_h_extents_func_t"
                c:type="hb_font_get_font_h_extents_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="535">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="536">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_font_v_extents_func"
              c:identifier="hb_font_funcs_set_font_v_extents_func"
              version="1.1.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="547">Sets the implementation function for #hb_font_get_font_v_extents_func_t.</doc>
      <source-position filename="src/hb-font.h" line="559"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="549">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="550">The callback function to assign</doc>
          <type name="font_get_font_v_extents_func_t"
                c:type="hb_font_get_font_v_extents_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="551">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="552">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_contour_point_func"
              c:identifier="hb_font_funcs_set_glyph_contour_point_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="739">Sets the implementation function for #hb_font_get_glyph_contour_point_func_t.</doc>
      <source-position filename="src/hb-font.h" line="751"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="741">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="742">The callback function to assign</doc>
          <type name="font_get_glyph_contour_point_func_t"
                c:type="hb_font_get_glyph_contour_point_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="743">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="744">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_extents_func"
              c:identifier="hb_font_funcs_set_glyph_extents_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="723">Sets the implementation function for #hb_font_get_glyph_extents_func_t.</doc>
      <source-position filename="src/hb-font.h" line="735"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="725">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="726">The callback function to assign</doc>
          <type name="font_get_glyph_extents_func_t"
                c:type="hb_font_get_glyph_extents_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="727">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="728">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_from_name_func"
              c:identifier="hb_font_funcs_set_glyph_from_name_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="771">Sets the implementation function for #hb_font_get_glyph_from_name_func_t.</doc>
      <source-position filename="src/hb-font.h" line="783"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="773">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="774">The callback function to assign</doc>
          <type name="font_get_glyph_from_name_func_t"
                c:type="hb_font_get_glyph_from_name_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="775">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="776">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_func"
              c:identifier="hb_font_funcs_set_glyph_func"
              version="0.9.2"
              deprecated="1"
              deprecated-version="1.2.3">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="3008">Deprecated.  Use hb_font_funcs_set_nominal_glyph_func() and
hb_font_funcs_set_variation_glyph_func() instead.</doc>
      <source-position filename="src/hb-deprecated.h" line="107"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="3010">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="3011">callback function</doc>
          <type name="font_get_glyph_func_t"
                c:type="hb_font_get_glyph_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="3012">data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="3013">function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_h_advance_func"
              c:identifier="hb_font_funcs_set_glyph_h_advance_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="611">Sets the implementation function for #hb_font_get_glyph_h_advance_func_t.</doc>
      <source-position filename="src/hb-font.h" line="623"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="613">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="614">The callback function to assign</doc>
          <type name="font_get_glyph_h_advance_func_t"
                c:type="hb_font_get_glyph_h_advance_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="615">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="616">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_h_advances_func"
              c:identifier="hb_font_funcs_set_glyph_h_advances_func"
              version="1.8.6">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="643">Sets the implementation function for #hb_font_get_glyph_h_advances_func_t.</doc>
      <source-position filename="src/hb-font.h" line="655"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="645">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="646">The callback function to assign</doc>
          <type name="font_get_glyph_h_advances_func_t"
                c:type="hb_font_get_glyph_h_advances_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="647">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="648">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_h_kerning_func"
              c:identifier="hb_font_funcs_set_glyph_h_kerning_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="707">Sets the implementation function for #hb_font_get_glyph_h_kerning_func_t.</doc>
      <source-position filename="src/hb-font.h" line="719"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="709">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="710">The callback function to assign</doc>
          <type name="font_get_glyph_h_kerning_func_t"
                c:type="hb_font_get_glyph_h_kerning_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="711">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="712">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_h_origin_func"
              c:identifier="hb_font_funcs_set_glyph_h_origin_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="675">Sets the implementation function for #hb_font_get_glyph_h_origin_func_t.</doc>
      <source-position filename="src/hb-font.h" line="687"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="677">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="678">The callback function to assign</doc>
          <type name="font_get_glyph_h_origin_func_t"
                c:type="hb_font_get_glyph_h_origin_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="679">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="680">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_name_func"
              c:identifier="hb_font_funcs_set_glyph_name_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="755">Sets the implementation function for #hb_font_get_glyph_name_func_t.</doc>
      <source-position filename="src/hb-font.h" line="767"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="757">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="758">The callback function to assign</doc>
          <type name="font_get_glyph_name_func_t"
                c:type="hb_font_get_glyph_name_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="759">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="760">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_shape_func"
              c:identifier="hb_font_funcs_set_glyph_shape_func"
              version="4.0.0"
              deprecated="1"
              deprecated-version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="278">Sets the implementation function for #hb_font_get_glyph_shape_func_t,
which is the same as #hb_font_draw_glyph_func_t.</doc>
      <doc-deprecated xml:space="preserve">Use hb_font_funcs_set_draw_glyph_func() instead</doc-deprecated>
      <source-position filename="src/hb-deprecated.h" line="293"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="280">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="281">The callback function to assign</doc>
          <type name="font_get_glyph_shape_func_t"
                c:type="hb_font_get_glyph_shape_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="282">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="283">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_v_advance_func"
              c:identifier="hb_font_funcs_set_glyph_v_advance_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="627">Sets the implementation function for #hb_font_get_glyph_v_advance_func_t.</doc>
      <source-position filename="src/hb-font.h" line="639"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="629">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="630">The callback function to assign</doc>
          <type name="font_get_glyph_v_advance_func_t"
                c:type="hb_font_get_glyph_v_advance_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="631">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="632">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_v_advances_func"
              c:identifier="hb_font_funcs_set_glyph_v_advances_func"
              version="1.8.6">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="659">Sets the implementation function for #hb_font_get_glyph_v_advances_func_t.</doc>
      <source-position filename="src/hb-font.h" line="671"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="661">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="662">The callback function to assign</doc>
          <type name="font_get_glyph_v_advances_func_t"
                c:type="hb_font_get_glyph_v_advances_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="663">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="664">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_v_kerning_func"
              c:identifier="hb_font_funcs_set_glyph_v_kerning_func"
              version="0.9.2"
              deprecated="1"
              deprecated-version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="237">Sets the implementation function for #hb_font_get_glyph_v_kerning_func_t.</doc>
      <source-position filename="src/hb-deprecated.h" line="250"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="239">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="240">The callback function to assign</doc>
          <type name="font_get_glyph_v_kerning_func_t"
                c:type="hb_font_get_glyph_v_kerning_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="241">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="242">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_glyph_v_origin_func"
              c:identifier="hb_font_funcs_set_glyph_v_origin_func"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="691">Sets the implementation function for #hb_font_get_glyph_v_origin_func_t.</doc>
      <source-position filename="src/hb-font.h" line="703"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="693">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="694">The callback function to assign</doc>
          <type name="font_get_glyph_v_origin_func_t"
                c:type="hb_font_get_glyph_v_origin_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="695">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="696">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_nominal_glyph_func"
              c:identifier="hb_font_funcs_set_nominal_glyph_func"
              version="1.2.3">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="563">Sets the implementation function for #hb_font_get_nominal_glyph_func_t.</doc>
      <source-position filename="src/hb-font.h" line="575"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="565">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="566">The callback function to assign</doc>
          <type name="font_get_nominal_glyph_func_t"
                c:type="hb_font_get_nominal_glyph_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="567">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="568">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_nominal_glyphs_func"
              c:identifier="hb_font_funcs_set_nominal_glyphs_func"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="579">Sets the implementation function for #hb_font_get_nominal_glyphs_func_t.</doc>
      <source-position filename="src/hb-font.h" line="591"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="581">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="582">The callback function to assign</doc>
          <type name="font_get_nominal_glyphs_func_t"
                c:type="hb_font_get_nominal_glyphs_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="583">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="584">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_paint_glyph_func"
              c:identifier="hb_font_funcs_set_paint_glyph_func"
              version="7.0.0">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="803">Sets the implementation function for #hb_font_paint_glyph_func_t.</doc>
      <source-position filename="src/hb-font.h" line="815"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="805">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="806">The callback function to assign</doc>
          <type name="font_paint_glyph_func_t"
                c:type="hb_font_paint_glyph_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="807">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="808">The function to call when @user_data is no longer needed</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_user_data"
              c:identifier="hb_font_funcs_set_user_data"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="794">Attaches a user-data key/data pair to the specified font-functions structure.</doc>
      <source-position filename="src/hb-font.h" line="73"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="804">`true` if success, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="796">The font-functions structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="797">The user-data key to set</doc>
          <type name="user_data_key_t" c:type="hb_user_data_key_t*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="798">A pointer to the user data set</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="799">A callback to call when @data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
        <parameter name="replace" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="800">Whether to replace an existing data with the same key</doc>
          <type name="bool_t" c:type="hb_bool_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_funcs_set_variation_glyph_func"
              c:identifier="hb_font_funcs_set_variation_glyph_func"
              version="1.2.3">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="595">Sets the implementation function for #hb_font_get_variation_glyph_func_t.</doc>
      <source-position filename="src/hb-font.h" line="607"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ffuncs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="597">A font-function structure</doc>
          <type name="font_funcs_t" c:type="hb_font_funcs_t*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="598">The callback function to assign</doc>
          <type name="font_get_variation_glyph_func_t"
                c:type="hb_font_get_variation_glyph_func_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="599">Data to pass to @func</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="destroy"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="600">The function to call when @user_data is not needed anymore</doc>
          <type name="destroy_func_t" c:type="hb_destroy_func_t"/>
        </parameter>
      </parameters>
    </function>
    <record name="font_funcs_t"
            c:type="hb_font_funcs_t"
            opaque="1"
            glib:type-name="hb_font_funcs_t"
            glib:get-type="hb_gobject_font_funcs_get_type"
            c:symbol-prefix="gobject_font_funcs">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="45">Data type containing a set of virtual methods used for
working on #hb_font_t font objects.

HarfBuzz provides a lightweight default function for each of
the methods in #hb_font_funcs_t. Client programs can implement
their own replacements for the individual font functions, as
needed, and replace the default by calling the setter for a
method.</doc>
      <source-position filename="src/hb-font.h" line="58"/>
    </record>
    <function name="font_get_empty"
              c:identifier="hb_font_get_empty"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1943">Fetches the empty font object.</doc>
      <source-position filename="src/hb-font.h" line="996"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1948">The empty font object</doc>
        <type name="font_t" c:type="hb_font_t*"/>
      </return-value>
    </function>
    <function name="font_get_extents_for_direction"
              c:identifier="hb_font_get_extents_for_direction"
              version="1.1.3">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1471">Fetches the extents for a font in a text segment of the
specified direction.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="921"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1473">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1474">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="extents"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1475">The #hb_font_extents_t retrieved</doc>
          <type name="font_extents_t" c:type="hb_font_extents_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_face"
              c:identifier="hb_font_get_face"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="2205">Fetches the face associated with the specified font object.</doc>
      <source-position filename="src/hb-font.h" line="1040"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="2211">The #hb_face_t value</doc>
        <type name="face_t" c:type="hb_face_t*"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="2207">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_font_extents_func_t"
              c:type="hb_font_get_font_extents_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="123">This method should retrieve the extents for a font.</doc>
      <source-position filename="src/hb-font.h" line="133"/>
      <return-value transfer-ownership="none">
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="125">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="126">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="extents"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="127">The font extents retrieved</doc>
          <type name="font_extents_t" c:type="hb_font_extents_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="128">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph"
              c:identifier="hb_font_get_glyph"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1006">Fetches the glyph ID for a Unicode code point in the specified
font, with an optional variation selector.

If @variation_selector is 0, calls hb_font_get_nominal_glyph();
otherwise calls hb_font_get_variation_glyph().</doc>
      <source-position filename="src/hb-font.h" line="916"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1019">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1008">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="unicode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1009">The Unicode code point to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="variation_selector" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1010">A variation-selector code point</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="glyph"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1011">The glyph ID retrieved</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_glyph_advance_for_direction"
              c:identifier="hb_font_get_glyph_advance_for_direction"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1492">Fetches the advance for a glyph ID from the specified font,
in a text segment of the specified direction.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="925"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1494">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1495">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1496">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1497">The horizontal advance retrieved</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1498">The vertical advance retrieved</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_glyph_advance_func_t"
              c:type="hb_font_get_glyph_advance_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="235">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advance for a specified glyph. The
method must return an #hb_position_t.</doc>
      <source-position filename="src/hb-font.h" line="250"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="247">The advance of @glyph within @font</doc>
        <type name="position_t" c:type="hb_position_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="237">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="238">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="239">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="240">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph_advances_for_direction"
              c:identifier="hb_font_get_glyph_advances_for_direction"
              version="1.8.6">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1517">Fetches the advances for a sequence of glyph IDs in the specified
font, in a text segment of the specified direction.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="930"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1519">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1520">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1521">The number of glyph IDs in the sequence queried</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="first_glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1522">The first glyph ID to query</doc>
          <type name="codepoint_t" c:type="const hb_codepoint_t*"/>
        </parameter>
        <parameter name="glyph_stride" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1523">The stride between successive glyph IDs</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
        <parameter name="first_advance"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1524">The first advance retrieved</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="advance_stride"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1525">The stride between successive advances</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_glyph_advances_func_t"
              c:type="hb_font_get_glyph_advances_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="278">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the advances for a sequence of glyphs.</doc>
      <source-position filename="src/hb-font.h" line="294"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="280">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="281">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="282">The number of glyph IDs in the sequence queried</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="first_glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="283">The first glyph ID to query</doc>
          <type name="codepoint_t" c:type="const hb_codepoint_t*"/>
        </parameter>
        <parameter name="glyph_stride" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="284">The stride between successive glyph IDs</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
        <parameter name="first_advance"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="285">The first advance retrieved</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="advance_stride" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="286">The stride between successive advances</doc>
          <type name="guint" c:type="unsigned"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="7">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="287">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph_contour_point"
              c:identifier="hb_font_get_glyph_contour_point"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1318">Fetches the (x,y) coordinates of a specified contour-point index
in the specified glyph, within the specified font.</doc>
      <source-position filename="src/hb-font.h" line="886"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1329">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1320">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1321">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="point_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1322">The contour-point index to query</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1323">The X value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1324">The Y value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_glyph_contour_point_for_origin"
              c:identifier="hb_font_get_glyph_contour_point_for_origin"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1683">Fetches the (X,Y) coordinates of a specified contour-point index
in the specified glyph ID in the specified font, with respect
to the origin in a text segment in the specified direction.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="966"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1699">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1685">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1686">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="point_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1687">The contour-point index to query</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1688">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1689">The X value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1690">The Y value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_glyph_contour_point_func_t"
              c:type="hb_font_get_glyph_contour_point_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="419">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the (X,Y) coordinates (in font units) for a
specified contour point in a glyph. Each coordinate must be returned as
an #hb_position_t output parameter.</doc>
      <source-position filename="src/hb-font.h" line="438"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="435">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="421">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="422">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="423">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="point_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="424">The contour-point index to query</doc>
          <type name="guint" c:type="unsigned int"/>
        </parameter>
        <parameter name="x"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="425">The X value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="y"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="426">The Y value retrieved for the contour point</doc>
          <type name="position_t" c:type="hb_position_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="427">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph_extents"
              c:identifier="hb_font_get_glyph_extents"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1297">Fetches the #hb_glyph_extents_t data for a glyph ID
in the specified font.</doc>
      <source-position filename="src/hb-font.h" line="881"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1306">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1299">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1300">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="extents"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1301">The #hb_glyph_extents_t retrieved</doc>
          <type name="glyph_extents_t" c:type="hb_glyph_extents_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_get_glyph_extents_for_origin"
              c:identifier="hb_font_get_glyph_extents_for_origin"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1656">Fetches the #hb_glyph_extents_t data for a glyph ID
in the specified font, with respect to the origin in
a text segment in the specified direction.

Calls the appropriate direction-specific variant (horizontal
or vertical) depending on the value of @direction.</doc>
      <source-position filename="src/hb-font.h" line="960"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1670">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1658">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1659">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1660">The direction of the text segment</doc>
          <type name="direction_t" c:type="hb_direction_t"/>
        </parameter>
        <parameter name="extents"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1661">The #hb_glyph_extents_t retrieved</doc>
          <type name="glyph_extents_t" c:type="hb_glyph_extents_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_glyph_extents_func_t"
              c:type="hb_font_get_glyph_extents_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="398">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the extents for a specified glyph. Extents must be
returned in an #hb_glyph_extents output parameter.</doc>
      <source-position filename="src/hb-font.h" line="414"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="411">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="400">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="401">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="glyph" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="402">The glyph ID to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="extents"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="403">The #hb_glyph_extents_t retrieved</doc>
          <type name="glyph_extents_t" c:type="hb_glyph_extents_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="404">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph_from_name"
              c:identifier="hb_font_get_glyph_from_name"
              version="0.9.2">
      <doc xml:space="preserve"
           filename="src/hb-font.cc"
           line="1368">Fetches the glyph ID that corresponds to a name string in the specified @font.

&lt;note&gt;Note: @len == -1 means the name string is null-terminated.&lt;/note&gt;</doc>
      <source-position filename="src/hb-font.h" line="895"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.cc"
             line="1379">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1370">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1371">The name string to query</doc>
          <array length="2" zero-terminated="0" c:type="const char*">
            <type name="utf8" c:type="char"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1372">The length of the name queried</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="glyph"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.cc"
               line="1373">The glyph ID retrieved</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t*"/>
        </parameter>
      </parameters>
    </function>
    <callback name="font_get_glyph_from_name_func_t"
              c:type="hb_font_get_glyph_from_name_func_t">
      <doc xml:space="preserve"
           filename="src/hb-font.h"
           line="466">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the glyph ID that corresponds to a glyph-name
string.</doc>
      <source-position filename="src/hb-font.h" line="483"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-font.h"
             line="480">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="468">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="469">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="470">The name string to query</doc>
          <array length="3" zero-terminated="0" c:type="const char*">
            <type name="utf8" c:type="char"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="471">The length of the name queried</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="glyph"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="472">The glyph ID retrieved</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-font.h"
               line="473">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="font_get_glyph_func_t"
              c:type="hb_font_get_glyph_func_t"
              deprecated="1"
              deprecated-version="1.2.3">
      <doc xml:space="preserve"
           filename="src/hb-deprecated.h"
           line="82">A virtual method for the #hb_font_funcs_t of an #hb_font_t object.

This method should retrieve the glyph ID for a specified Unicode code point
font, with an optional variation selector.</doc>
      <source-position filename="src/hb-deprecated.h" line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hb-deprecated.h"
             line="96">`true` if data found, `false` otherwise</doc>
        <type name="bool_t" c:type="hb_bool_t"/>
      </return-value>
      <parameters>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="84">#hb_font_t to work upon</doc>
          <type name="font_t" c:type="hb_font_t*"/>
        </parameter>
        <parameter name="font_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="85">@font user data pointer</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="unicode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="86">The Unicode code point to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="variation_selector" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="87">The  variation-selector code point to query</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t"/>
        </parameter>
        <parameter name="glyph"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="88">The glyph ID retrieved</doc>
          <type name="codepoint_t" c:type="hb_codepoint_t*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/hb-deprecated.h"
               line="89">User data pointer passed by the caller</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <function name="font_get_glyph_h_advance"
              c:identifier="hb_font_get_glyph_h_advance"
              version="0.9.2">
      <do