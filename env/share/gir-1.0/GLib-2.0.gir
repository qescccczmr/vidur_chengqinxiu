<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <package name="glib-2.0"/>
  <c:include name="glib.h"/>
  <namespace name="GLib"
             version="2.0"
             shared-library="libgobject-2.0.so.0,libglib-2.0.so.0"
             c:identifier-prefixes="G"
             c:symbol-prefixes="glib,g">
    <alias name="DateDay" c:type="GDateDay">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="179">Integer representing a day of the month; between 1 and 31.

The %G_DATE_BAD_DAY value represents an invalid day of the month.</doc>
      <source-position filename="glib/gdate.h" line="43"/>
      <type name="guint8" c:type="guint8"/>
    </alias>
    <alias name="DateYear" c:type="GDateYear">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="207">Integer type representing a year.

The %G_DATE_BAD_YEAR value is the invalid value. The year
must be 1 or higher; negative ([BCE](https://en.wikipedia.org/wiki/Common_Era))
years are not allowed.

The year is represented with four digits.</doc>
      <source-position filename="glib/gdate.h" line="42"/>
      <type name="guint16" c:type="guint16"/>
    </alias>
    <alias name="MainContextPusher" c:type="GMainContextPusher">
      <doc xml:space="preserve"
           filename="glib/gmain.h"
           line="582">Opaque type. See g_main_context_pusher_new() for details.</doc>
      <source-position filename="glib/gmain.h" line="589"/>
      <type name="none" c:type="void"/>
    </alias>
    <alias name="MutexLocker" c:type="GMutexLocker">
      <doc xml:space="preserve"
           filename="glib/gthread.h"
           line="310">Opaque type. See g_mutex_locker_new() for details.</doc>
      <source-position filename="glib/gthread.h" line="316"/>
      <type name="none" c:type="void"/>
    </alias>
    <alias name="Pid" c:type="GPid">
      <doc xml:space="preserve"
           filename="glib/gmain.h"
           line="159">A type which is used to hold a process identification.

On UNIX, processes are identified by a process id (an integer),
while Windows uses process handles (which are pointers).

GPid is used in GLib only for descendant processes spawned with
the g_spawn functions.</doc>
      <source-position filename="glib/glibconfig.h" line="201"/>
      <type name="gint" c:type="int"/>
    </alias>
    <alias name="Quark" c:type="GQuark">
      <doc xml:space="preserve"
           filename="glib/gquark.c"
           line="70">A GQuark is a non-zero integer which uniquely identifies a
particular string.

A GQuark value of zero is associated to `NULL`.

Given either the string or the `GQuark` identifier it is possible to
retrieve the other.

Quarks are used for both
[datasets and keyed data lists](datalist-and-dataset.html).

To create a new quark from a string, use [func@GLib.quark_from_string]
or [func@GLib.quark_from_static_string].

To find the string corresponding to a given `GQuark`, use
[func@GLib.quark_to_string].

To find the `GQuark` corresponding to a given string, use
[func@GLib.quark_try_string].

Another use for the string pool maintained for the quark functions
is string interning, using [func@GLib.intern_string] or
[func@GLib.intern_static_string]. An interned string is a canonical
representation for a string. One important advantage of interned
strings is that they can be compared for equality by a simple
pointer comparison, rather than using `strcmp()`.</doc>
      <source-position filename="glib/gquark.h" line="38"/>
      <type name="guint32" c:type="guint32"/>
    </alias>
    <alias name="RWLockReaderLocker" c:type="GRWLockReaderLocker">
      <doc xml:space="preserve"
           filename="glib/gthread.h"
           line="716">Opaque type. See g_rw_lock_reader_locker_new() for details.</doc>
      <source-position filename="glib/gthread.h" line="722"/>
      <type name="none" c:type="void"/>
    </alias>
    <alias name="RWLockWriterLocker" c:type="GRWLockWriterLocker">
      <doc xml:space="preserve"
           filename="glib/gthread.h"
           line="558">Opaque type. See g_rw_lock_writer_locker_new() for details.</doc>
      <source-position filename="glib/gthread.h" line="564"/>
      <type name="none" c:type="void"/>
    </alias>
    <alias name="RecMutexLocker" c:type="GRecMutexLocker">
      <doc xml:space="preserve"
           filename="glib/gthread.h"
           line="432">Opaque type. See g_rec_mutex_locker_new() for details.</doc>
      <source-position filename="glib/gthread.h" line="438"/>
      <type name="none" c:type="void"/>
    </alias>
    <alias name="RefString" c:type="GRefString">
      <doc xml:space="preserve"
           filename="glib/grefstring.h"
           line="44">A typedef for a reference-counted string. A pointer to a #GRefString can be
treated like a standard `char*` array by all code, but can additionally have
`g_ref_string_*()` methods called on it. `g_ref_string_*()` methods cannot be
called on `char*` arrays not allocated using g_ref_string_new().

If using #GRefString with autocleanups, g_autoptr() must be used rather than
g_autofree(), so that the reference counting metadata is also freed.</doc>
      <source-position filename="glib/grefstring.h" line="57"/>
      <type name="gchar" c:type="char"/>
    </alias>
    <alias name="Strv" c:type="GStrv">
      <doc xml:space="preserve"
           filename="glib/gstrfuncs.c"
           line="2558">A typedef alias for gchar**. This is mostly useful when used together with
`g_auto()`.</doc>
      <source-position filename="glib/gstrfuncs.h" line="354"/>
      <type name="utf8" c:type="gchar**"/>
    </alias>
    <alias name="Time" c:type="GTime" deprecated="1" deprecated-version="2.62">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="140">Simply a replacement for `time_t`. It has been deprecated
since it is not equivalent to `time_t` on 64-bit platforms
with a 64-bit `time_t`.

Unrelated to #GTimer.

Note that #GTime is defined to always be a 32-bit integer,
unlike `time_t` which may be 64-bit on some systems. Therefore,
#GTime will overflow in the year 2038, and you cannot use the
address of a #GTime variable as argument to the UNIX time()
function.

Instead, do the following:

|[&lt;!-- language="C" --&gt;
time_t ttime;
GTime gtime;

time (&amp;ttime);
gtime = (GTime)ttime;
]|</doc>
      <doc-deprecated xml:space="preserve">This is not [Y2038-safe](https://en.wikipedia.org/wiki/Year_2038_problem).
   Use #GDateTime or #time_t instead.</doc-deprecated>
      <source-position filename="glib/gdate.h" line="41"/>
      <type name="gint32" c:type="gint32"/>
    </alias>
    <alias name="TimeSpan" c:type="GTimeSpan">
      <doc xml:space="preserve"
           filename="glib/gdatetime.h"
           line="82">A value representing an interval of time, in microseconds.</doc>
      <source-position filename="glib/gdatetime.h" line="89"/>
      <type name="gint64" c:type="gint64"/>
    </alias>
    <function-macro name="ALIGNOF"
                    c:identifier="G_ALIGNOF"
                    version="2.60"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gmacros.h"
           line="1008">Return the minimal alignment required by the platform ABI for values of the given
type. The address of a variable or struct member of the given type must always be
a multiple of this alignment. For example, most platforms require int variables
to be aligned at a 4-byte boundary, so `G_ALIGNOF (int)` is 4 on most platforms.

Note this is not necessarily the same as the value returned by GCCâ€™s
`__alignof__` operator, which returns the preferred alignment for a type.
The preferred alignment may be a stricter alignment than the minimal
alignment.</doc>
      <source-position filename="glib/gmacros.h" line="1001"/>
      <parameters>
        <parameter name="type">
          <doc xml:space="preserve"
               filename="glib/gmacros.h"
               line="1010">a type-name</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ALLOCATOR_LIST" value="1" c:type="G_ALLOCATOR_LIST">
      <source-position filename="glib/deprecated/gallocator.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ALLOCATOR_NODE" value="3" c:type="G_ALLOCATOR_NODE">
      <source-position filename="glib/deprecated/gallocator.h" line="34"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ALLOCATOR_SLIST" value="2" c:type="G_ALLOCATOR_SLIST">
      <source-position filename="glib/deprecated/gallocator.h" line="33"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ALLOC_AND_FREE" value="2" c:type="G_ALLOC_AND_FREE">
      <source-position filename="glib/deprecated/gallocator.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ALLOC_ONLY" value="1" c:type="G_ALLOC_ONLY">
      <source-position filename="glib/deprecated/gallocator.h" line="30"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ANALYZER_ANALYZING"
              value="1"
              c:type="G_ANALYZER_ANALYZING">
      <source-position filename="glib/gmacros.h" line="831"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="APPROX_VALUE"
                    c:identifier="G_APPROX_VALUE"
                    version="2.58"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="990">Evaluates to a truth value if the absolute difference between @a and @b is
smaller than @epsilon, and to a false value otherwise.

For example,
- `G_APPROX_VALUE (5, 6, 2)` evaluates to true
- `G_APPROX_VALUE (3.14, 3.15, 0.001)` evaluates to false
- `G_APPROX_VALUE (n, 0.f, FLT_EPSILON)` evaluates to true if `n` is within
  the single precision floating point epsilon from zero</doc>
      <source-position filename="glib/gmacros.h" line="928"/>
      <parameters>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="992">a numeric value</doc>
        </parameter>
        <parameter name="b">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="993">a numeric value</doc>
        </parameter>
        <parameter name="epsilon">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="994">a numeric value that expresses the tolerance between @a and @b</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ASCII_DTOSTR_BUF_SIZE"
              value="39"
              c:type="G_ASCII_DTOSTR_BUF_SIZE">
      <doc xml:space="preserve"
           filename="glib/gstrfuncs.c"
           line="230">A good size for a buffer to be passed into [func@GLib.ascii_dtostr].
It is guaranteed to be enough for all output of that function
on systems with 64bit IEEE-compatible doubles.

The typical usage would be something like:
```C
char buf[G_ASCII_DTOSTR_BUF_SIZE];

fprintf (out, "value=%s\n", g_ascii_dtostr (buf, sizeof (buf), value));
```</doc>
      <source-position filename="glib/gstrfuncs.h" line="230"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ATEXIT" c:identifier="g_ATEXIT" introspectable="0">
      <source-position filename="glib/gutils.h" line="291"/>
      <parameters>
        <parameter name="proc">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ATOMIC_REF_COUNT_INIT"
              value="1"
              c:type="G_ATOMIC_REF_COUNT_INIT"
              version="2.78">
      <doc xml:space="preserve"
           filename="glib/grefcount.h"
           line="80">Evaluates to the initial reference count for `gatomicrefcount`.

This macro is useful for initializing `gatomicrefcount` fields inside
structures, for instance:

|[&lt;!-- language="C" --&gt;
typedef struct {
  gatomicrefcount ref_count;
  char *name;
  char *address;
} Person;

static const Person default_person = {
  .ref_count = G_ATOMIC_REF_COUNT_INIT,
  .name = "Default name",
  .address = "Default address",
};
]|</doc>
      <source-position filename="glib/grefcount.h" line="103"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="AUTO_LOCK"
                    c:identifier="G_AUTO_LOCK"
                    version="2.80"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gthread.c"
           line="202">Works like [func@GLib.MUTEX_AUTO_LOCK], but for a lock defined with
[func@GLib.LOCK_DEFINE].

This feature is only supported on GCC and clang. This macro is not defined on
other compilers and should not be used in programs that are intended to be
portable to those compilers.</doc>
      <source-position filename="glib/gthread.h" line="143"/>
      <parameters>
        <parameter name="name">
          <doc xml:space="preserve"
               filename="glib/gthread.c"
               line="204">the name of the lock</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="Allocator" c:type="GAllocator" disguised="1" opaque="1">
      <source-position filename="glib/deprecated/gallocator.h" line="27"/>
      <method name="free" c:identifier="g_allocator_free">
        <source-position filename="glib/deprecated/gallocator.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="allocator" transfer-ownership="none">
            <type name="Allocator" c:type="GAllocator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="g_allocator_new" introspectable="0">
        <source-position filename="glib/deprecated/gallocator.h" line="69"/>
        <return-value>
          <type name="Allocator" c:type="GAllocator*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_preallocs" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Array"
            c:type="GArray"
            glib:type-name="GArray"
            glib:get-type="g_array_get_type"
            c:symbol-prefix="array">
      <doc xml:space="preserve"
           filename="glib/garray.c"
           line="54">Contains the public fields of a GArray.</doc>
      <source-position filename="glib/garray.h" line="47"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="56">a pointer to the element data. The data may be moved as
    elements are added to the #GArray.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="len" writable="1">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="58">the number of elements in the #GArray not including the
    possible terminating zero element.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <function name="append_vals"
                c:identifier="g_array_append_vals"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="564">Adds @len elements onto the end of the array.</doc>
        <source-position filename="glib/garray.h" line="104"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="572">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="566">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="567">a pointer to the elements to append to the end of the array</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="568">the number of elements to append</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="binary_search"
                c:identifier="g_array_binary_search"
                version="2.62"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="967">Checks whether @target exists in @array by performing a binary
search based on the given comparison function @compare_func which
get pointers to items as arguments. If the element is found, %TRUE
is returned and the elementâ€™s index is returned in @out_match_index
(if non-%NULL). Otherwise, %FALSE is returned and @out_match_index
is undefined. If @target exists multiple times in @array, the index
of the first instance is returned. This search is using a binary
search, so the @array must absolutely be sorted to return a correct
result (if not, the function may produce false-negative).

This example defines a comparison function and search an element in a #GArray:
|[&lt;!-- language="C" --&gt;
static gint
cmpint (gconstpointer a, gconstpointer b)
{
  const gint *_a = a;
  const gint *_b = b;

  return *_a - *_b;
}
...
gint i = 424242;
guint matched_index;
gboolean result = g_array_binary_search (garray, &amp;i, cmpint, &amp;matched_index);
...
]|</doc>
        <source-position filename="glib/garray.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="1002">%TRUE if @target is one of the elements of @array, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="969">a #GArray.</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="970">a pointer to the item to look up.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="compare_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="971">A #GCompareFunc used to locate @target.</doc>
            <type name="CompareFunc" c:type="GCompareFunc"/>
          </parameter>
          <parameter name="out_match_index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="972">return location
   for the index of the element, if found.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="copy"
                c:identifier="g_array_copy"
                version="2.62"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="1569">Create a shallow copy of a #GArray. If the array elements consist of
pointers to data, the pointers are copied but the actual data is not.</doc>
        <source-position filename="glib/garray.h" line="93"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="1576">A copy of @array.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="1571">A #GArray.</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="free" c:identifier="g_array_free" introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="487">Frees the memory allocated for the #GArray. If @free_segment is
%TRUE it frees the memory block holding the elements as well. Pass
%FALSE if you want to free the #GArray wrapper but preserve the
underlying array for use elsewhere. If the reference count of
@array is greater than one, the #GArray wrapper is preserved but
the size of  @array will be set to zero.

If array contents point to dynamically-allocated memory, they should
be freed separately if @free_seg is %TRUE and no @clear_func
function has been set for @array.

This function is not thread-safe. If using a #GArray from multiple
threads, use only the atomic g_array_ref() and g_array_unref()
functions.</doc>
        <source-position filename="glib/garray.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="507">the element data if @free_segment is %FALSE, otherwise
    %NULL. The element data should be freed using g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="489">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="free_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="490">if %TRUE the actual element data is freed as well</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_element_size"
                c:identifier="g_array_get_element_size"
                version="2.22"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="467">Gets the size of the elements in @array.</doc>
        <source-position filename="glib/garray.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="473">Size of each element, in bytes</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="469">A #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="insert_vals"
                c:identifier="g_array_insert_vals"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="673">Inserts @len elements into a #GArray at the given index.

If @index_ is greater than the arrayâ€™s current length, the array is expanded.
The elements between the old end of the array and the newly inserted elements
will be initialised to zero if the array was configured to clear elements;
otherwise their values will be undefined.

If @index_ is less than the arrayâ€™s current length, new entries will be
inserted into the array, and the existing entries above @index_ will be moved
upwards.

@data may be %NULL if (and only if) @len is zero. If @len is zero, this
function is a no-op.</doc>
        <source-position filename="glib/garray.h" line="112"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="694">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="675">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="676">the index to place the elements at</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="677">a pointer to the elements to insert</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="678">the number of elements to insert</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="g_array_new" introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="122">Creates a new #GArray with a reference count of 1.</doc>
        <source-position filename="glib/garray.h" line="72"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="132">the new #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="zero_terminated" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="124">%TRUE if the array should have an extra element at
    the end which is set to 0</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="clear_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="126">%TRUE if #GArray elements should be automatically cleared
    to 0 when they are allocated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="128">the size of each element in bytes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_take"
                c:identifier="g_array_new_take"
                version="2.76"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="147">Creates a new #GArray with @data as array data, @len as length and a
reference count of 1.

This avoids having to copy the data manually, when it can just be
inherited.
After this call, @data belongs to the #GArray and may no longer be
modified by the caller. The memory of @data has to be dynamically
allocated and will eventually be freed with g_free().

In case the elements need to be cleared when the array is freed, use
g_array_set_clear_func() to set a #GDestroyNotify function to perform
such task.

Do not use it if @len or @element_size are greater than %G_MAXUINT.
#GArray stores the length of its data in #guint, which may be shorter
than #gsize.</doc>
        <source-position filename="glib/garray.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="173">A new #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="149">an array of
  elements of @element_size, or %NULL for an empty array</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="151">the number of elements in @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="clear" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="152">%TRUE if #GArray elements should be automatically cleared
    to 0 when they are allocated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="154">the size of each element in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_take_zero_terminated"
                c:identifier="g_array_new_take_zero_terminated"
                version="2.76"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="199">Creates a new #GArray with @data as array data, computing the length of it
and setting the reference count to 1.

This avoids having to copy the data manually, when it can just be
inherited.
After this call, @data belongs to the #GArray and may no longer be
modified by the caller. The memory of @data has to be dynamically
allocated and will eventually be freed with g_free().

The length is calculated by iterating through @data until the first %NULL
element is found.

In case the elements need to be cleared when the array is freed, use
g_array_set_clear_func() to set a #GDestroyNotify function to perform
such task.

Do not use it if @data length or @element_size are greater than %G_MAXUINT.
#GArray stores the length of its data in #guint, which may be shorter
than #gsize.</doc>
        <source-position filename="glib/garray.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="226">A new #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="201">an array of elements of @element_size</doc>
            <array c:type="gpointer">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="clear" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="202">%TRUE if #GArray elements should be automatically cleared
    to 0 when they are allocated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="204">the size of each element in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="prepend_vals"
                c:identifier="g_array_prepend_vals"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="612">Adds @len elements onto the start of the array.

@data may be %NULL if (and only if) @len is zero. If @len is zero, this
function is a no-op.

This operation is slower than g_array_append_vals() since the
existing elements in the array have to be moved to make space for
the new elements.</doc>
        <source-position filename="glib/garray.h" line="108"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="627">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="614">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="615">a pointer to the elements to prepend to the start of the array</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="616">the number of elements to prepend, which may be zero</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref"
                c:identifier="g_array_ref"
                version="2.22"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="416">Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.</doc>
        <source-position filename="glib/garray.h" line="98"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="423">The passed in #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="418">A #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="remove_index"
                c:identifier="g_array_remove_index"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="781">Removes the element at the given index from a #GArray. The following
elements are moved down one place.</doc>
        <source-position filename="glib/garray.h" line="120"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="789">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="783">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="784">the index of the element to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_index_fast"
                c:identifier="g_array_remove_index_fast"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="819">Removes the element at the given index from a #GArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GArray. But it is faster than
g_array_remove_index().</doc>
        <source-position filename="glib/garray.h" line="123"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="829">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="821">a @GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="822">the index of the element to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_range"
                c:identifier="g_array_remove_range"
                version="2.4"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="859">Removes the given number of elements starting at the given index
from a #GArray.  The following elements are moved to close the gap.</doc>
        <source-position filename="glib/garray.h" line="126"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="868">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="861">a @GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="862">the index of the first element to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="863">the number of elements to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_clear_func"
                c:identifier="g_array_set_clear_func"
                version="2.32"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="366">Sets a function to clear an element of @array.

The @clear_func will be called when an element in the array
data segment is removed and when the array is freed and data
segment is deallocated as well. @clear_func will be passed a
pointer to the element to clear, rather than the element itself.

Note that in contrast with other uses of #GDestroyNotify
functions, @clear_func is expected to clear the contents of
the array element it is given, but not free the element itself.

|[&lt;!-- language="C" --&gt;
typedef struct
{
  gchar *str;
  GObject *obj;
} ArrayElement;

static void
array_element_clear (ArrayElement *element)
{
  g_clear_pointer (&amp;element-&gt;str, g_free);
  g_clear_object (&amp;element-&gt;obj);
}

// main code
GArray *garray = g_array_new (FALSE, FALSE, sizeof (ArrayElement));
g_array_set_clear_func (garray, (GDestroyNotify) array_element_clear);
// assign data to the structure
g_array_free (garray, TRUE);
]|</doc>
        <source-position filename="glib/garray.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="368">A #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="clear_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="369">a function to clear an element of @array</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_size"
                c:identifier="g_array_set_size"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="746">Sets the size of the array, expanding it if necessary. If the array
was created with @clear_ set to %TRUE, the new elements are set to 0.</doc>
        <source-position filename="glib/garray.h" line="117"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="754">the #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="748">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="749">the new size of the #GArray</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="sized_new"
                c:identifier="g_array_sized_new"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="315">Creates a new #GArray with @reserved_size elements preallocated and
a reference count of 1. This avoids frequent reallocation, if you
are going to add many elements to the array. Note however that the
size of the array is still 0.</doc>
        <source-position filename="glib/garray.h" line="88"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="329">the new #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="zero_terminated" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="317">%TRUE if the array should have an extra element at
    the end with all bits cleared</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="clear_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="319">%TRUE if all bits in the array should be cleared to 0 on
    allocation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="321">size of each element in the array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reserved_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="322">number of elements preallocated</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="sort" c:identifier="g_array_sort" introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="906">Sorts a #GArray using @compare_func which should be a qsort()-style
comparison function (returns less than zero for first arg is less
than second arg, zero for equal, greater zero if first arg is
greater than second arg).

This is guaranteed to be a stable sort since version 2.32.</doc>
        <source-position filename="glib/garray.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="908">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="compare_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="909">comparison function</doc>
            <type name="CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="sort_with_data"
                c:identifier="g_array_sort_with_data"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="935">Like g_array_sort(), but the comparison function receives an extra
user data argument.

This is guaranteed to be a stable sort since version 2.32.

There used to be a comment here about making the sort stable by
using the addresses of the elements in the comparison function.
This did not actually work, so any such code should be removed.</doc>
        <source-position filename="glib/garray.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="937">a #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="compare_func" transfer-ownership="none" closure="2">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="938">comparison function</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="939">data to pass to @compare_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="steal"
                c:identifier="g_array_steal"
                version="2.64"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="264">Frees the data in the array and resets the size to zero, while
the underlying array is preserved for use elsewhere and returned
to the caller.

If the array was created with the @zero_terminate property
set to %TRUE, the returned data is zero terminated too.

If array elements contain dynamically-allocated memory,
the array elements should also be freed by the caller.

A short example of use:
|[&lt;!-- language="C" --&gt;
...
gpointer data;
gsize data_len;
data = g_array_steal (some_array, &amp;data_len);
...
]|</doc>
        <source-position filename="glib/garray.h" line="85"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="289">the element data, which should be
    freed using g_free().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="266">a #GArray.</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="267">pointer to retrieve the number of
   elements of the original array</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unref"
                c:identifier="g_array_unref"
                version="2.22"
                introspectable="0">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="446">Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.</doc>
        <source-position filename="glib/garray.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="448">A #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="AsciiType" c:type="GAsciiType">
      <source-position filename="glib/gstrfuncs.h" line="57"/>
      <member name="alnum" value="1" c:identifier="G_ASCII_ALNUM">
      </member>
      <member name="alpha" value="2" c:identifier="G_ASCII_ALPHA">
      </member>
      <member name="cntrl" value="4" c:identifier="G_ASCII_CNTRL">
      </member>
      <member name="digit" value="8" c:identifier="G_ASCII_DIGIT">
      </member>
      <member name="graph" value="16" c:identifier="G_ASCII_GRAPH">
      </member>
      <member name="lower" value="32" c:identifier="G_ASCII_LOWER">
      </member>
      <member name="print" value="64" c:identifier="G_ASCII_PRINT">
      </member>
      <member name="punct" value="128" c:identifier="G_ASCII_PUNCT">
      </member>
      <member name="space" value="256" c:identifier="G_ASCII_SPACE">
      </member>
      <member name="upper" value="512" c:identifier="G_ASCII_UPPER">
      </member>
      <member name="xdigit" value="1024" c:identifier="G_ASCII_XDIGIT">
      </member>
    </bitfield>
    <record name="AsyncQueue"
            c:type="GAsyncQueue"
            disguised="1"
            opaque="1"
            copy-function="g_async_queue_ref"
            free-function="g_async_queue_unref">
      <doc xml:space="preserve"
           filename="glib/gasyncqueue.c"
           line="40">An opaque data structure which represents an asynchronous queue.

It should only be accessed through the `g_async_queue_*` functions.</doc>
      <source-position filename="glib/gasyncqueue.h" line="38"/>
      <method name="length" c:identifier="g_async_queue_length">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="618">Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.</doc>
        <source-position filename="glib/gasyncqueue.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="631">the length of the @queue</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="620">a #GAsyncQueue.</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="length_unlocked"
              c:identifier="g_async_queue_length_unlocked">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="647">Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="662">the length of the @queue.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="649">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="g_async_queue_lock">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="191">Acquires the @queue's lock. If another thread is already
holding the lock, this call will block until the lock
becomes available.

Call g_async_queue_unlock() to drop the lock again.

While holding the lock, you can only call the
g_async_queue_*_unlocked() functions on @queue. Otherwise,
deadlock may occur.</doc>
        <source-position filename="glib/gasyncqueue.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="193">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop" c:identifier="g_async_queue_pop">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="392">Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.</doc>
        <source-position filename="glib/gasyncqueue.h" line="76"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="399">data from the queue</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="394">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop_unlocked" c:identifier="g_async_queue_pop_unlocked">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="415">Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="424">data from the queue.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="417">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="g_async_queue_push">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="231">Pushes the @data into the @queue.

The @data parameter must not be %NULL.</doc>
        <source-position filename="glib/gasyncqueue.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="233">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="234">data to push onto the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_front"
              c:identifier="g_async_queue_push_front"
              version="2.46">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="802">Pushes the @item into the @queue. @item must not be %NULL.
In contrast to g_async_queue_push(), this function
pushes the new item ahead of the items already in the queue,
so that it will be the next one to be popped off the queue.</doc>
        <source-position filename="glib/gasyncqueue.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="804">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="805">data to push into the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_front_unlocked"
              c:identifier="g_async_queue_push_front_unlocked"
              version="2.46">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="826">Pushes the @item into the @queue. @item must not be %NULL.
In contrast to g_async_queue_push_unlocked(), this function
pushes the new item ahead of the items already in the queue,
so that it will be the next one to be popped off the queue.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="828">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="829">data to push into the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_sorted"
              c:identifier="g_async_queue_push_sorted"
              version="2.10">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="275">Inserts @data into @queue using @func to determine the new
position.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

For an example of @func see g_async_queue_sort().</doc>
        <source-position filename="glib/gasyncqueue.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="277">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="278">the @data to push into the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="279">the #GCompareDataFunc is used to sort @queue</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="280">user data passed to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_sorted_unlocked"
              c:identifier="g_async_queue_push_sorted_unlocked"
              version="2.10">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="316">Inserts @data into @queue using @func to determine the new
position.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function must be called while holding the @queue's lock.

For an example of @func see g_async_queue_sort().</doc>
        <source-position filename="glib/gasyncqueue.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="318">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="319">the data to push into the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="320">the #GCompareDataFunc is used to sort @queue</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="321">user data passed to @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_unlocked" c:identifier="g_async_queue_push_unlocked">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="252">Pushes the @data into the @queue.

The @data parameter must not be %NULL.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="254">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="255">data to push onto the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_async_queue_ref">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="104">Increases the reference count of the asynchronous @queue by 1.
You do not need to hold the lock to call this function.</doc>
        <source-position filename="glib/gasyncqueue.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="111">the @queue that was passed in (since 2.6)</doc>
          <type name="AsyncQueue" c:type="GAsyncQueue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="106">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_unlocked"
              c:identifier="g_async_queue_ref_unlocked"
              deprecated="1"
              deprecated-version="2.8">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="123">Increases the reference count of the asynchronous @queue by 1.</doc>
        <doc-deprecated xml:space="preserve">Reference counting is done atomically.
so g_async_queue_ref() can be used regardless of the @queue's
lock.</doc-deprecated>
        <source-position filename="glib/gasyncqueue.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="125">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="g_async_queue_remove" version="2.46">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="752">Remove an item from the queue.</doc>
        <source-position filename="glib/gasyncqueue.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="759">%TRUE if the item was removed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="754">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="755">the data to remove from the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_unlocked"
              c:identifier="g_async_queue_remove_unlocked"
              version="2.46">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="779">Remove an item from the queue.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="788">%TRUE if the item was removed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="781">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="782">the data to remove from the @queue</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort" c:identifier="g_async_queue_sort" version="2.10">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="672">Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

If you were sorting a list of priority numbers to make sure the
lowest priority would be at the top of the queue, you could use:
|[&lt;!-- language="C" --&gt;
 gint32 id1;
 gint32 id2;

 id1 = GPOINTER_TO_INT (element1);
 id2 = GPOINTER_TO_INT (element2);

 return (id1 &gt; id2 ? +1 : id1 == id2 ? 0 : -1);
]|</doc>
        <source-position filename="glib/gasyncqueue.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="674">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="675">the #GCompareDataFunc is used to sort @queue</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="676">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_unlocked"
              c:identifier="g_async_queue_sort_unlocked"
              version="2.10">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="716">Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="718">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="719">the #GCompareDataFunc is used to sort @queue</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="720">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="timed_pop"
              c:identifier="g_async_queue_timed_pop"
              deprecated="1">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="533">Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_real_time()
and g_time_val_add() can be used.</doc>
        <doc-deprecated xml:space="preserve">use g_async_queue_timeout_pop().</doc-deprecated>
        <source-position filename="glib/gasyncqueue.h" line="117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="546">data from the queue or %NULL, when no data is
  received before @end_time.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="535">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="end_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="536">a #GTimeVal, determining the final time</doc>
            <type name="TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="timed_pop_unlocked"
              c:identifier="g_async_queue_timed_pop_unlocked"
              deprecated="1">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="577">Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_real_time()
and g_time_val_add() can be used.

This function must be called while holding the @queue's lock.</doc>
        <doc-deprecated xml:space="preserve">use g_async_queue_timeout_pop_unlocked().</doc-deprecated>
        <source-position filename="glib/gasyncqueue.h" line="120"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="592">data from the queue or %NULL, when no data is
  received before @end_time.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="579">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="end_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="580">a #GTimeVal, determining the final time</doc>
            <type name="TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="timeout_pop" c:identifier="g_async_queue_timeout_pop">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="478">Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.</doc>
        <source-position filename="glib/gasyncqueue.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="488">data from the queue or %NULL, when no data is
  received before the timeout.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="480">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="481">the number of microseconds to wait</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="timeout_pop_unlocked"
              c:identifier="g_async_queue_timeout_pop_unlocked">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="507">Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="519">data from the queue or %NULL, when no data is
  received before the timeout.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="509">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="510">the number of microseconds to wait</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_pop" c:identifier="g_async_queue_try_pop">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="434">Tries to pop data from the @queue. If no data is available,
%NULL is returned.</doc>
        <source-position filename="glib/gasyncqueue.h" line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="441">data from the queue or %NULL, when no data is
  available immediately.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="436">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="try_pop_unlocked"
              c:identifier="g_async_queue_try_pop_unlocked">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="458">Tries to pop data from the @queue. If no data is available,
%NULL is returned.

This function must be called while holding the @queue's lock.</doc>
        <source-position filename="glib/gasyncqueue.h" line="82"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="467">data from the queue or %NULL, when no data is
  available immediately.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="460">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="g_async_queue_unlock">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="213">Releases the queue's lock.

Calling this function when you have not acquired
the with g_async_queue_lock() leads to undefined
behaviour.</doc>
        <source-position filename="glib/gasyncqueue.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="215">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_async_queue_unref">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="163">Decreases the reference count of the asynchronous @queue by 1.

If the reference count went to 0, the @queue will be destroyed
and the memory allocated will be freed. So you are not allowed
to use the @queue afterwards, as it might have disappeared.
You do not need to hold the lock to call this function.</doc>
        <source-position filename="glib/gasyncqueue.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="165">a #GAsyncQueue.</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref_and_unlock"
              c:identifier="g_async_queue_unref_and_unlock"
              deprecated="1"
              deprecated-version="2.8">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="141">Decreases the reference count of the asynchronous @queue by 1
and releases the lock. This function must be called while holding
the @queue's lock. If the reference count went to 0, the @queue
will be destroyed and the memory allocated will be freed.</doc>
        <doc-deprecated xml:space="preserve">Reference counting is done atomically.
so g_async_queue_unref() can be used regardless of the @queue's
lock.</doc-deprecated>
        <source-position filename="glib/gasyncqueue.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="143">a #GAsyncQueue</doc>
            <type name="AsyncQueue" c:type="GAsyncQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="g_async_queue_new">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="63">Creates a new asynchronous queue.</doc>
        <source-position filename="glib/gasyncqueue.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="68">a new #GAsyncQueue. Free with g_async_queue_unref()</doc>
          <type name="AsyncQueue" c:type="GAsyncQueue*"/>
        </return-value>
      </function>
      <function name="new_full"
                c:identifier="g_async_queue_new_full"
                version="2.16">
        <doc xml:space="preserve"
             filename="glib/gasyncqueue.c"
             line="76">Creates a new asynchronous queue and sets up a destroy notify
function that is used to free any remaining queue items when
the queue is destroyed after the final unref.</doc>
        <source-position filename="glib/gasyncqueue.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gasyncqueue.c"
               line="84">a new #GAsyncQueue. Free with g_async_queue_unref()</doc>
          <type name="AsyncQueue" c:type="GAsyncQueue*"/>
        </return-value>
        <parameters>
          <parameter name="item_free_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="glib/gasyncqueue.c"
                 line="78">function to free queue elements</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="BIG_ENDIAN" value="4321" c:type="G_BIG_ENDIAN">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="116">Specifies one of the possible types of byte order.
See %G_BYTE_ORDER.</doc>
      <source-position filename="glib/gtypes.h" line="212"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="BREAKPOINT"
                    c:identifier="G_BREAKPOINT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gbacktrace.h"
           line="47">Inserts a breakpoint instruction into the code.

On architectures which support it, this is implemented as a soft interrupt
and on other architectures it raises a `SIGTRAP` signal.

`SIGTRAP` is used rather than abort() to allow breakpoints to be skipped past
in a debugger if they are not the desired target of debugging.</doc>
      <source-position filename="glib/gbacktrace.h" line="59"/>
    </function-macro>
    <record name="BookmarkFile"
            c:type="GBookmarkFile"
            opaque="1"
            version="2.12"
            glib:type-name="GBookmarkFile"
            glib:get-type="g_bookmark_file_get_type"
            c:symbol-prefix="bookmark_file">
      <doc xml:space="preserve"
           filename="glib/gbookmarkfile.h"
           line="75">`GBookmarkFile` lets you parse, edit or create files containing bookmarks.

Bookmarks refer to a URI, along with some meta-data about the resource
pointed by the URI like its MIME type, the application that is registering
the bookmark and the icon that should be used to represent the bookmark.
The data is stored using the
[Desktop Bookmark Specification](https://www.freedesktop.org/wiki/Specifications/desktop-bookmark-spec/).

The syntax of the bookmark files is described in detail inside the
Desktop Bookmark Specification, here is a quick summary: bookmark
files use a sub-class of the XML Bookmark Exchange Language
specification, consisting of valid UTF-8 encoded XML, under the
`&lt;xbel&gt;` root element; each bookmark is stored inside a
`&lt;bookmark&gt;` element, using its URI: no relative paths can
be used inside a bookmark file. The bookmark may have a user defined
title and description, to be used instead of the URI. Under the
`&lt;metadata&gt;` element, with its owner attribute set to
`http://freedesktop.org`, is stored the meta-data about a resource
pointed by its URI. The meta-data consists of the resource's MIME
type; the applications that have registered a bookmark; the groups
to which a bookmark belongs to; a visibility flag, used to set the
bookmark as "private" to the applications and groups that has it
registered; the URI and MIME type of an icon, to be used when
displaying the bookmark inside a GUI.

Here is an example of a bookmark file:
[bookmarks.xbel](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/glib/tests/bookmarks.xbel)

A bookmark file might contain more than one bookmark; each bookmark
is accessed through its URI.

The important caveat of bookmark files is that when you add a new
bookmark you must also add the application that is registering it, using
[method@GLib.BookmarkFile.add_application] or [method@GLib.BookmarkFile.set_application_info].
If a bookmark has no applications then it won't be dumped when creating
the on disk representation, using [method@GLib.BookmarkFile.to_data] or
[method@GLib.BookmarkFile.to_file].</doc>
      <source-position filename="glib/gbookmarkfile.h" line="118"/>
      <constructor name="new"
                   c:identifier="g_bookmark_file_new"
                   version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1686">Creates a new empty #GBookmarkFile object.

Use g_bookmark_file_load_from_file(), g_bookmark_file_load_from_data()
or g_bookmark_file_load_from_data_dirs() to read an existing bookmark
file.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="1695">an empty #GBookmarkFile</doc>
          <type name="BookmarkFile" c:type="GBookmarkFile*"/>
        </return-value>
      </constructor>
      <method name="add_application"
              c:identifier="g_bookmark_file_add_application"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3264">Adds the application with @name and @exec to the list of
applications that have registered a bookmark for @uri into
@bookmark.

Every bookmark inside a #GBookmarkFile must have at least an
application registered.  Each application must provide a name, a
command line useful for launching the bookmark, the number of times
the bookmark has been registered by the application and the last
time the application registered this bookmark.

If @name is %NULL, the name of the application will be the
same returned by g_get_application_name(); if @exec is %NULL, the
command line will be a composition of the program name as
returned by g_get_prgname() and the "\%u" modifier, which will be
expanded to the bookmark's URI.

This function will automatically take care of updating the
registrations count and timestamping in case an application
with the same @name had already registered a bookmark for
@uri inside @bookmark.

If no bookmark for @uri is found, one is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3266">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3267">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3268">the name of the application registering the bookmark
  or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="exec"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3270">command line to be used to launch the bookmark or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group"
              c:identifier="g_bookmark_file_add_group"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3031">Adds @group to the list of groups to which the bookmark for @uri
belongs to.

If no bookmark for @uri is found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3033">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3034">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3035">the group name to be added</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="g_bookmark_file_copy" version="2.76">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1711">Deeply copies a @bookmark #GBookmarkFile object to a new one.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="126"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="1717">the copy of @bookmark. Use
  g_bookmark_free() when finished using it.</doc>
          <type name="BookmarkFile" c:type="GBookmarkFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1713">A #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="g_bookmark_file_free" version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1747">Frees a #GBookmarkFile.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1749">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_added"
              c:identifier="g_bookmark_file_get_added"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2646">Gets the time the bookmark for @uri was added to @bookmark

In the event the URI cannot be found, -1 is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_get_added_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2657">a timestamp</doc>
          <type name="time_t" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2648">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2649">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_added_date_time"
              c:identifier="g_bookmark_file_get_added_date_time"
              version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2672">Gets the time the bookmark for @uri was added to @bookmark

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2683">a #GDateTime</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2674">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2675">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_info"
              c:identifier="g_bookmark_file_get_app_info"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3683">Gets the registration information of @app_name for the bookmark for
@uri.  See g_bookmark_file_set_application_info() for more information about
the returned data.

The string returned in @app_exec must be freed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that no application with name @app_name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
%G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
the command line fails, an error of the %G_SHELL_ERROR domain is
set and %FALSE is returned.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_get_application_info() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3707">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3685">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3686">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3687">an application's name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="exec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3688">return location for the command line of the application, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3689">return location for the registration count, or %NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="stamp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3690">return location for the last registration time, or %NULL</doc>
            <type name="time_t" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_application_info"
              c:identifier="g_bookmark_file_get_application_info"
              version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3735">Gets the registration information of @app_name for the bookmark for
@uri.  See g_bookmark_file_set_application_info() for more information about
the returned data.

The string returned in @app_exec must be freed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that no application with name @app_name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
%G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
the command line fails, an error of the %G_SHELL_ERROR domain is
set and %FALSE is returned.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3759">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3737">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3738">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3739">an application's name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="exec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3740">return location for the command line of the application, or %NULL</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3741">return location for the registration count, or %NULL</doc>
            <type name="guint" c:type="unsigned int*"/>
          </parameter>
          <parameter name="stamp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3742">return location for the last registration time, or %NULL</doc>
            <type name="DateTime" c:type="GDateTime**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_applications"
              c:identifier="g_bookmark_file_get_applications"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3837">Retrieves the names of the applications that have registered the
bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3850">a newly allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3839">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3840">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3841">return location of the length of the returned list, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="g_bookmark_file_get_description"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2371">Retrieves the description of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2382">a newly allocated string or %NULL if the specified
  URI cannot be found.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2373">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2374">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_groups"
              c:identifier="g_bookmark_file_get_groups"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3192">Retrieves the list of group names of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

The returned array is %NULL terminated, so @length may optionally
be %NULL.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="190"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3207">a newly allocated %NULL-terminated array of group names.
  Use g_strfreev() to free it.</doc>
          <array length="1" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3194">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3195">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3196">return location for the length of the returned string, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="g_bookmark_file_get_icon"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="4047">Gets the icon of the bookmark for @uri.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="4060">%TRUE if the icon for the bookmark for the URI was found.
  You should free the returned strings.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4049">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4050">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="href"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4051">return location for the icon's location or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="mime_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4052">return location for the icon's MIME type or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_private"
              c:identifier="g_bookmark_file_get_is_private"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2537">Gets whether the private flag of the bookmark for @uri is set.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the private flag cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2550">%TRUE if the private flag is set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2539">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2540">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="g_bookmark_file_get_mime_type"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2451">Retrieves the MIME type of the resource pointed by @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the MIME type cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2464">a newly allocated string or %NULL if the specified
  URI cannot be found.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2453">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2454">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modified"
              c:identifier="g_bookmark_file_get_modified"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2779">Gets the time when the bookmark for @uri was last modified.

In the event the URI cannot be found, -1 is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_get_modified_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2790">a timestamp</doc>
          <type name="time_t" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2781">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2782">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modified_date_time"
              c:identifier="g_bookmark_file_get_modified_date_time"
              version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2805">Gets the time when the bookmark for @uri was last modified.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2816">a #GDateTime</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2807">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2808">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="g_bookmark_file_get_size"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3911">Gets the number of bookmarks inside @bookmark.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="312"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3917">the number of bookmarks</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3913">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="g_bookmark_file_get_title"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2284">Returns the title of the bookmark for @uri.

If @uri is %NULL, the title of @bookmark is returned.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2297">a newly allocated string or %NULL if the specified
  URI cannot be found.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2286">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2287">a valid URI or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uris"
              c:identifier="g_bookmark_file_get_uris"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2195">Returns all URIs of the bookmarks in the bookmark file @bookmark.
The array of returned URIs will be %NULL-terminated, so @length may
optionally be %NULL.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="314"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2204">a newly allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.</doc>
          <array length="0" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2197">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2198">return location for the number of returned URIs, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visited"
              c:identifier="g_bookmark_file_get_visited"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2914">Gets the time the bookmark for @uri was last visited.

In the event the URI cannot be found, -1 is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_get_visited_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2925">a timestamp.</doc>
          <type name="time_t" c:type="time_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2916">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2917">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visited_date_time"
              c:identifier="g_bookmark_file_get_visited_date_time"
              version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2940">Gets the time the bookmark for @uri was last visited.

In the event the URI cannot be found, %NULL is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="305"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2951">a #GDateTime</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2942">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2943">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_application"
              c:identifier="g_bookmark_file_has_application"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3391">Checks whether the bookmark for @uri inside @bookmark has been
registered by application @name.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3404">%TRUE if the application @name was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3393">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3394">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3395">the name of the application</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_group"
              c:identifier="g_bookmark_file_has_group"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2979">Checks whether @group appears in the list of groups to which
the bookmark for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2992">%TRUE if @group was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2981">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2982">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2983">the group name to be searched</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_item"
              c:identifier="g_bookmark_file_has_item"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2174">Looks whether the desktop bookmark has an item with its URI set to @uri.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2181">%TRUE if @uri is inside @bookmark, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2176">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2177">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="g_bookmark_file_load_from_data"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1766">Loads a bookmark file from memory into an empty #GBookmarkFile
structure.  If the object cannot be created then @error is set to a
#GBookmarkFileError.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="1778">%TRUE if a desktop bookmark could be loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1768">an empty #GBookmarkFile struct</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1769">desktop bookmarks
   loaded in memory</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1771">the length of @data in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_data_dirs"
              c:identifier="g_bookmark_file_load_from_data_dirs"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1920">This function looks for a desktop bookmark file named @file in the
paths returned from g_get_user_data_dir() and g_get_system_data_dirs(),
loads the file into @bookmark and returns the file's full path in
@full_path.  If the file could not be loaded then @error is
set to either a #GFileError or #GBookmarkFileError.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="1934">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1922">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1923">a relative path to a filename to open and parse</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
          <parameter name="full_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1924">return location for a string
   containing the full path of the file, or %NULL</doc>
            <type name="filename" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="g_bookmark_file_load_from_file"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="1811">Loads a desktop bookmark file into an empty #GBookmarkFile structure.
If the file could not be loaded then @error is set to either a #GFileError
or #GBookmarkFileError.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="1822">%TRUE if a desktop bookmark file could be loaded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1813">an empty #GBookmarkFile struct</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="1814">the path of a filename to load, in the
    GLib file name encoding</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_item"
              c:identifier="g_bookmark_file_move_item"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3929">Changes the URI of a bookmark item from @old_uri to @new_uri.  Any
existing bookmark for @new_uri will be overwritten.  If @new_uri is
%NULL, then the bookmark is removed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="331"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3943">%TRUE if the URI was successfully changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3931">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="old_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3932">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3933">a valid URI, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_application"
              c:identifier="g_bookmark_file_remove_application"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3341">Removes application registered with @name from the list of applications
that have registered a bookmark for @uri inside @bookmark.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event that no application with name @app_name has registered
a bookmark for @uri,  %FALSE is returned and error is set to
%G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="322"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3357">%TRUE if the application was successfully removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3343">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3344">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3345">the name of the application</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_group"
              c:identifier="g_bookmark_file_remove_group"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3074">Removes @group from the list of groups to which the bookmark
for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event no group was defined, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="317"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3089">%TRUE if @group was successfully removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3076">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3077">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3078">the group name to be removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_item"
              c:identifier="g_bookmark_file_remove_item"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2133">Removes the bookmark for @uri from the bookmark file @bookmark.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="327"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2141">%TRUE if the bookmark was removed successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2135">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2136">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_added"
              c:identifier="g_bookmark_file_set_added"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2586">Sets the time the bookmark for @uri was added into @bookmark.

If no bookmark for @uri is found then it is created.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_set_added_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2588">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2589">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2590">a timestamp or -1 to use the current time</doc>
            <type name="time_t" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_added_date_time"
              c:identifier="g_bookmark_file_set_added_date_time"
              version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2610">Sets the time the bookmark for @uri was added into @bookmark.

If no bookmark for @uri is found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2612">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2613">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2614">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_info"
              c:identifier="g_bookmark_file_set_app_info"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3433">Sets the meta-data of application @name inside the list of
applications that have registered a bookmark for @uri inside
@bookmark.

You should rarely use this function; use g_bookmark_file_add_application()
and g_bookmark_file_remove_application() instead.

@name can be any UTF-8 encoded string used to identify an
application.
@exec can have one of these two modifiers: "\%f", which will
be expanded as the local file name retrieved from the bookmark's
URI; "\%u", which will be expanded as the bookmark's URI.
The expansion is done automatically when retrieving the stored
command line using the g_bookmark_file_get_application_info() function.
@count is the number of times the application has registered the
bookmark; if is &lt; 0, the current registration count will be increased
by one, if is 0, the application with @name will be removed from
the list of registered applications.
@stamp is the Unix time of the last registration; if it is -1, the
current time will be used.

If you try to remove an application by setting its registration count to
zero, and no bookmark for @uri is found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
in the event that no application @name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
%G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
for @uri is found, one is created.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_set_application_info() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3472">%TRUE if the application's meta-data was successfully
  changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3435">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3436">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3437">an application's name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="exec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3438">an application's command line</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3439">the number of registrations done for this application</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="stamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3440">the time of the last registration for this application</doc>
            <type name="time_t" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_application_info"
              c:identifier="g_bookmark_file_set_application_info"
              version="2.66"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3496">Sets the meta-data of application @name inside the list of
applications that have registered a bookmark for @uri inside
@bookmark.

You should rarely use this function; use g_bookmark_file_add_application()
and g_bookmark_file_remove_application() instead.

@name can be any UTF-8 encoded string used to identify an
application.
@exec can have one of these two modifiers: "\%f", which will
be expanded as the local file name retrieved from the bookmark's
URI; "\%u", which will be expanded as the bookmark's URI.
The expansion is done automatically when retrieving the stored
command line using the g_bookmark_file_get_application_info() function.
@count is the number of times the application has registered the
bookmark; if is &lt; 0, the current registration count will be increased
by one, if is 0, the application with @name will be removed from
the list of registered applications.
@stamp is the Unix time of the last registration.

If you try to remove an application by setting its registration count to
zero, and no bookmark for @uri is found, %FALSE is returned and
@error is set to %G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
in the event that no application @name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
%G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
for @uri is found, one is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="3535">%TRUE if the application's meta-data was successfully
  changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3498">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3499">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3500">an application's name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="exec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3501">an application's command line</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3502">the number of registrations done for this application</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="stamp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3503">the time of the last registration for this application,
   which may be %NULL if @count is 0</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="g_bookmark_file_set_description"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2327">Sets @description as the description of the bookmark for @uri.

If @uri is %NULL, the description of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2329">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2330">a valid URI or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2331">a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_groups"
              c:identifier="g_bookmark_file_set_groups"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3141">Sets a list of group names for the item with URI @uri.  Each previously
set group name list is removed.

If @uri cannot be found then an item for it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3143">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3144">an item's URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="groups"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3145">an array of
   group names, or %NULL to remove all groups</doc>
            <array length="2" zero-terminated="0" c:type="const gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="3147">number of group name values in @groups</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="g_bookmark_file_set_icon"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="3998">Sets the icon for the bookmark for @uri. If @href is %NULL, unsets
the currently set icon. @href can either be a full URL for the icon
file or the icon name following the Icon Naming specification.

If no bookmark for @uri is found one is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4000">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4001">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4002">the URI of the icon for the bookmark, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="4003">the MIME type of the icon for the bookmark</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_private"
              c:identifier="g_bookmark_file_set_is_private"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2501">Sets the private flag of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2503">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2504">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="is_private" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2505">%TRUE if the bookmark should be marked as private</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime_type"
              c:identifier="g_bookmark_file_set_mime_type"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2412">Sets @mime_type as the MIME type of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2414">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2415">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2416">a MIME type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modified"
              c:identifier="g_bookmark_file_set_modified"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2711">Sets the last time the bookmark for @uri was last modified.

If no bookmark for @uri is found then it is created.

The "modified" time should only be set when the bookmark's meta-data
was actually changed.  Every function of #GBookmarkFile that
modifies a bookmark also changes the modification time, except for
g_bookmark_file_set_visited_date_time().</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_set_modified_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="277"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2713">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2714">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="modified" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2715">a timestamp or -1 to use the current time</doc>
            <type name="time_t" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modified_date_time"
              c:identifier="g_bookmark_file_set_modified_date_time"
              version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2740">Sets the last time the bookmark for @uri was last modified.

If no bookmark for @uri is found then it is created.

The "modified" time should only be set when the bookmark's meta-data
was actually changed.  Every function of #GBookmarkFile that
modifies a bookmark also changes the modification time, except for
g_bookmark_file_set_visited_date_time().</doc>
        <source-position filename="glib/gbookmarkfile.h" line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2742">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2743">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="modified" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2744">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="g_bookmark_file_set_title"
              version="2.12">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2239">Sets @title as the title of the bookmark for @uri inside the
bookmark file @bookmark.

If @uri is %NULL, the title of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2241">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2242">a valid URI or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2243">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visited"
              c:identifier="g_bookmark_file_set_visited"
              version="2.12"
              deprecated="1"
              deprecated-version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2844">Sets the time the bookmark for @uri was last visited.

If no bookmark for @uri is found then it is created.

The "visited" time should only be set if the bookmark was launched,
either using the command line retrieved by g_bookmark_file_get_application_info()
or by the default application for the bookmark's MIME type, retrieved
using g_bookmark_file_get_mime_type().  Changing the "visited" time
does not affect the "modified" time.</doc>
        <doc-deprecated xml:space="preserve">Use g_bookmark_file_set_visited_date_time() instead, as
   `time_t` is deprecated due to the year 2038 problem.</doc-deprecated>
        <source-position filename="glib/gbookmarkfile.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2846">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2847">a valid URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="visited" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2848">a timestamp or -1 to use the current time</doc>
            <type name="time_t" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visited_date_time"
              c:identifier="g_bookmark_file_set_visited_date_time"
              version="2.66">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2874">Sets the time the bookmark for @uri was last visited.

If no bookmark for @uri is found then it is created.

The "visited" time should only be set if the bookmark was launched,
either using the command line retrieved by g_bookmark_file_get_application_info()
or by the default application for the bookmark's MIME type, retrieved
using g_bookmark_file_get_mime_type().  Changing the "visited" time
does not affect the "modified" time.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2876">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2877">a valid URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="visited" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2878">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_data"
              c:identifier="g_bookmark_file_to_data"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2002">This function outputs @bookmark as a string.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2010">
  a newly allocated string holding the contents of the #GBookmarkFile</doc>
          <array length="0" zero-terminated="0" c:type="gchar*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2004">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2005">return location for the length of the returned string, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file"
              c:identifier="g_bookmark_file_to_file"
              version="2.12"
              throws="1">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.c"
             line="2036">This function outputs @bookmark into a file.  The write process is
guaranteed to be atomic by using g_file_set_contents() internally.</doc>
        <source-position filename="glib/gbookmarkfile.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbookmarkfile.c"
               line="2045">%TRUE if the file was successfully written.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bookmark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2038">a #GBookmarkFile</doc>
            <type name="BookmarkFile" c:type="GBookmarkFile*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbookmarkfile.c"
                 line="2039">path of the output file</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <function name="error_quark" c:identifier="g_bookmark_file_error_quark">
        <return-value transfer-ownership="none">
          <type name="Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </record>
    <enumeration name="BookmarkFileError"
                 c:type="GBookmarkFileError"
                 glib:error-domain="g-bookmark-file-error-quark">
      <doc xml:space="preserve"
           filename="glib/gbookmarkfile.h"
           line="45">Error codes returned by bookmark file parsing.</doc>
      <source-position filename="glib/gbookmarkfile.h" line="70"/>
      <member name="invalid_uri"
              value="0"
              c:identifier="G_BOOKMARK_FILE_ERROR_INVALID_URI">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="47">URI was ill-formed</doc>
      </member>
      <member name="invalid_value"
              value="1"
              c:identifier="G_BOOKMARK_FILE_ERROR_INVALID_VALUE">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="48">a requested field was not found</doc>
      </member>
      <member name="app_not_registered"
              value="2"
              c:identifier="G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="49">a requested application did
    not register a bookmark</doc>
      </member>
      <member name="uri_not_found"
              value="3"
              c:identifier="G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="51">a requested URI was not found</doc>
      </member>
      <member name="read" value="4" c:identifier="G_BOOKMARK_FILE_ERROR_READ">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="52">document was ill formed</doc>
      </member>
      <member name="unknown_encoding"
              value="5"
              c:identifier="G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="53">the text being parsed was
    in an unknown encoding</doc>
      </member>
      <member name="write"
              value="6"
              c:identifier="G_BOOKMARK_FILE_ERROR_WRITE">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="55">an error occurred while writing</doc>
      </member>
      <member name="file_not_found"
              value="7"
              c:identifier="G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND">
        <doc xml:space="preserve"
             filename="glib/gbookmarkfile.h"
             line="56">requested file was not found</doc>
      </member>
    </enumeration>
    <record name="ByteArray"
            c:type="GByteArray"
            glib:type-name="GByteArray"
            glib:get-type="g_byte_array_get_type"
            c:symbol-prefix="byte_array">
      <doc xml:space="preserve"
           filename="glib/garray.c"
           line="2676">Contains the public fields of a GByteArray.</doc>
      <source-position filename="glib/garray.h" line="53"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2678">a pointer to the element data. The data may be moved as
    elements are added to the #GByteArray</doc>
        <type name="guint8" c:type="guint8*"/>
      </field>
      <field name="len" writable="1">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2680">the number of elements in the #GByteArray</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <function name="append" c:identifier="g_byte_array_append">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2858">Adds the given bytes to the end of the #GByteArray.
The array will grow in size automatically if necessary.</doc>
        <source-position filename="glib/garray.h" line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2867">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2860">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2861">the byte data to be added</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2862">the number of bytes to add</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="free" c:identifier="g_byte_array_free">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2775">Frees the memory allocated by the #GByteArray. If @free_segment is
%TRUE it frees the actual byte data. If the reference count of
@array is greater than one, the #GByteArray wrapper is preserved but
the size of @array will be set to zero.</doc>
        <source-position filename="glib/garray.h" line="284"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2785">the element data if @free_segment is %FALSE, otherwise
         %NULL.  The element data should be freed using g_free().</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2777">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="free_segment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2778">if %TRUE the actual byte data is freed as well</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="free_to_bytes"
                c:identifier="g_byte_array_free_to_bytes"
                version="2.32">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2795">Transfers the data from the #GByteArray into a new immutable #GBytes.

The #GByteArray is freed unless the reference count of @array is greater
than one, the #GByteArray wrapper is preserved but the size of @array
will be set to zero.

This is identical to using g_bytes_new_take() and g_byte_array_free()
together.</doc>
        <source-position filename="glib/garray.h" line="287"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2810">a new immutable #GBytes representing same
    byte data that was in the array</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2797">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="g_byte_array_new">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2685">Creates a new #GByteArray with a reference count of 1.</doc>
        <source-position filename="glib/garray.h" line="274"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2690">the new #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
      </function>
      <function name="new_take"
                c:identifier="g_byte_array_new_take"
                version="2.32">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2720">Creates a byte array containing the @data.
After this call, @data belongs to the #GByteArray and may no longer be
modified by the caller. The memory of @data has to be dynamically
allocated and will eventually be freed with g_free().

Do not use it if @len is greater than %G_MAXUINT. #GByteArray
stores the length of its data in #guint, which may be shorter than
#gsize.</doc>
        <source-position filename="glib/garray.h" line="276"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2736">a new #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2722">byte data for the array</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2723">length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="prepend" c:identifier="g_byte_array_prepend">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2879">Adds the given data to the start of the #GByteArray.
The array will grow in size automatically if necessary.</doc>
        <source-position filename="glib/garray.h" line="297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2888">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2881">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2882">the byte data to be added</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2883">the number of bytes to add</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref" c:identifier="g_byte_array_ref" version="2.22">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2824">Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.</doc>
        <source-position filename="glib/garray.h" line="289"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2831">The passed in #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2826">A #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="remove_index" c:identifier="g_byte_array_remove_index">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2918">Removes the byte at the given index from a #GByteArray.
The following bytes are moved down one place.</doc>
        <source-position filename="glib/garray.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2926">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2920">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2921">the index of the byte to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_index_fast"
                c:identifier="g_byte_array_remove_index_fast">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2937">Removes the byte at the given index from a #GByteArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GByteArray. But it is faster
than g_byte_array_remove_index().</doc>
        <source-position filename="glib/garray.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2947">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2939">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2940">the index of the byte to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_range"
                c:identifier="g_byte_array_remove_range"
                version="2.4">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2958">Removes the given number of bytes starting at the given index from a
#GByteArray.  The following elements are moved to close the gap.</doc>
        <source-position filename="glib/garray.h" line="310"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2967">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2960">a @GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2961">the index of the first byte to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2962">the number of bytes to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_size" c:identifier="g_byte_array_set_size">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2900">Sets the size of the #GByteArray, expanding it if necessary.</doc>
        <source-position filename="glib/garray.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2907">the #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2902">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2903">the new size of the #GByteArray</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="sized_new" c:identifier="g_byte_array_sized_new">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2758">Creates a new #GByteArray with @reserved_size bytes preallocated.
This avoids frequent reallocation, if you are going to add many
bytes to the array. Note however that the size of the array is still
0.</doc>
        <source-position filename="glib/garray.h" line="282"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2767">the new #GByteArray</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="reserved_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2760">number of bytes preallocated</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="sort" c:identifier="g_byte_array_sort">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2984">Sorts a byte array, using @compare_func which should be a
qsort()-style comparison function (returns less than zero for first
arg is less than second arg, zero for equal, greater than zero if
first arg is greater than second arg).

If two array elements compare equal, their order in the sorted array
is undefined. If you want equal elements to keep their order (i.e.
you want a stable sort) you can write a comparison function that,
if two elements would otherwise compare equal, compares them by
their addresses.</doc>
        <source-position filename="glib/garray.h" line="314"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2986">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2987">comparison function</doc>
            <type name="CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="sort_with_data"
                c:identifier="g_byte_array_sort_with_data">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="3007">Like g_byte_array_sort(), but the comparison function takes an extra
user data argument.</doc>
        <source-position filename="glib/garray.h" line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="3009">a #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="3010">comparison function</doc>
            <type name="CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="3011">data to pass to @compare_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="steal" c:identifier="g_byte_array_steal" version="2.64">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2698">Frees the data in the array and resets the size to zero, while
the underlying array is preserved for use elsewhere and returned
to the caller.</doc>
        <source-position filename="glib/garray.h" line="279"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/garray.c"
               line="2708">the element data, which should be
    freed using g_free().</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2700">a #GByteArray.</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2701">pointer to retrieve the number of
   elements of the original array</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unref" c:identifier="g_byte_array_unref" version="2.22">
        <doc xml:space="preserve"
             filename="glib/garray.c"
             line="2841">Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.</doc>
        <source-position filename="glib/garray.h" line="291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/garray.c"
                 line="2843">A #GByteArray</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="Bytes"
            c:type="GBytes"
            opaque="1"
            copy-function="g_bytes_ref"
            free-function="g_bytes_unref"
            version="2.32"
            glib:type-name="GBytes"
            glib:get-type="g_bytes_get_type"
            c:symbol-prefix="bytes">
      <doc xml:space="preserve"
           filename="glib/gbytes.c"
           line="39">A simple refcounted data type representing an immutable sequence of zero or
more bytes from an unspecified origin.

The purpose of a #GBytes is to keep the memory region that it holds
alive for as long as anyone holds a reference to the bytes.  When
the last reference count is dropped, the memory is released. Multiple
unrelated callers can use byte data in the #GBytes without coordinating
their activities, resting assured that the byte data will not change or
move while they hold a reference.

A #GBytes can come from many different origins that may have
different procedures for freeing the memory region.  Examples are
memory from g_malloc(), from memory slices, from a #GMappedFile or
memory from other allocators.

#GBytes work well as keys in #GHashTable. Use g_bytes_equal() and
g_bytes_hash() as parameters to g_hash_table_new() or g_hash_table_new_full().
#GBytes can also be used as keys in a #GTree by passing the g_bytes_compare()
function to g_tree_new().

The data pointed to by this bytes must not be modified. For a mutable
array of bytes see #GByteArray. Use g_bytes_unref_to_array() to create a
mutable array for a #GBytes sequence. To create an immutable #GBytes from
a mutable #GByteArray, use the g_byte_array_free_to_bytes() function.</doc>
      <source-position filename="glib/garray.h" line="38"/>
      <constructor name="new" c:identifier="g_bytes_new" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="80">Creates a new #GBytes from @data.

@data is copied. If @size is 0, @data may be %NULL.</doc>
        <source-position filename="glib/gbytes.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="90">a new #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="82">
       the data to be used for the bytes</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="84">the size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_static"
                   c:identifier="g_bytes_new_static"
                   version="2.32"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="132">Creates a new #GBytes from static data.

@data must be static (ie: never modified or freed). It may be %NULL if @size
is 0.</doc>
        <source-position filename="glib/gbytes.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="143">a new #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="134">
       the data to be used for the bytes</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="136">the size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_take"
                   c:identifier="g_bytes_new_take"
                   version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="103">Creates a new #GBytes from @data.

After this call, @data belongs to the #GBytes and may no longer be
modified by the caller. The memory of @data has to be dynamically
allocated and will eventually be freed with g_free().

For creating #GBytes with memory from other allocators, see
g_bytes_new_with_free_func().

@data may be %NULL if @size is 0.</doc>
        <source-position filename="glib/gbytes.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="120">a new #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="105">
       the data to be used for the bytes</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="107">the size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_free_func"
                   c:identifier="g_bytes_new_with_free_func"
                   version="2.32"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="154">Creates a #GBytes from @data.

When the last reference is dropped, @free_func will be called with the
@user_data argument.

@data must not be modified after this call is made until @free_func has
been called to indicate that the bytes is no longer in use.

@data may be %NULL if @size is 0.</doc>
        <source-position filename="glib/gbytes.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="172">a new #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="156">
       the data to be used for the bytes</doc>
            <array length="1" zero-terminated="0" c:type="gconstpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="158">the size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="159">the function to call to release the data</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="160">data to pass to @free_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="g_bytes_compare" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="399">Compares the two #GBytes values.

This function can be used to sort GBytes instances in lexicographical order.

If @bytes1 and @bytes2 have different length but the shorter one is a
prefix of the longer one then the shorter one is considered to be less than
the longer one. Otherwise the first byte where both differ is used for
comparison. If @bytes1 has a smaller value at that position it is
considered less, otherwise greater than @bytes2.</doc>
        <source-position filename="glib/gbytes.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="414">a negative value if @bytes1 is less than @bytes2, a positive value
         if @bytes1 is greater than @bytes2, and zero if @bytes1 is equal to
         @bytes2</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="401">a pointer to a #GBytes</doc>
            <type name="Bytes" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="bytes2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="402">a pointer to a #GBytes to compare with @bytes1</doc>
            <type name="Bytes" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="g_bytes_equal" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="342">Compares the two #GBytes values being pointed to and returns
%TRUE if they are equal.

This function can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.</doc>
        <source-position filename="glib/gbytes.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="353">%TRUE if the two keys match.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="344">a pointer to a #GBytes</doc>
            <type name="Bytes" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="bytes2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="345">a pointer to a #GBytes to compare with @bytes1</doc>
            <type name="Bytes" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="g_bytes_get_data" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="251">Get the byte data in the #GBytes. This data should not be modified.

This function will always return the same pointer for a given #GBytes.

%NULL may be returned if @size is 0. This is not guaranteed, as the #GBytes
may represent an empty string with @data non-%NULL and @size as 0. %NULL will
not be returned if @size is non-zero.</doc>
        <source-position filename="glib/gbytes.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="264">
         a pointer to the byte data, or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="gconstpointer">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="253">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="254">location to return size of byte data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_region"
              c:identifier="g_bytes_get_region"
              version="2.70">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="542">Gets a pointer to a region in @bytes.

The region starts at @offset many bytes from the start of the data
and contains @n_elements many elements of @element_size size.

@n_elements may be zero, but @element_size must always be non-zero.
Ideally, @element_size is a static constant (eg: sizeof a struct).

This function does careful bounds checking (including checking for
arithmetic overflows) and returns a non-%NULL pointer if the
specified region lies entirely within the @bytes. If the region is
in some way out of range, or if an overflow has occurred, then %NULL
is returned.

Note: it is possible to have a valid zero-size region. In this case,
the returned pointer will be equal to the base pointer of the data of
@bytes, plus @offset.  This will be non-%NULL except for the case
where @bytes itself was a zero-sized region.  Since it is unlikely
that you will be using this function to check for a zero-sized region
in a zero-sized @bytes, %NULL effectively always means "error".</doc>
        <source-position filename="glib/gbytes.h" line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="570">the requested region, or %NULL in case of an error</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="544">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="545">a non-zero element size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="546">an offset to the start of the region within the @bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_elements" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="547">the number of elements in the region</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="g_bytes_get_size" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="279">Get the size of the byte data in the #GBytes.

This function will always return the same value for a given #GBytes.</doc>
        <source-position filename="glib/gbytes.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="287">the size</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="281">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="g_bytes_hash" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="371">Creates an integer hash code for the byte data in the #GBytes.

This function can be passed to g_hash_table_new() as the @key_hash_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.</doc>
        <source-position filename="glib/gbytes.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="380">a hash value corresponding to the key.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="373">a pointer to a #GBytes key</doc>
            <type name="Bytes" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_from_bytes"
              c:identifier="g_bytes_new_from_bytes"
              version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="196">Creates a #GBytes which is a subsection of another #GBytes. The @offset +
@length may not be longer than the size of @bytes.

A reference to @bytes will be held by the newly created #GBytes until
the byte data is no longer needed.

Since 2.56, if @offset is 0 and @length matches the size of @bytes, then
@bytes will be returned with the reference count incremented by 1. If @bytes
is a slice of another #GBytes, then the resulting #GBytes will reference
the same #GBytes instead of @bytes. This allows consumers to simplify the
usage of #GBytes when asynchronously writing to streams.</doc>
        <source-position filename="glib/gbytes.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="214">a new #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="198">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="199">offset which subsection starts at</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="200">length of subsection</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_bytes_ref" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="299">Increase the reference count on @bytes.</doc>
        <source-position filename="glib/gbytes.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="305">the #GBytes</doc>
          <type name="Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="301">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_bytes_unref" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="319">Releases a reference on @bytes.  This may result in the bytes being
freed. If @bytes is %NULL, it will return immediately.</doc>
        <source-position filename="glib/gbytes.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bytes"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="321">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref_to_array"
              c:identifier="g_bytes_unref_to_array"
              version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="510">Unreferences the bytes, and returns a new mutable #GByteArray containing
the same byte data.

As an optimization, the byte data is transferred to the array without copying
if this was the last reference to bytes and bytes was created with
g_bytes_new(), g_bytes_new_take() or g_byte_array_free_to_bytes(). In all
other cases the data is copied.

Do not use it if @bytes contains more than %G_MAXUINT
bytes. #GByteArray stores the length of its data in #guint, which
may be shorter than #gsize, that @bytes is using.</doc>
        <source-position filename="glib/gbytes.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="526">a new mutable #GByteArray containing the same byte data</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="512">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref_to_data"
              c:identifier="g_bytes_unref_to_data"
              version="2.32">
        <doc xml:space="preserve"
             filename="glib/gbytes.c"
             line="462">Unreferences the bytes, and returns a pointer the same byte data
contents.

As an optimization, the byte data is returned without copying if this was
the last reference to bytes and bytes was created with g_bytes_new(),
g_bytes_new_take() or g_byte_array_free_to_bytes(). In all other cases the
data is copied.</doc>
        <source-position filename="glib/gbytes.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gbytes.c"
               line="475">a pointer to the same byte data, which should be
         freed with g_free()</doc>
          <array length="0" zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="bytes" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="464">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*"/>
          </instance-parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gbytes.c"
                 line="465">location to place the length of the returned data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="GLIB_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gversion.c"
           line="88">Checks whether the version of the GLib library that is being compiled
against is greater than or equal to the given one.

See glib_check_version() for a runtime check.</doc>
      <source-position filename="glib/gversion.h" line="49"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="glib/gversion.c"
               line="90">the major version to check for</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="glib/gversion.c"
               line="91">the minor version to check for</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="glib/gversion.c"
               line="92">the micro version to check for</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CSET_A_2_Z"
              value="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              c:type="G_CSET_A_2_Z">
      <doc xml:space="preserve"
           filename="glib/gscanner.c"
           line="75">The set of uppercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.</doc>
      <source-position filename="glib/gscanner.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CSET_DIGITS" value="0123456789" c:type="G_CSET_DIGITS">
      <doc xml:space="preserve"
           filename="glib/gscanner.c"
           line="83">The set of ASCII digits.
Used for specifying valid identifier characters
in #GScannerConfig.</doc>
      <source-position filename="glib/gscanner.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CSET_a_2_z"
              value="abcdefghijklmnopqrstuvwxyz"
              c:type="G_CSET_a_2_z">
      <doc xml:space="preserve"
           filename="glib/gscanner.c"
           line="67">The set of lowercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.</doc>
      <source-position filename="glib/gscanner.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CXX_STD_CHECK_VERSION"
                    c:identifier="G_CXX_STD_CHECK_VERSION"
                    version="2.76"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1432">Macro to check if the current compiler supports a specified @version
of the C++ standard. Such value must be numeric and can be provided both
in the short form for the well-known versions (e.g. `11`, `17`...) or in
the complete form otherwise (e.g. `201103L`, `201703L`, `205503L`...).

When a C compiler is used, the macro is defined and returns always %FALSE.

This value is compared against %G_CXX_STD_VERSION.

|[&lt;!-- language="C" --&gt;
#if G_CXX_STD_CHECK_VERSION(20)
#endif
]|

See also: %G_C_STD_CHECK_VERSION</doc>
      <source-position filename="glib/gmacros.h" line="70"/>
      <parameters>
        <parameter name="version">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1434">The C++ version to be checked for compatibility</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="C_STD_CHECK_VERSION"
                    c:identifier="G_C_STD_CHECK_VERSION"
                    version="2.76"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1392">Macro to check if the current compiler supports a specified @version
of the C standard. Such value must be numeric and can be provided both
in the short form for the well-known versions (e.g. `90`, `99`...) or in
the complete form otherwise (e.g. `199000L`, `199901L`, `205503L`...).

When a C++ compiler is used, the macro is defined and returns always %FALSE.

This value is compared against %G_C_STD_VERSION.

|[&lt;!-- language="C" --&gt;
#if G_C_STD_CHECK_VERSION(17)
#endif
]|

See also: %G_CXX_STD_CHECK_VERSION</doc>
      <source-position filename="glib/gmacros.h" line="78"/>
      <parameters>
        <parameter name="version">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1394">The C version to be checked for compatibility</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="C_STD_VERSION"
              value="199000"
              c:type="G_C_STD_VERSION"
              version="2.76">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1376">The C standard version the code is compiling against, it's normally
defined with the same value of `__STDC_VERSION__` for C standard
compatible compilers, while it uses the lowest standard version
in pure MSVC, given that in such compiler the definition depends on
a compilation flag.

This is granted to be undefined when compiling with a C++ compiler.

See also: %G_C_STD_CHECK_VERSION and %G_CXX_STD_VERSION</doc>
      <source-position filename="glib/gmacros.h" line="75"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Cache"
            c:type="GCache"
            disguised="1"
            opaque="1"
            deprecated="1"
            deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcache.c"
           line="44">A `GCache` allows sharing of complex data structures, in order to
save system resources.

`GCache` uses keys and values. A `GCache` key describes the properties
of a particular resource. A `GCache` value is the actual resource.

`GCache` has been marked as deprecated, since this API is rarely
used and not very actively maintained.</doc>
      <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
      <source-position filename="glib/deprecated/gcache.h" line="38"/>
      <method name="destroy"
              c:identifier="g_cache_destroy"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="198">Frees the memory allocated for the #GCache.

Note that it does not destroy the keys and values which were
contained in the #GCache.</doc>
        <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="200">a #GCache</doc>
            <type name="Cache" c:type="GCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="g_cache_insert"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="219">Gets the value corresponding to the given key, creating it if
necessary. It first checks if the value already exists in the
#GCache, by using the @key_equal_func function passed to
g_cache_new(). If it does already exist it is returned, and its
reference count is increased by one. If the value does not currently
exist, if is created by calling the @value_new_func. The key is
duplicated by calling @key_dup_func and the duplicated key and value
are inserted into the #GCache.</doc>
        <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcache.c"
               line="233">a pointer to a #GCache value</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="221">a #GCache</doc>
            <type name="Cache" c:type="GCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="222">a key describing a #GCache object</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_foreach"
              c:identifier="g_cache_key_foreach"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="300">Calls the given function for each of the keys in the #GCache.

NOTE @func is passed three parameters, the value and key of a cache
entry and the @user_data. The order of value and key is different
from the order in which g_hash_table_foreach() passes key-value
pairs to its callback function !</doc>
        <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="302">a #GCache</doc>
            <type name="Cache" c:type="GCache*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="303">the function to call with each #GCache key</doc>
            <type name="HFunc" c:type="GHFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="304">user data to pass to the function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="g_cache_remove"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="263">Decreases the reference count of the given value. If it drops to 0
then the value and its corresponding key are destroyed, using the
@value_destroy_func and @key_destroy_func passed to g_cache_new().</doc>
        <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="265">a #GCache</doc>
            <type name="Cache" c:type="GCache*"/>
          </instance-parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="266">the value to remove</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="value_foreach"
              c:identifier="g_cache_value_foreach"
              deprecated="1"
              deprecated-version="2.10">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="326">Calls the given function for each of the values in the #GCache.</doc>
        <doc-deprecated xml:space="preserve">The reason is that it passes pointers to internal
   data structures to @func; use g_cache_key_foreach() instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cache" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="328">a #GCache</doc>
            <type name="Cache" c:type="GCache*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="329">the function to call with each #GCache value</doc>
            <type name="HFunc" c:type="GHFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="330">user data to pass to the function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="g_cache_new"
                introspectable="0"
                deprecated="1"
                deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="104">Creates a new #GCache.</doc>
        <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
        <source-position filename="glib/deprecated/gcache.h" line="49"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/deprecated/gcache.c"
               line="126">a new #GCache</doc>
          <type name="Cache" c:type="GCache*"/>
        </return-value>
        <parameters>
          <parameter name="value_new_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="106">a function to create a new object given a key.
                 This is called by g_cache_insert() if an object
                 with the given key does not already exist</doc>
            <type name="CacheNewFunc" c:type="GCacheNewFunc"/>
          </parameter>
          <parameter name="value_destroy_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="109">a function to destroy an object. It is called
                     by g_cache_remove() when the object is no
                     longer needed (i.e. its reference count drops
                     to 0)</doc>
            <type name="CacheDestroyFunc" c:type="GCacheDestroyFunc"/>
          </parameter>
          <parameter name="key_dup_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="113">a function to copy a key. It is called by
               g_cache_insert() if the key does not already exist in
               the #GCache</doc>
            <type name="CacheDupFunc" c:type="GCacheDupFunc"/>
          </parameter>
          <parameter name="key_destroy_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="116">a function to destroy a key. It is called by
                   g_cache_remove() when the object is no longer
                   needed (i.e. its reference count drops to 0)</doc>
            <type name="CacheDestroyFunc" c:type="GCacheDestroyFunc"/>
          </parameter>
          <parameter name="hash_key_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="119">a function to create a hash value from a key</doc>
            <type name="HashFunc" c:type="GHashFunc"/>
          </parameter>
          <parameter name="hash_value_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="120">a function to create a hash value from a value</doc>
            <type name="HashFunc" c:type="GHashFunc"/>
          </parameter>
          <parameter name="key_equal_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcache.c"
                 line="121">a function to compare two keys. It should return
                 %TRUE if the two keys are equivalent</doc>
            <type name="EqualFunc" c:type="GEqualFunc"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="CacheDestroyFunc"
              c:type="GCacheDestroyFunc"
              deprecated="1"
              deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcache.c"
           line="143">Specifies the type of the @value_destroy_func and @key_destroy_func
functions passed to g_cache_new(). The functions are passed a
pointer to the #GCache key or #GCache value and should free any
memory and other resources associated with it.</doc>
      <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
      <source-position filename="glib/deprecated/gcache.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcache.c"
               line="145">the #GCache value to destroy</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CacheDupFunc"
              c:type="GCacheDupFunc"
              deprecated="1"
              deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcache.c"
           line="155">Specifies the type of the @key_dup_func function passed to
g_cache_new(). The function is passed a key
(__not__ a value as the prototype implies) and
should return a duplicate of the key.</doc>
      <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
      <source-position filename="glib/deprecated/gcache.h" line="41"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="165">a copy of the #GCache key</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcache.c"
               line="157">the #GCache key to destroy (__not__ a
        #GCache value as it seems)</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CacheNewFunc"
              c:type="GCacheNewFunc"
              deprecated="1"
              deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcache.c"
           line="131">Specifies the type of the @value_new_func function passed to
g_cache_new(). It is passed a #GCache key and should create the
value corresponding to the key.</doc>
      <doc-deprecated xml:space="preserve">Use a #GHashTable instead</doc-deprecated>
      <source-position filename="glib/deprecated/gcache.h" line="40"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcache.c"
             line="139">a new #GCache value corresponding to the key.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcache.c"
               line="133">a #GCache key</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Checksum"
            c:type="GChecksum"
            opaque="1"
            version="2.16"
            glib:type-name="GChecksum"
            glib:get-type="g_checksum_get_type"
            c:symbol-prefix="checksum">
      <doc xml:space="preserve"
           filename="glib/gchecksum.c"
           line="35">GLib provides a generic API for computing checksums (or â€˜digestsâ€™)
for a sequence of arbitrary bytes, using various hashing algorithms
like MD5, SHA-1 and SHA-256. Checksums are commonly used in various
environments and specifications.

To create a new `GChecksum`, use [ctor@GLib.Checksum.new]. To free
a `GChecksum`, use [method@GLib.Checksum.free].

GLib supports incremental checksums using the `GChecksum` data
structure, by calling [method@GLib.Checksum.update] as long as thereâ€™s data
available and then using [method@GLib.Checksum.get_string] or
[method@GLib.Checksum.get_digest] to compute the checksum and return it
either as a string in hexadecimal form, or as a raw sequence of bytes. To
compute the checksum for binary blobs and nul-terminated strings in
one go, use the convenience functions [func@GLib.compute_checksum_for_data]
and [func@GLib.compute_checksum_for_string], respectively.</doc>
      <source-position filename="glib/gchecksum.h" line="57"/>
      <constructor name="new" c:identifier="g_checksum_new" version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1449">Creates a new #GChecksum, using the checksum algorithm @checksum_type.
If the @checksum_type is not known, %NULL is returned.
A #GChecksum can be used to compute the checksum, or digest, of an
arbitrary binary blob, using different hashing algorithms.

A #GChecksum works by feeding a binary blob through g_checksum_update()
until there is data to be checked; the digest can then be extracted
using g_checksum_get_string(), which will return the checksum as a
hexadecimal string; or g_checksum_get_digest(), which will return a
vector of raw bytes. Once either g_checksum_get_string() or
g_checksum_get_digest() have been called on a #GChecksum, the checksum
will be closed and it won't be possible to call g_checksum_update()
on it anymore.</doc>
        <source-position filename="glib/gchecksum.h" line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gchecksum.c"
               line="1467">the newly created #GChecksum, or %NULL.
  Use g_checksum_free() to free the memory allocated by it.</doc>
          <type name="Checksum" c:type="GChecksum*"/>
        </return-value>
        <parameters>
          <parameter name="checksum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1451">the desired type of checksum</doc>
            <type name="ChecksumType" c:type="GChecksumType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="g_checksum_copy" version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1527">Copies a #GChecksum. If @checksum has been closed, by calling
g_checksum_get_string() or g_checksum_get_digest(), the copied
checksum will be closed as well.</doc>
        <source-position filename="glib/gchecksum.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gchecksum.c"
               line="1535">the copy of the passed #GChecksum. Use
  g_checksum_free() when finished using it.</doc>
          <type name="Checksum" c:type="GChecksum*"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1529">the #GChecksum to copy</doc>
            <type name="Checksum" c:type="const GChecksum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="g_checksum_free" version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1555">Frees the memory allocated for @checksum.</doc>
        <source-position filename="glib/gchecksum.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1557">a #GChecksum</doc>
            <type name="Checksum" c:type="GChecksum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_digest"
              c:identifier="g_checksum_get_digest"
              version="2.16"
              introspectable="0">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1685">Gets the digest from @checksum as a raw binary vector and places it
into @buffer. The size of the digest depends on the type of checksum.

Once this function has been called, the #GChecksum is closed and can
no longer be updated with g_checksum_update().</doc>
        <source-position filename="glib/gchecksum.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1687">a #GChecksum</doc>
            <type name="Checksum" c:type="GChecksum*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1688">output buffer</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="digest_len"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1689">an inout parameter. The caller initializes it to the size of @buffer.
  After the call it contains the length of the digest.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="g_checksum_get_string"
              version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1626">Gets the digest as a hexadecimal string.

Once this function has been called the #GChecksum can no longer be
updated with g_checksum_update().

The hexadecimal characters will be lower case.</doc>
        <source-position filename="glib/gchecksum.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gchecksum.c"
               line="1637">the hexadecimal representation of the checksum. The
  returned string is owned by the checksum and should not be modified
  or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1628">a #GChecksum</doc>
            <type name="Checksum" c:type="GChecksum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="g_checksum_reset" version="2.18">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1488">Resets the state of the @checksum back to its initial state.</doc>
        <source-position filename="glib/gchecksum.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1490">the #GChecksum to reset</doc>
            <type name="Checksum" c:type="GChecksum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="g_checksum_update" version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1574">Feeds @data into an existing #GChecksum. The checksum must still be
open, that is g_checksum_get_string() or g_checksum_get_digest() must
not have been called on @checksum.</doc>
        <source-position filename="glib/gchecksum.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checksum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1576">a #GChecksum</doc>
            <type name="Checksum" c:type="GChecksum*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1577">buffer used to compute the checksum</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1578">size of the buffer, or -1 if it is a null-terminated string.</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <function name="type_get_length"
                c:identifier="g_checksum_type_get_length"
                version="2.16">
        <doc xml:space="preserve"
             filename="glib/gchecksum.c"
             line="1408">Gets the length in bytes of digests of type @checksum_type</doc>
        <source-position filename="glib/gchecksum.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gchecksum.c"
               line="1414">the checksum length, or -1 if @checksum_type is
not supported.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <parameter name="checksum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gchecksum.c"
                 line="1410">a #GChecksumType</doc>
            <type name="ChecksumType" c:type="GChecksumType"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="ChecksumType" version="2.16" c:type="GChecksumType">
      <doc xml:space="preserve"
           filename="glib/gchecksum.h"
           line="33">The hashing algorithm to be used by #GChecksum when performing the
digest of some data.

Note that the #GChecksumType enumeration may be extended at a later
date to include new hashing algorithm types.</doc>
      <source-position filename="glib/gchecksum.h" line="55"/>
      <member name="md5" value="0" c:identifier="G_CHECKSUM_MD5">
        <doc xml:space="preserve"
             filename="glib/gchecksum.h"
             line="35">Use the MD5 hashing algorithm</doc>
      </member>
      <member name="sha1" value="1" c:identifier="G_CHECKSUM_SHA1">
        <doc xml:space="preserve"
             filename="glib/gchecksum.h"
             line="36">Use the SHA-1 hashing algorithm</doc>
      </member>
      <member name="sha256" value="2" c:identifier="G_CHECKSUM_SHA256">
        <doc xml:space="preserve"
             filename="glib/gchecksum.h"
             line="37">Use the SHA-256 hashing algorithm</doc>
      </member>
      <member name="sha512" value="3" c:identifier="G_CHECKSUM_SHA512">
        <doc xml:space="preserve"
             filename="glib/gchecksum.h"
             line="39">Use the SHA-512 hashing algorithm (Since: 2.36)</doc>
      </member>
      <member name="sha384" value="4" c:identifier="G_CHECKSUM_SHA384">
        <doc xml:space="preserve"
             filename="glib/gchecksum.h"
             line="38">Use the SHA-384 hashing algorithm (Since: 2.51)</doc>
      </member>
    </enumeration>
    <callback name="ChildWatchFunc" c:type="GChildWatchFunc">
      <doc xml:space="preserve"
           filename="glib/gmain.h"
           line="234">Prototype of a #GChildWatchSource callback, called when a child
process has exited.

To interpret @wait_status, see the documentation for
[func@GLib.spawn_check_wait_status]. In particular,
on Unix platforms, note that it is usually not equal
to the integer passed to `exit()` or returned from `main()`.</doc>
      <source-position filename="glib/gmain.h" line="249"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gmain.h"
               line="236">the process id of the child process</doc>
          <type name="Pid" c:type="GPid"/>
        </parameter>
        <parameter name="wait_status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gmain.h"
               line="237">Status information about the child process, encoded
              in a platform-specific manner</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="glib/gmain.h"
               line="239">user data passed to [func@GLib.child_watch_add]</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClearHandleFunc" c:type="GClearHandleFunc" version="2.56">
      <doc xml:space="preserve"
           filename="glib/gmain.h"
           line="837">Specifies the type of function passed to [func@GLib.clear_handle_id] The
implementation is expected to free the resource identified by @handle_id;
for instance, if @handle_id is a [struct@GLib.Source] ID,
[func@GLib.Source.remove] can be used.</doc>
      <source-position filename="glib/gmain.h" line="848"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="handle_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gmain.h"
               line="839">the handle ID to clear</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CompareDataFunc" c:type="GCompareDataFunc">
      <doc xml:space="preserve"
           filename="glib/glist.c"
           line="1234">Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.</doc>
      <source-position filename="glib/gtypes.h" line="114"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="glib/glist.c"
             line="1245">negative value if @a &lt; @b; zero if @a = @b; positive
         value if @a &gt; @b</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/glist.c"
               line="1236">a value</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="b"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/glist.c"
               line="1237">a value to compare with</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="glib/glist.c"
               line="1238">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CompareFunc" c:type="GCompareFunc">
      <doc xml:space="preserve"
           filename="glib/glist.c"
           line="1203">Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.</doc>
      <source-position filename="glib/gtypes.h" line="112"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="glib/glist.c"
             line="1213">negative value if @a &lt; @b; zero if @a = @b; positive
         value if @a &gt; @b</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/glist.c"
               line="1205">a value</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="b"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/glist.c"
               line="1206">a value to compare with</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Completion"
            c:type="GCompletion"
            deprecated="1"
            deprecated-version="2.26">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcompletion.c"
           line="46">`GCompletion` provides support for automatic completion of a string
using any group of target strings. It is typically used for file
name completion as is common in many UNIX shells.

A `GCompletion` is created using [func@GLib.Completion.new]. Target items are
added and removed with [method@GLib.Completion.add_items],
[method@GLib.Completion.remove_items] and
[method@GLib.Completion.clear_items]. A completion attempt is requested with
[method@GLib.Completion.complete] or [method@GLib.Completion.complete_utf8].
When no longer needed, the `GCompletion` is freed with
[method@GLib.Completion.free].

Items in the completion can be simple strings (e.g. filenames), or
pointers to arbitrary data structures. If data structures are used
you must provide a [type@GLib.CompletionFunc] in [func@GLib.Completion.new],
which retrieves the itemâ€™s string from the data structure. You can change
the way in which strings are compared by setting a different
[type@GLib.CompletionStrncmpFunc] in [method@GLib.Completion.set_compare].

`GCompletion` has been marked as deprecated, since this API is rarely
used and not very actively maintained.</doc>
      <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
      <source-position filename="glib/deprecated/gcompletion.h" line="57"/>
      <field name="items" writable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="48">list of target items (strings or data structures).</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="func" writable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="49">function which is called to get the string associated with a
       target item. It is %NULL if the target items are strings.</doc>
        <type name="CompletionFunc" c:type="GCompletionFunc"/>
      </field>
      <field name="prefix" writable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="51">the last prefix passed to g_completion_complete() or
         g_completion_complete_utf8().</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cache" writable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="53">the list of items which begin with @prefix.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="strncmp_func" writable="1">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="54">The function to use when comparing strings.  Use
               g_completion_set_compare() to modify this function.</doc>
        <type name="CompletionStrncmpFunc" c:type="GCompletionStrncmpFunc"/>
      </field>
      <method name="add_items"
              c:identifier="g_completion_add_items"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="140">Adds items to the #GCompletion.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="142">the #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
          <parameter name="items" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="143">the list of items to add.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="clear_items"
              c:identifier="g_completion_clear_items"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="212">Removes all items from the #GCompletion. The items are not freed, so if the
memory was dynamically allocated, it should be freed after calling this
function.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="214">the #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="complete"
              c:identifier="g_completion_complete"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="332">Attempts to complete the string @prefix using the #GCompletion
target items.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="345">the list of items whose strings begin with
         @prefix. This should not be changed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="334">the #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="335">the prefix string, typically typed by the user, which is
         compared with each of the items.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="337">if non-%NULL, returns the longest prefix which is
             common to all items that matched @prefix, or %NULL if
             no items matched @prefix.  This string should be freed
             when no longer needed.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_utf8"
              c:identifier="g_completion_complete_utf8"
              version="2.4"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="279">Attempts to complete the string @prefix using the #GCompletion target items.
In contrast to g_completion_complete(), this function returns the largest common
prefix that is a valid UTF-8 string, omitting a possible common partial
character.

You should use this function instead of g_completion_complete() if your
items are UTF-8 strings.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="296">the list of items whose strings begin with @prefix. This should
not be changed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="281">the #GCompletion</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="282">the prefix string, typically used by the user, which is compared
   with each of the items</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="284">if non-%NULL, returns the longest prefix which is common to all
   items that matched @prefix, or %NULL if no items matched @prefix.
   This string should be freed when no longer needed.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="g_completion_free"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="412">Frees all memory used by the #GCompletion. The items are not freed, so if
the memory was dynamically allocated, it should be freed after calling this
function.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="414">the #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_items"
              c:identifier="g_completion_remove_items"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="178">Removes items from a #GCompletion. The items are not freed, so if the memory
was dynamically allocated, free @items with g_list_free_full() after calling
this function.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="180">the #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
          <parameter name="items" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="181">the items to remove.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_compare"
              c:identifier="g_completion_set_compare"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="431">Sets the function to use for string comparisons. The default string
comparison function is strncmp().</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cmp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="433">a #GCompletion.</doc>
            <type name="Completion" c:type="GCompletion*"/>
          </instance-parameter>
          <parameter name="strncmp_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="434">the string comparison function.</doc>
            <type name="CompletionStrncmpFunc"
                  c:type="GCompletionStrncmpFunc"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="g_completion_new"
                introspectable="0"
                deprecated="1"
                deprecated-version="2.26">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="114">Creates a new #GCompletion.</doc>
        <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
        <source-position filename="glib/deprecated/gcompletion.h" line="60"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="122">the new #GCompletion.</doc>
          <type name="Completion" c:type="GCompletion*"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gcompletion.c"
                 line="116">the function to be called to return the string representing
       an item in the #GCompletion, or %NULL if strings are going to
       be used as the #GCompletion items.</doc>
            <type name="CompletionFunc" c:type="GCompletionFunc"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="CompletionFunc"
              c:type="GCompletionFunc"
              deprecated="1"
              deprecated-version="2.26">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcompletion.c"
           line="82">Specifies the type of the function passed to g_completion_new(). It
should return the string corresponding to the given target item.
This is used when you use data structures as #GCompletion items.</doc>
      <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
      <source-position filename="glib/deprecated/gcompletion.h" line="40"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="90">the string corresponding to the item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="item"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="84">the completion item.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CompletionStrncmpFunc"
              c:type="GCompletionStrncmpFunc"
              deprecated="1"
              deprecated-version="2.26">
      <doc xml:space="preserve"
           filename="glib/deprecated/gcompletion.c"
           line="94">Specifies the type of the function passed to
g_completion_set_compare(). This is used when you use strings as
#GCompletion items.</doc>
      <doc-deprecated xml:space="preserve">Rarely used API</doc-deprecated>
      <source-position filename="glib/deprecated/gcompletion.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="glib/deprecated/gcompletion.c"
             line="104">an integer less than, equal to, or greater than zero if
         the first @n bytes of @s1 is found, respectively, to be
         less than, to match, or to be greater than the first @n
         bytes of @s2.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="s1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="96">string to compare with @s2.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="s2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="97">string to compare with @s1.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gcompletion.c"
               line="98">maximal number of bytes to compare.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Cond" c:type="GCond">
      <doc xml:space="preserve"
           filename="glib/gthread.c"
           line="362">The #GCond struct is an opaque data structure that represents a
condition. Threads can block on a #GCond if they find a certain
condition to be false. If other threads change the state of this
condition they signal the #GCond, and that causes the waiting
threads to be woken up.

Consider the following example of a shared variable.  One or more
threads can wait for data to be published to the variable and when
another thread publishes the data, it can signal one of the waiting
threads to wake up to collect the data.

Here is an example for using GCond to block a thread until a condition
is satisfied:
|[&lt;!-- language="C" --&gt;
  gpointer current_data = NULL;
  GMutex data_mutex;
  GCond data_cond;

  void
  push_data (gpointer data)
  {
    g_mutex_lock (&amp;data_mutex);
    current_data = data;
    g_cond_signal (&amp;data_cond);
    g_mutex_unlock (&amp;data_mutex);
  }

  gpointer
  pop_data (void)
  {
    gpointer data;

    g_mutex_lock (&amp;data_mutex);
    while (!current_data)
      g_cond_wait (&amp;data_cond, &amp;data_mutex);
    data = current_data;
    current_data = NULL;
    g_mutex_unlock (&amp;data_mutex);

    return data;
  }
]|
Whenever a thread calls pop_data() now, it will wait until
current_data is non-%NULL, i.e. until some other thread
has called push_data().

The example shows that use of a condition variable must always be
paired with a mutex.  Without the use of a mutex, there would be a
race between the check of @current_data by the while loop in
pop_data() and waiting. Specifically, another thread could set
@current_data after the check, and signal the cond (with nobody
waiting on it) before the first thread goes to sleep. #GCond is
specifically useful for its ability to release the mutex and go
to sleep atomically.

It is also important to use the g_cond_wait() and g_cond_wait_until()
functions only inside a loop which checks for the condition to be
true.  See g_cond_wait() for an explanation of why the condition may
not be true even after it returns.

If a #GCond is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call g_cond_init()
on it and g_cond_clear() when done.

A #GCond should only be accessed via the g_cond_ functions.</doc>
      <source-position filename="glib/gthread.h" line="79"/>
      <field name="p" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="i" readable="0" private="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <method name="broadcast" c:identifier="g_cond_broadcast">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1683">If threads are waiting for @cond, all of them are unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to lock the same mutex as the waiting threads
while calling this function, though not required.</doc>
        <source-position filename="glib/gthread.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1685">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="g_cond_clear" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1621">Frees the resources allocated to a #GCond with g_cond_init().

This function should not be used with a #GCond that has been
statically allocated.

Calling g_cond_clear() for a #GCond on which threads are
blocking leads to undefined behaviour.</doc>
        <source-position filename="glib/gthread.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1623">an initialised #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="g_cond_free"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gthread-deprecated.c"
             line="1508">Destroys a #GCond that has been created with g_cond_new().

Calling g_cond_free() for a #GCond on which threads are
blocking leads to undefined behaviour.</doc>
        <doc-deprecated xml:space="preserve">GCond can now be statically allocated, or embedded
in structures and initialised with g_cond_init().</doc-deprecated>
        <source-position filename="glib/deprecated/gthread.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gthread-deprecated.c"
                 line="1510">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="g_cond_init" version="2.32">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1597">Initialises a #GCond so that it can be used.

This function is useful to initialise a #GCond that has been
allocated as part of a larger structure.  It is not necessary to
initialise a #GCond that has been statically allocated.

To undo the effect of g_cond_init() when a #GCond is no longer
needed, use g_cond_clear().

Calling g_cond_init() on an already-initialised #GCond leads
to undefined behaviour.</doc>
        <source-position filename="glib/gthread.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1599">an uninitialized #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="signal" c:identifier="g_cond_signal">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1668">If threads are waiting for @cond, at least one of them is unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to hold the same lock as the waiting thread
while calling this function, though not required.</doc>
        <source-position filename="glib/gthread.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1670">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="timed_wait"
              c:identifier="g_cond_timed_wait"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gthread-deprecated.c"
             line="1527">Waits until this thread is woken up on @cond, but not longer than
until the time specified by @abs_time. The @mutex is unlocked before
falling asleep and locked again before resuming.

If @abs_time is %NULL, g_cond_timed_wait() acts like g_cond_wait().

This function can be used even if g_thread_init() has not yet been
called, and, in that case, will immediately return %TRUE.

To easily calculate @abs_time a combination of g_get_real_time()
and g_time_val_add() can be used.</doc>
        <doc-deprecated xml:space="preserve">Use g_cond_wait_until() instead.</doc-deprecated>
        <source-position filename="glib/deprecated/gthread.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/deprecated/gthread-deprecated.c"
               line="1545">%TRUE if @cond was signalled, or %FALSE on timeout</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gthread-deprecated.c"
                 line="1529">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
          <parameter name="mutex" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gthread-deprecated.c"
                 line="1530">a #GMutex that is currently locked</doc>
            <type name="Mutex" c:type="GMutex*"/>
          </parameter>
          <parameter name="abs_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/deprecated/gthread-deprecated.c"
                 line="1531">a #GTimeVal, determining the final time</doc>
            <type name="TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait" c:identifier="g_cond_wait">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1641">Atomically releases @mutex and waits until @cond is signalled.
When this function returns, @mutex is locked again and owned by the
calling thread.

When using condition variables, it is possible that a spurious wakeup
may occur (ie: g_cond_wait() returns even though g_cond_signal() was
not called).  It's also possible that a stolen wakeup may occur.
This is when g_cond_signal() is called, but another thread acquires
@mutex before this thread and modifies the state of the program in
such a way that when g_cond_wait() is able to return, the expected
condition is no longer met.

For this reason, g_cond_wait() must always be used in a loop.  See
the documentation for #GCond for a complete example.</doc>
        <source-position filename="glib/gthread.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1643">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
          <parameter name="mutex" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1644">a #GMutex that is currently locked</doc>
            <type name="Mutex" c:type="GMutex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_until"
              c:identifier="g_cond_wait_until"
              version="2.32">
        <doc xml:space="preserve"
             filename="glib/gthread.c"
             line="1698">Waits until either @cond is signalled or @end_time has passed.

As with g_cond_wait() it is possible that a spurious or stolen wakeup
could occur.  For that reason, waiting on a condition variable should
always be in a loop, based on an explicitly-checked predicate.

%TRUE is returned if the condition variable was signalled (or in the
case of a spurious wakeup).  %FALSE is returned if @end_time has
passed.

The following code shows how to correctly perform a timed wait on a
condition variable (extending the example presented in the
documentation for #GCond):

|[&lt;!-- language="C" --&gt;
gpointer
pop_data_timed (void)
{
  gint64 end_time;
  gpointer data;

  g_mutex_lock (&amp;data_mutex);

  end_time = g_get_monotonic_time () + 5 * G_TIME_SPAN_SECOND;
  while (!current_data)
    if (!g_cond_wait_until (&amp;data_cond, &amp;data_mutex, end_time))
      {
        // timeout has passed.
        g_mutex_unlock (&amp;data_mutex);
        return NULL;
      }

  // there is data for us
  data = current_data;
  current_data = NULL;

  g_mutex_unlock (&amp;data_mutex);

  return data;
}
]|

Notice that the end time is calculated once, before entering the
loop and reused.  This is the motivation behind the use of absolute
time on this API -- if a relative time of 5 seconds were passed
directly to the call and a spurious wakeup occurred, the program would
have to start over waiting again (which would lead to a total wait
time of more than 5 seconds).</doc>
        <source-position filename="glib/gthread.h" line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gthread.c"
               line="1753">%TRUE on a signal, %FALSE on a timeout</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1700">a #GCond</doc>
            <type name="Cond" c:type="GCond*"/>
          </instance-parameter>
          <parameter name="mutex" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1701">a #GMutex that is currently locked</doc>
            <type name="Mutex" c:type="GMutex*"/>
          </parameter>
          <parameter name="end_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gthread.c"
                 line="1702">the monotonic time to wait until</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="g_cond_new"
                introspectable="0"
                deprecated="1"
                deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="glib/deprecated/gthread-deprecated.c"
             line="1487">Allocates and initializes a new #GCond.</doc>
        <doc-deprecated xml:space="preserve">GCond can now be statically allocated, or embedded
in structures and initialised with g_cond_init().</doc-deprecated>
        <source-position filename="glib/deprecated/gthread.h" line="287"/>
        <return-value>
          <doc xml:space="preserve"
               filename="glib/deprecated/gthread-deprecated.c"
               line="1492">a newly allocated #GCond. Free with g_cond_free()</doc>
          <type name="Cond" c:type="GCond*"/>
        </return-value>
      </function>
    </record>
    <enumeration name="ConvertError"
                 c:type="GConvertError"
                 glib:error-domain="g_convert_error">
      <doc xml:space="preserve"
           filename="glib/gconvert.h"
           line="38">Error codes returned by character set conversion routines.</doc>
      <source-position filename="glib/gconvert.h" line="66"/>
      <member name="no_conversion"
              value="0"
              c:identifier="G_CONVERT_ERROR_NO_CONVERSION">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="40">Conversion between the requested character
    sets is not supported.</doc>
      </member>
      <member name="illegal_sequence"
              value="1"
              c:identifier="G_CONVERT_ERROR_ILLEGAL_SEQUENCE">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="42">Invalid byte sequence in conversion input;
   or the character sequence could not be represented in the target
   character set.</doc>
      </member>
      <member name="failed" value="2" c:identifier="G_CONVERT_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="45">Conversion failed for some reason.</doc>
      </member>
      <member name="partial_input"
              value="3"
              c:identifier="G_CONVERT_ERROR_PARTIAL_INPUT">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="46">Partial character sequence at end of input.</doc>
      </member>
      <member name="bad_uri" value="4" c:identifier="G_CONVERT_ERROR_BAD_URI">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="47">URI is invalid.</doc>
      </member>
      <member name="not_absolute_path"
              value="5"
              c:identifier="G_CONVERT_ERROR_NOT_ABSOLUTE_PATH">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="48">Pathname is not an absolute path.</doc>
      </member>
      <member name="no_memory"
              value="6"
              c:identifier="G_CONVERT_ERROR_NO_MEMORY">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="49">No memory available. Since: 2.40</doc>
      </member>
      <member name="embedded_nul"
              value="7"
              c:identifier="G_CONVERT_ERROR_EMBEDDED_NUL">
        <doc xml:space="preserve"
             filename="glib/gconvert.h"
             line="50">An embedded NUL character is present in
    conversion output where a NUL-terminated string is expected.
    Since: 2.56</doc>
      </member>
    </enumeration>
    <callback name="CopyFunc" c:type="GCopyFunc" version="2.4">
      <doc xml:space="preserve"
           filename="glib/gtypes.h"
           line="148">A function of this signature is used to copy the node data
when doing a deep-copy of a tree.</doc>
      <source-position filename="glib/gtypes.h" line="160"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="glib/gtypes.h"
             line="156">A pointer to the copy</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gtypes.h"
               line="150">A pointer to the data which should be copied</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/gtypes.h"
               line="151">Additional data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="DATALIST_FLAGS_MASK"
              value="3"
              c:type="G_DATALIST_FLAGS_MASK">
      <doc xml:space="preserve"
           filename="glib/gdataset.h"
           line="86">A bitmask that restricts the possible flags passed to
g_datalist_set_flags(). Passing a flags value where
flags &amp; ~G_DATALIST_FLAGS_MASK != 0 is an error.</doc>
      <source-position filename="glib/gdataset.h" line="93"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATE_BAD_DAY" value="0" c:type="G_DATE_BAD_DAY">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="234">Represents an invalid #GDateDay.</doc>
      <source-position filename="glib/gdate.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATE_BAD_JULIAN" value="0" c:type="G_DATE_BAD_JULIAN">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="240">Represents an invalid Julian day number.</doc>
      <source-position filename="glib/gdate.h" line="83"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DATE_BAD_YEAR" value="0" c:type="G_DATE_BAD_YEAR">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="246">Represents an invalid year.</doc>
      <source-position filename="glib/gdate.h" line="85"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="DEBUG_HERE"
                    c:identifier="G_DEBUG_HERE"
                    version="2.50"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gmessages.h"
           line="268">A convenience form of g_log_structured(), recommended to be added to
functions when debugging. It prints the current monotonic time and the code
location using %G_STRLOC.</doc>
      <source-position filename="glib/gmessages.h" line="277"/>
    </function-macro>
    <function-macro name="DEFINE_AUTOPTR_CLEANUP_FUNC"
                    c:identifier="G_DEFINE_AUTOPTR_CLEANUP_FUNC"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1749">Defines the appropriate cleanup function for a pointer type.

The function will not be called if the variable to be cleaned up
contains %NULL.

This will typically be the `_free()` or `_unref()` function for the given
type.

With this definition, it will be possible to use g_autoptr() with
@TypeName.

|[
G_DEFINE_AUTOPTR_CLEANUP_FUNC(GObject, g_object_unref)
]|

This macro should be used unconditionally; it is a no-op on compilers
where cleanup is not supported.</doc>
      <source-position filename="glib/gmacros.h" line="1385"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1751">a type name to define a g_autoptr() cleanup function for</doc>
        </parameter>
        <parameter name="func">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1752">the cleanup function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_AUTO_CLEANUP_CLEAR_FUNC"
                    c:identifier="G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1775">Defines the appropriate cleanup function for a type.

This will typically be the `_clear()` function for the given type.

With this definition, it will be possible to use g_auto() with
@TypeName.

|[
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC(GQueue, g_queue_clear)
]|

This macro should be used unconditionally; it is a no-op on compilers
where cleanup is not supported.</doc>
      <source-position filename="glib/gmacros.h" line="1386"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1777">a type name to define a g_auto() cleanup function for</doc>
        </parameter>
        <parameter name="func">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1778">the clear function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_AUTO_CLEANUP_FREE_FUNC"
                    c:identifier="G_DEFINE_AUTO_CLEANUP_FREE_FUNC"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="1797">Defines the appropriate cleanup function for a type.

With this definition, it will be possible to use g_auto() with
@TypeName.

This function will be rarely used.  It is used with pointer-based
typedefs and non-pointer types where the value of the variable
represents a resource that must be freed.  Two examples are #GStrv
and file descriptors.

@none specifies the "none" value for the type in question.  It is
probably something like %NULL or `-1`.  If the variable is found to
contain this value then the free function will not be called.

|[
G_DEFINE_AUTO_CLEANUP_FREE_FUNC(GStrv, g_strfreev, NULL)
]|

This macro should be used unconditionally; it is a no-op on compilers
where cleanup is not supported.</doc>
      <source-position filename="glib/gmacros.h" line="1387"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1799">a type name to define a g_auto() cleanup function for</doc>
        </parameter>
        <parameter name="func">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1800">the free function</doc>
        </parameter>
        <parameter name="none">
          <doc xml:space="preserve"
               filename="glib/docs.c"
               line="1801">the "none" value for the type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_EXTENDED_ERROR"
                    c:identifier="G_DEFINE_EXTENDED_ERROR"
                    version="2.68"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gerror.h"
           line="52">A convenience macro which defines two functions. First, returning
the #GQuark for the extended error type @ErrorType; it is called
`error_type_quark()`. Second, returning the private data from a
passed #GError; it is called `error_type_get_private()`.

For this macro to work, a type named `ErrorTypePrivate` should be
defined, `error_type_private_init()`, `error_type_private_copy()`
and `error_type_private_clear()` functions need to be either
declared or defined. The functions should be similar to
#GErrorInitFunc, #GErrorCopyFunc and #GErrorClearFunc,
respectively, but they should receive the private data type instead
of #GError.

See [Extended #GError Domains][gerror-extended-domains] for an example.</doc>
      <source-position filename="glib/gerror.h" line="74"/>
      <parameters>
        <parameter name="ErrorType">
          <doc xml:space="preserve"
               filename="glib/gerror.h"
               line="54">name to return a #GQuark for</doc>
        </parameter>
        <parameter name="error_type">
          <doc xml:space="preserve"
               filename="glib/gerror.h"
               line="55">prefix for the function name</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_QUARK"
                    c:identifier="G_DEFINE_QUARK"
                    version="2.34"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="glib/gquark.c"
           line="101">A convenience macro which defines a function returning the
#GQuark for the name @QN. The function will be named
@q_n_quark().

Note that the quark name will be stringified automatically
in the macro, so you shouldn't use double quotes.</doc>
      <source-position filename="glib/gquark.h" line="51"/>
      <parameters>
        <parameter name="QN">
          <doc xml:space="preserve"
               filename="glib/gquark.c"
               line="103">the name to return a #GQuark for</doc>
        </parameter>
        <parameter name="q_n">
          <doc xml:space="preserve"
               filename="glib/gquark.c"
               line="104">prefix for the function name</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_FOR"
                    introspectable="0">
      <source-position filename="glib/gmacros.h" line="1291"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_26_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="42"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_28_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="76"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_30_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="110"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_32_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="144"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_34_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="178"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_36_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="212"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_38_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="246"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_40_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="280"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_42_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="314"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_44_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="348"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_46_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="382"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_48_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="416"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_50_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="450"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_52_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="484"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_54_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="518"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_56_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="552"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_58_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="586"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_60_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="620"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_62_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="654"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_64_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="688"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_66_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="722"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_68_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="756"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_70_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="790"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_72_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="824"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_74_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="858"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_76_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="892"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_78_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="926"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_80_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="960"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_82_FOR"
                    c:identifier="GLIB_DEPRECATED_ENUMERATOR_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="994"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="GLIB_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="26"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_26_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="38"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_28_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="72"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_30_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="106"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_32_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="140"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_34_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="174"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_36_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="208"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_38_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="242"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_40_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="276"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_42_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="310"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_44_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="344"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_46_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="378"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_48_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="412"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_50_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="446"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_52_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="480"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_54_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="514"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_56_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="548"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_58_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="582"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_60_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="616"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_62_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="650"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_64_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="684"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_66_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="718"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_68_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="752"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_70_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="786"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_72_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="820"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_74_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="854"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_76_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="888"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_78_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="922"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_80_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="956"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_82_FOR"
                    c:identifier="GLIB_DEPRECATED_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="990"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_FOR"
                    introspectable="0">
      <source-position filename="glib/gmacros.h" line="1277"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_26_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="40"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_28_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="74"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_30_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="108"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_32_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="142"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_34_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="176"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_36_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="210"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_38_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="244"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_40_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="278"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_42_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="312"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_44_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="346"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_46_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="380"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_48_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="414"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_50_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="448"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_52_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="482"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_54_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="516"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_56_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="550"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_58_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="584"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_60_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="618"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_62_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="652"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_64_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="686"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_66_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="720"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_68_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="754"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_70_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="788"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_72_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="822"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_74_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="856"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_76_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="890"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_78_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="924"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_80_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="958"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_82_FOR"
                    c:identifier="GLIB_DEPRECATED_MACRO_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="992"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_FOR"
                    introspectable="0">
      <source-position filename="glib/gmacros.h" line="1303"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_26_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="44"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_28_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="78"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_30_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="112"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_32_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="146"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_34_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="180"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_36_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="214"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_38_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="248"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_40_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="282"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_42_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="316"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_44_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="350"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_46_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="384"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_48_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="418"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_50_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="452"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_52_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="486"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_54_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="520"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_56_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="554"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_58_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="588"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_60_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="622"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_62_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="656"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_64_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="690"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_66_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="724"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_68_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="758"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_70_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="792"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_72_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="826"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_74_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="860"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_76_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="894"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_78_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="928"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_80_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="962"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_82_FOR"
                    c:identifier="GLIB_DEPRECATED_TYPE_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="glib/glib-visibility.h" line="996"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DIR_SEPARATOR" value="47" c:type="G_DIR_SEPARATOR">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="882">The directory separator character.
This is '/' on UNIX machines and '\' under Windows.</doc>
      <source-position filename="glib/glibconfig.h" line="212"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIR_SEPARATOR_S" value="/" c:type="G_DIR_SEPARATOR_S">
      <doc xml:space="preserve"
           filename="glib/docs.c"
           line="889">The directory separator as a string.
This is "/" on UNIX machines and "\" under Windows.</doc>
      <source-position filename="glib/glibconfig.h" line="213"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="Data" c:type="GData" disguised="1" opaque="1">
      <doc xml:space="preserve"
           filename="glib/gdataset.c"
           line="52">An opaque data structure that represents a keyed data list.

See also: [Keyed data lists](datalist-and-dataset.html).</doc>
      <source-position filename="glib/gdataset.h" line="38"/>
    </record>
    <callback name="DataForeachFunc" c:type="GDataForeachFunc">
      <doc xml:space="preserve"
           filename="glib/gdataset.c"
           line="1267">Specifies the type of function passed to g_dataset_foreach(). It is
called with each #GQuark id and associated data element, together
with the @user_data parameter supplied to g_dataset_foreach().</doc>
      <source-position filename="glib/gdataset.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdataset.c"
               line="1269">the #GQuark id to identifying the data element.</doc>
          <type name="Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/gdataset.c"
               line="1270">the data element.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="glib/gdataset.c"
               line="1271">user data passed to g_dataset_foreach().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Date"
            c:type="GDate"
            glib:type-name="GDate"
            glib:get-type="g_date_get_type"
            c:symbol-prefix="date">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="62">`GDate` is a struct for calendrical calculations.

The `GDate` data structure represents a day between January 1, Year 1,
and sometime a few thousand years in the future (right now it will go
to the year 65535 or so, but [method@GLib.Date.set_parse] only parses up to the
year 8000 or so - just count on "a few thousand"). `GDate` is meant to
represent everyday dates, not astronomical dates or historical dates
or ISO timestamps or the like. It extrapolates the current Gregorian
calendar forward and backward in time; there is no attempt to change
the calendar to match time periods or locations. `GDate` does not store
time information; it represents a day.

The `GDate` implementation has several nice features; it is only a
64-bit struct, so storing large numbers of dates is very efficient. It
can keep both a Julian and day-month-year representation of the date,
since some calculations are much easier with one representation or the
other. A Julian representation is simply a count of days since some
fixed day in the past; for #GDate the fixed day is January 1, 1 AD.
("Julian" dates in the #GDate API aren't really Julian dates in the
technical sense; technically, Julian dates count from the start of the
Julian period, Jan 1, 4713 BC).

`GDate` is simple to use. First you need a "blank" date; you can get a
dynamically allocated date from [ctor@GLib.Date.new], or you can declare an
automatic variable or array and initialize it by calling [method@GLib.Date.clear].
A cleared date is safe; it's safe to call [method@GLib.Date.set_dmy] and the other
mutator functions to initialize the value of a cleared date. However, a cleared date
is initially invalid, meaning that it doesn't represent a day that exists.
It is undefined to call any of the date calculation routines on an invalid date.
If you obtain a date from a user or other unpredictable source, you should check
its validity with the [method@GLib.Date.valid] predicate. [method@GLib.Date.valid]
is also used to check for errors with [method@GLib.Date.set_parse] and other functions
that can fail. Dates can be invalidated by calling [method@GLib.Date.clear] again.

It is very important to use the API to access the `GDate` struct. Often only the
day-month-year or only the Julian representation is valid. Sometimes neither is valid.
Use the API.

GLib also features `GDateTime` which represents a precise time.</doc>
      <source-position filename="glib/gdate.h" line="107"/>
      <field name="julian_days" writable="1" bits="32">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="64">the Julian representation of the date</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="julian" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="65">this bit is set if @julian_days is valid</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="dmy" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="66">this is set if @day, @month and @year are valid</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="day" writable="1" bits="6">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="67">the day of the day-month-year representation of the date,
  as a number between 1 and 31</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="month" writable="1" bits="4">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="69">the month of the day-month-year representation of the date,
  as a number between 1 and 12</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="year" writable="1" bits="16">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="71">the year of the day-month-year representation of the date</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="g_date_new">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="252">Allocates a #GDate and initializes
it to a safe state. The new date will
be cleared (as if you'd called g_date_clear()) but invalid (it won't
represent an existing day). Free the return value with g_date_free().</doc>
        <source-position filename="glib/gdate.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="260">a newly-allocated #GDate</doc>
          <type name="Date" c:type="GDate*"/>
        </return-value>
      </constructor>
      <constructor name="new_dmy" c:identifier="g_date_new_dmy">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="270">Create a new #GDate representing the given day-month-year triplet.

The triplet you pass in must represent a valid date. Use g_date_valid_dmy()
if needed to validate it. The returned #GDate is guaranteed to be non-%NULL
and valid.</doc>
        <source-position filename="glib/gdate.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="282">a newly-allocated #GDate
  initialized with @day, @month, and @year</doc>
          <type name="Date" c:type="GDate*"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="272">day of the month</doc>
            <type name="DateDay" c:type="GDateDay"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="273">month of the year</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="274">year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_julian" c:identifier="g_date_new_julian">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="307">Create a new #GDate representing the given Julian date.

The @julian_day you pass in must be valid. Use g_date_valid_julian() if
needed to validate it. The returned #GDate is guaranteed to be non-%NULL and
valid.</doc>
        <source-position filename="glib/gdate.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="317">a newly-allocated #GDate initialized
  with @julian_day</doc>
          <type name="Date" c:type="GDate*"/>
        </return-value>
        <parameters>
          <parameter name="julian_day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="309">days since January 1, Year 1</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_days" c:identifier="g_date_add_days">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1692">Increments a date some number of days.
To move forward by weeks, add weeks*7 days.
The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1694">a #GDate to increment</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_days" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1695">number of days to move the date forward</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_months" c:identifier="g_date_add_months">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1742">Increments a date by some number of months.
If the day of the month is greater than 28,
this routine may change the day of the month
(because the destination month may not have
the current day in it). The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1744">a #GDate to increment</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_months" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1745">number of months to move forward</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_years" c:identifier="g_date_add_years">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1837">Increments a date by some number of years.
If the date is February 29, and the destination
year is not a leap year, the date will be changed
to February 28. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1839">a #GDate to increment</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_years" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1840">number of years to move forward</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="clamp" c:identifier="g_date_clamp">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="2127">If @date is prior to @min_date, sets @date equal to @min_date.
If @date falls after @max_date, sets @date equal to @max_date.
Otherwise, @date is unchanged.
Either of @min_date and @max_date may be %NULL.
All non-%NULL dates must be valid.</doc>
        <source-position filename="glib/gdate.h" line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2129">a #GDate to clamp</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="min_date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2130">minimum accepted value for @date</doc>
            <type name="Date" c:type="const GDate*"/>
          </parameter>
          <parameter name="max_date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2131">maximum accepted value for @date</doc>
            <type name="Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="g_date_clear">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="860">Initializes one or more #GDate structs to a safe but invalid
state. The cleared dates will not represent an existing date, but will
not contain garbage. Useful to init a date declared on the stack.
Validity can be tested with g_date_valid().</doc>
        <source-position filename="glib/gdate.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="862">pointer to one or more dates to clear</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_dates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="863">number of dates to clear</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="g_date_compare">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="2022">qsort()-style comparison function for dates.
Both dates must be valid.</doc>
        <source-position filename="glib/gdate.h" line="262"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="2030">0 for equal, less than zero if @lhs is less than @rhs,
    greater than zero if @lhs is greater than @rhs</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="lhs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2024">first date to compare</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
          <parameter name="rhs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2025">second date to compare</doc>
            <type name="Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="g_date_copy" version="2.56">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="352">Copies a GDate to a newly-allocated GDate. If the input was invalid
(as determined by g_date_valid()), the invalid state will be copied
as is into the new object.</doc>
        <source-position filename="glib/gdate.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="360">a newly-allocated #GDate initialized from @date</doc>
          <type name="Date" c:type="GDate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="354">a #GDate to copy</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="days_between" c:identifier="g_date_days_between">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="839">Computes the number of days between two dates.
If @date2 is prior to @date1, the returned value is negative.
Both dates must be valid.</doc>
        <source-position filename="glib/gdate.h" line="257"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="848">the number of days between @date1 and @date2</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="date1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="841">the first date</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
          <parameter name="date2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="842">the second date</doc>
            <type name="Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="g_date_free">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="338">Frees a #GDate returned from g_date_new().</doc>
        <source-position filename="glib/gdate.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="340">a #GDate to free</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day" c:identifier="g_date_get_day">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="663">Returns the day of the month. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="669">day of the month</doc>
          <type name="DateDay" c:type="GDateDay"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="665">a #GDate to extract the day of the month from</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day_of_year" c:identifier="g_date_get_day_of_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="708">Returns the day of the year, where Jan 1 is the first day of the
year. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="715">day of the year</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="710">a #GDate to extract day of year from</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iso8601_week_of_year"
              c:identifier="g_date_get_iso8601_week_of_year"
              version="2.6">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="803">Returns the week of the year, where weeks are interpreted according
to ISO 8601.</doc>
        <source-position filename="glib/gdate.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="810">ISO 8601 week number of the year.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="805">a valid #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_julian" c:identifier="g_date_get_julian">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="684">Returns the Julian day or "serial number" of the #GDate. The
Julian day is simply the number of days since January 1, Year 1; i.e.,
January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,
etc. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="693">Julian day</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="686">a #GDate to extract the Julian day from</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monday_week_of_year"
              c:identifier="g_date_get_monday_week_of_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="734">Returns the week of the year, where weeks are understood to start on
Monday. If the date is before the first Monday of the year, return 0.
The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="742">week of the year</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="736">a #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_month" c:identifier="g_date_get_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="621">Returns the month of the year. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="627">month of the year as a #GDateMonth</doc>
          <type name="DateMonth" c:type="GDateMonth"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="623">a #GDate to get the month from</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sunday_week_of_year"
              c:identifier="g_date_get_sunday_week_of_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="768">Returns the week of the year during which this date falls, if
weeks are understood to begin on Sunday. The date must be valid.
Can return 0 if the day is before the first Sunday of the year.</doc>
        <source-position filename="glib/gdate.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="776">week number</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="770">a #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weekday" c:identifier="g_date_get_weekday">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="600">Returns the day of the week for a #GDate. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="606">day of the week as a #GDateWeekday.</doc>
          <type name="DateWeekday" c:type="GDateWeekday"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="602">a #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_year" c:identifier="g_date_get_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="642">Returns the year of a #GDate. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="648">year in which the date falls</doc>
          <type name="DateYear" c:type="GDateYear"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="644">a #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_first_of_month" c:identifier="g_date_is_first_of_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1642">Returns %TRUE if the date is on the first of a month.
The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1649">%TRUE if the date is the first of the month</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1644">a #GDate to check</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_last_of_month" c:identifier="g_date_is_last_of_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1665">Returns %TRUE if the date is the last day of the month.
The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1672">%TRUE if the date is the last day of the month</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1667">a #GDate to check</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="order" c:identifier="g_date_order">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="2162">Checks if @date1 is less than or equal to @date2,
and swap the values if this is not the case.</doc>
        <source-position filename="glib/gdate.h" line="275"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2164">the first date</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="date2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2165">the second date</doc>
            <type name="Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_day" c:identifier="g_date_set_day">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1541">Sets the day of the month for a #GDate. If the resulting
day-month-year triplet is invalid, the date will be invalid.</doc>
        <source-position filename="glib/gdate.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1543">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1544">day to set</doc>
            <type name="DateDay" c:type="GDateDay"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dmy" c:identifier="g_date_set_dmy">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1593">Sets the value of a #GDate from a day, month, and year.
The day-month-year triplet must be valid; if you aren't
sure it is, call g_date_valid_dmy() to check before you
set it.</doc>
        <source-position filename="glib/gdate.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1595">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1596">day</doc>
            <type name="DateDay" c:type="GDateDay"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1597">month</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1598">year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_julian" c:identifier="g_date_set_julian">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1623">Sets the value of a #GDate from a Julian day number.</doc>
        <source-position filename="glib/gdate.h" line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1625">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="julian_date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1626">Julian day number (days since January 1, Year 1)</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_month" c:identifier="g_date_set_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1515">Sets the month of the year for a #GDate.  If the resulting
day-month-year triplet is invalid, the date will be invalid.</doc>
        <source-position filename="glib/gdate.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1517">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1518">month to set</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parse" c:identifier="g_date_set_parse">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1225">Parses a user-inputted string @str, and try to figure out what date it
represents, taking the [current locale][setlocale] into account. If the
string is successfully parsed, the date will be valid after the call.
Otherwise, it will be invalid. You should check using g_date_valid()
to see whether the parsing succeeded.

This function is not appropriate for file formats and the like; it
isn't very precise, and its exact behavior varies with the locale.
It's intended to be a heuristic routine that guesses what the user
means by a given string (and it does work pretty well in that
capacity).</doc>
        <source-position filename="glib/gdate.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1227">a #GDate to fill in</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1228">string to parse</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time"
              c:identifier="g_date_set_time"
              deprecated="1"
              deprecated-version="2.10">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1472">Sets the value of a date from a #GTime value.
The time to date conversion is done using the user's current timezone.</doc>
        <doc-deprecated xml:space="preserve">Use g_date_set_time_t() instead.</doc-deprecated>
        <source-position filename="glib/gdate.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1474">a #GDate.</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="time_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1475">#GTime value to set.</doc>
            <type name="Time" c:type="GTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_t"
              c:identifier="g_date_set_time_t"
              version="2.10">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1416">Sets the value of a date to the date corresponding to a time
specified as a time_t. The time to date conversion is done using
the user's current timezone.

To set the value of a date to the current day, you could write:
|[&lt;!-- language="C" --&gt;
 time_t now = time (NULL);
 if (now == (time_t) -1)
   // handle the error
 g_date_set_time_t (date, now);
]|</doc>
        <source-position filename="glib/gdate.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1418">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="timet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1419">time_t value to set</doc>
            <type name="time_t" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_val"
              c:identifier="g_date_set_time_val"
              version="2.10"
              deprecated="1"
              deprecated-version="2.62">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1491">Sets the value of a date from a #GTimeVal value.  Note that the
@tv_usec member is ignored, because #GDate can't make use of the
additional precision.

The time to date conversion is done using the user's current timezone.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use g_date_set_time_t()
   instead.</doc-deprecated>
        <source-position filename="glib/gdate.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1493">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="timeval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1494">#GTimeVal value to set</doc>
            <type name="TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_year" c:identifier="g_date_set_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1567">Sets the year for a #GDate. If the resulting day-month-year
triplet is invalid, the date will be invalid.</doc>
        <source-position filename="glib/gdate.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1569">a #GDate</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1570">year to set</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </method>
      <method name="subtract_days" c:identifier="g_date_subtract_days">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1717">Moves a date some number of days into the past.
To move by weeks, just move by weeks*7 days.
The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1719">a #GDate to decrement</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_days" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1720">number of days to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="subtract_months" c:identifier="g_date_subtract_months">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1788">Moves a date some number of months into the past.
If the current day of the month doesn't exist in
the destination month, the day of the month
may change. The date must be valid.</doc>
        <source-position filename="glib/gdate.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1790">a #GDate to decrement</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_months" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1791">number of months to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="subtract_years" c:identifier="g_date_subtract_years">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1870">Moves a date some number of years into the past.
If the current day doesn't exist in the destination
year (i.e. it's February 29 and you move to a non-leap-year)
then the day is changed to February 29. The date
must be valid.</doc>
        <source-position filename="glib/gdate.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1872">a #GDate to decrement</doc>
            <type name="Date" c:type="GDate*"/>
          </instance-parameter>
          <parameter name="n_years" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1873">number of years to move</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_struct_tm" c:identifier="g_date_to_struct_tm">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="2082">Fills in the date-related bits of a struct tm using the @date value.
Initializes the non-date parts with something safe but meaningless.</doc>
        <source-position filename="glib/gdate.h" line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2084">a #GDate to set the struct tm from</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
          <parameter name="tm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2085">struct tm to fill</doc>
            <type name="gpointer" c:type="tm*"/>
          </parameter>
        </parameters>
      </method>
      <method name="valid" c:identifier="g_date_valid">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="381">Returns %TRUE if the #GDate represents an existing day. The date must not
contain garbage; it should have been initialized with g_date_clear()
if it wasn't allocated by one of the g_date_new() variants.</doc>
        <source-position filename="glib/gdate.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="389">Whether the date is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="383">a #GDate to check</doc>
            <type name="Date" c:type="const GDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get_days_in_month"
                c:identifier="g_date_get_days_in_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1926">Returns the number of days in a month, taking leap
years into account.</doc>
        <source-position filename="glib/gdate.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1934">number of days in @month during the @year</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1928">month</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1929">year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_monday_weeks_in_year"
                c:identifier="g_date_get_monday_weeks_in_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1950">Returns the number of weeks in the year, where weeks
are taken to start on Monday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Mondays are in the year, i.e. there are 53 Mondays if
one of the extra days happens to be a Monday.)</doc>
        <source-position filename="glib/gdate.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1962">number of Mondays in the year</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1952">a year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_sunday_weeks_in_year"
                c:identifier="g_date_get_sunday_weeks_in_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1986">Returns the number of weeks in the year, where weeks
are taken to start on Sunday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Sundays are in the year, i.e. there are 53 Sundays if
one of the extra days happens to be a Sunday.)</doc>
        <source-position filename="glib/gdate.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1998">the number of weeks in @year</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1988">year to count weeks in</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_leap_year" c:identifier="g_date_is_leap_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="1904">Returns %TRUE if the year is a leap year.

For the purposes of this function, leap year is every year
divisible by 4 unless that year is divisible by 100. If it
is divisible by 100 it would be a leap year only if that year
is also divisible by 400.</doc>
        <source-position filename="glib/gdate.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="1915">%TRUE if the year is a leap year</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="1906">year to check</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
      <function name="strftime" c:identifier="g_date_strftime">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="2625">Generates a printed representation of the date, in a
[locale][setlocale]-specific way.
Works just like the platform's C library strftime() function,
but only accepts date-related formats; time-related formats
give undefined results. Date must be valid. Unlike strftime()
(which uses the locale encoding), works on a UTF-8 format
string and stores a UTF-8 result.

This function does not provide any conversion specifiers in
addition to those implemented by the platform's C library.
For example, don't expect that using g_date_strftime() would
make the \%F provided by the C99 strftime() work on Windows
where the C library only complies to C89.</doc>
        <source-position filename="glib/gdate.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="2646">number of characters written to the buffer, or 0 the buffer was too small</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2627">destination buffer</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="slen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2628">buffer size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2629">format string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="2630">valid #GDate</doc>
            <type name="Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_day" c:identifier="g_date_valid_day">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="441">Returns %TRUE if the day of the month is valid (a day is valid if it's
between 1 and 31 inclusive).</doc>
        <source-position filename="glib/gdate.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="448">%TRUE if the day is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="443">day to check</doc>
            <type name="DateDay" c:type="GDateDay"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_dmy" c:identifier="g_date_valid_dmy">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="487">Returns %TRUE if the day-month-year triplet forms a valid, existing day
in the range of days #GDate understands (Year 1 or later, no more than
a few thousand years in the future).</doc>
        <source-position filename="glib/gdate.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="497">%TRUE if the date is a valid one</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="489">day</doc>
            <type name="DateDay" c:type="GDateDay"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="490">month</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="491">year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_julian" c:identifier="g_date_valid_julian">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="472">Returns %TRUE if the Julian day is valid. Anything greater than zero
is basically a valid Julian, though there is a 32-bit limit.</doc>
        <source-position filename="glib/gdate.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="479">%TRUE if the Julian day is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="julian_date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="474">Julian day to check</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_month" c:identifier="g_date_valid_month">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="411">Returns %TRUE if the month value is valid. The 12 #GDateMonth
enumeration values are the only valid months.</doc>
        <source-position filename="glib/gdate.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="418">%TRUE if the month is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="413">month</doc>
            <type name="DateMonth" c:type="GDateMonth"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_weekday" c:identifier="g_date_valid_weekday">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="457">Returns %TRUE if the weekday is valid. The seven #GDateWeekday enumeration
values are the only valid weekdays.</doc>
        <source-position filename="glib/gdate.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="464">%TRUE if the weekday is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="weekday" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="459">weekday</doc>
            <type name="DateWeekday" c:type="GDateWeekday"/>
          </parameter>
        </parameters>
      </function>
      <function name="valid_year" c:identifier="g_date_valid_year">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="426">Returns %TRUE if the year is valid. Any year greater than 0 is valid,
though there is a 16-bit limit to what #GDate will understand.</doc>
        <source-position filename="glib/gdate.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdate.c"
               line="433">%TRUE if the year is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdate.c"
                 line="428">year</doc>
            <type name="DateYear" c:type="GDateYear"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="DateDMY" c:type="GDateDMY">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="169">This enumeration isn't used in the API, but may be useful if you need
to mark a number as a day, month, or year.</doc>
      <source-position filename="glib/gdate.h" line="52"/>
      <member name="day" value="0" c:identifier="G_DATE_DAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="171">a day</doc>
      </member>
      <member name="month" value="1" c:identifier="G_DATE_MONTH">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="172">a month</doc>
      </member>
      <member name="year" value="2" c:identifier="G_DATE_YEAR">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="173">a year</doc>
      </member>
    </enumeration>
    <enumeration name="DateMonth" c:type="GDateMonth">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="187">Enumeration representing a month; values are %G_DATE_JANUARY,
%G_DATE_FEBRUARY, etc. %G_DATE_BAD_MONTH is the invalid value.</doc>
      <source-position filename="glib/gdate.h" line="81"/>
      <member name="bad_month" value="0" c:identifier="G_DATE_BAD_MONTH">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="189">invalid value</doc>
      </member>
      <member name="january" value="1" c:identifier="G_DATE_JANUARY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="190">January</doc>
      </member>
      <member name="february" value="2" c:identifier="G_DATE_FEBRUARY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="191">February</doc>
      </member>
      <member name="march" value="3" c:identifier="G_DATE_MARCH">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="192">March</doc>
      </member>
      <member name="april" value="4" c:identifier="G_DATE_APRIL">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="193">April</doc>
      </member>
      <member name="may" value="5" c:identifier="G_DATE_MAY">
        <doc xml:space="preserve" filename="glib/gdate.c" line="194">May</doc>
      </member>
      <member name="june" value="6" c:identifier="G_DATE_JUNE">
        <doc xml:space="preserve" filename="glib/gdate.c" line="195">June</doc>
      </member>
      <member name="july" value="7" c:identifier="G_DATE_JULY">
        <doc xml:space="preserve" filename="glib/gdate.c" line="196">July</doc>
      </member>
      <member name="august" value="8" c:identifier="G_DATE_AUGUST">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="197">August</doc>
      </member>
      <member name="september" value="9" c:identifier="G_DATE_SEPTEMBER">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="198">September</doc>
      </member>
      <member name="october" value="10" c:identifier="G_DATE_OCTOBER">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="199">October</doc>
      </member>
      <member name="november" value="11" c:identifier="G_DATE_NOVEMBER">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="200">November</doc>
      </member>
      <member name="december" value="12" c:identifier="G_DATE_DECEMBER">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="201">December</doc>
      </member>
    </enumeration>
    <record name="DateTime"
            c:type="GDateTime"
            opaque="1"
            version="2.26"
            glib:type-name="GDateTime"
            glib:get-type="g_date_time_get_type"
            c:symbol-prefix="date_time">
      <doc xml:space="preserve"
           filename="glib/gdatetime.h"
           line="91">`GDateTime` is a structure that combines a Gregorian date and time
into a single structure.

`GDateTime` provides many conversion and methods to manipulate dates and times.
Time precision is provided down to microseconds and the time can range
(proleptically) from 0001-01-01 00:00:00 to 9999-12-31 23:59:59.999999.
`GDateTime` follows POSIX time in the sense that it is oblivious to leap
seconds.

`GDateTime` is an immutable object; once it has been created it cannot
be modified further. All modifiers will create a new `GDateTime`.
Nearly all such functions can fail due to the date or time going out
of range, in which case %NULL will be returned.

`GDateTime` is reference counted: the reference count is increased by calling
[method@GLib.DateTime.ref] and decreased by calling [method@GLib.DateTime.unref].
When the reference count drops to 0, the resources allocated by the `GDateTime`
structure are released.

Many parts of the API may produce non-obvious results. As an
example, adding two months to January 31st will yield March 31st
whereas adding one month and then one month again will yield either
March 28th or March 29th.  Also note that adding 24 hours is not
always the same as adding one day (since days containing daylight
savings time transitions are either 23 or 25 hours in length).</doc>
      <source-position filename="glib/gdatetime.h" line="122"/>
      <constructor name="new" c:identifier="g_date_time_new" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1581">Creates a new #GDateTime corresponding to the given date and time in
the time zone @tz.

The @year must be between 1 and 9999, @month between 1 and 12 and @day
between 1 and 28, 29, 30 or 31 depending on the month and the year.

@hour must be between 0 and 23 and @minute must be between 0 and 59.

@seconds must be at least 0.0 and must be strictly less than 60.0.
It will be rounded down to the nearest microsecond.

If the given time is not representable in the given time zone (for
example, 02:30 on March 14th 2010 in Toronto, due to daylight savings
time) then the time will be rounded up to the nearest existing time
(in this case, 03:00).  If this matters to you then you should verify
the return value for containing the same as the numbers you gave.

In the case that the given time is ambiguous in the given time zone
(for example, 01:30 on November 7th 2010 in Toronto, due to daylight
savings time) then the time falling within standard (ie:
non-daylight) time is taken.

It not considered a programmer error for the values to this function
to be out of range, but in the case that they are, the function will
return %NULL.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="158"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1620">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="tz" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1583">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*"/>
          </parameter>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1584">the year component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1585">the month component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1586">the day component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hour" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1587">the hour component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1588">the minute component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1589">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_iso8601"
                   c:identifier="g_date_time_new_from_iso8601"
                   version="2.56">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1490">Creates a #GDateTime corresponding to the given
[ISO 8601 formatted string](https://en.wikipedia.org/wiki/ISO_8601)
@text. ISO 8601 strings of the form `&lt;date&gt;&lt;sep&gt;&lt;time&gt;&lt;tz&gt;` are supported, with
some extensions from [RFC 3339](https://tools.ietf.org/html/rfc3339) as
mentioned below.

Note that as #GDateTime "is oblivious to leap seconds", leap seconds information
in an ISO-8601 string will be ignored, so a `23:59:60` time would be parsed as
`23:59:59`.

`&lt;sep&gt;` is the separator and can be either 'T', 't' or ' '. The latter two
separators are an extension from
[RFC 3339](https://tools.ietf.org/html/rfc3339#section-5.6).

`&lt;date&gt;` is in the form:

- `YYYY-MM-DD` - Year/month/day, e.g. 2016-08-24.
- `YYYYMMDD` - Same as above without dividers.
- `YYYY-DDD` - Ordinal day where DDD is from 001 to 366, e.g. 2016-237.
- `YYYYDDD` - Same as above without dividers.
- `YYYY-Www-D` - Week day where ww is from 01 to 52 and D from 1-7,
  e.g. 2016-W34-3.
- `YYYYWwwD` - Same as above without dividers.

`&lt;time&gt;` is in the form:

- `hh:mm:ss(.sss)` - Hours, minutes, seconds (subseconds), e.g. 22:10:42.123.
- `hhmmss(.sss)` - Same as above without dividers.

`&lt;tz&gt;` is an optional timezone suffix of the form:

- `Z` - UTC.
- `+hh:mm` or `-hh:mm` - Offset from UTC in hours and minutes, e.g. +12:00.
- `+hh` or `-hh` - Offset from UTC in hours, e.g. +12.

If the timezone is not provided in @text it must be provided in @default_tz
(this field is otherwise ignored).

This call can fail (returning %NULL) if @text is not a valid ISO 8601
formatted string.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="154"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1540">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1492">an ISO 8601 formatted time string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_tz"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1493">a #GTimeZone to use if the text doesn't contain a
                         timezone, or %NULL.</doc>
            <type name="TimeZone" c:type="GTimeZone*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_timeval_local"
                   c:identifier="g_date_time_new_from_timeval_local"
                   version="2.26"
                   deprecated="1"
                   deprecated-version="2.62">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1140">Creates a #GDateTime corresponding to the given #GTimeVal @tv in the
local time zone.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the
local time offset.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_new_from_unix_local() instead.</doc-deprecated>
        <source-position filename="glib/gdatetime.h" line="148"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1157">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="tv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1142">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_timeval_utc"
                   c:identifier="g_date_time_new_from_timeval_utc"
                   version="2.26"
                   deprecated="1"
                   deprecated-version="2.62">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1178">Creates a #GDateTime corresponding to the given #GTimeVal @tv in UTC.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_new_from_unix_utc() instead.</doc-deprecated>
        <source-position filename="glib/gdatetime.h" line="150"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1193">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="tv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1180">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_unix_local"
                   c:identifier="g_date_time_new_from_unix_local"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1016">Creates a #GDateTime corresponding to the given Unix time @t in the
local time zone.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the local time offset.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="137"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1032">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1018">the Unix time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_unix_local_usec"
                   c:identifier="g_date_time_new_from_unix_local_usec"
                   version="2.80">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1046">Creates a [struct@GLib.DateTime] corresponding to the given Unix time @t in the
local time zone.

Unix time is the number of microseconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the local time offset.

This call can fail (returning `NULL`) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling [method@GLib.DateTime.unref]
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1062">a new [struct@GLib.DateTime], or `NULL`</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="usecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1048">the Unix time in microseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_unix_utc"
                   c:identifier="g_date_time_new_from_unix_utc"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1079">Creates a #GDateTime corresponding to the given Unix time @t in UTC.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="139"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1094">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1081">the Unix time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_unix_utc_usec"
                   c:identifier="g_date_time_new_from_unix_utc_usec"
                   version="2.80">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1108">Creates a [struct@GLib.DateTime] corresponding to the given Unix time @t in UTC.

Unix time is the number of microseconds that have elapsed since 1970-01-01
00:00:00 UTC.

This call can fail (returning `NULL`) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling [method@GLib.DateTime.unref]
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="144"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1123">a new [struct@GLib.DateTime], or `NULL`</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="usecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1110">the Unix time in microseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_local"
                   c:identifier="g_date_time_new_local"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1687">Creates a new #GDateTime corresponding to the given date and time in
the local time zone.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_local().</doc>
        <source-position filename="glib/gdatetime.h" line="166"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1702">a #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1689">the year component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1690">the month component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1691">the day component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hour" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1692">the hour component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1693">the minute component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1694">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_now"
                   c:identifier="g_date_time_new_now"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="935">Creates a #GDateTime corresponding to this exact instant in the given
time zone @tz.  The time is as accurate as the system allows, to a
maximum accuracy of 1 microsecond.

This function will always succeed unless GLib is still being used after the
year 9999.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="glib/gdatetime.h" line="130"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="949">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="tz" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="937">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_now_local"
                   c:identifier="g_date_time_new_now_local"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="965">Creates a #GDateTime corresponding to this exact instant in the local
time zone.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_local().</doc>
        <source-position filename="glib/gdatetime.h" line="132"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="974">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
      </constructor>
      <constructor name="new_now_utc"
                   c:identifier="g_date_time_new_now_utc"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="991">Creates a #GDateTime corresponding to this exact instant in UTC.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="glib/gdatetime.h" line="134"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="999">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
      </constructor>
      <constructor name="new_utc"
                   c:identifier="g_date_time_new_utc"
                   version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1724">Creates a new #GDateTime corresponding to the given date and time in
UTC.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="glib/gdatetime.h" line="173"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1739">a #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1726">the year component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="month" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1727">the month component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="day" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1728">the day component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hour" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1729">the hour component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1730">the minute component of the date</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1731">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="g_date_time_add" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1763">Creates a copy of @datetime and adds the specified timespan to the copy.</doc>
        <source-position filename="glib/gdatetime.h" line="182"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1770">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1765">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="timespan" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1766">a #GTimeSpan</doc>
            <type name="TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_days"
              c:identifier="g_date_time_add_days"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1893">Creates a copy of @datetime and adds the specified number of days to the
copy. Add negative values to subtract days.</doc>
        <source-position filename="glib/gdatetime.h" line="199"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1901">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1895">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="days" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1896">the number of days</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_full"
              c:identifier="g_date_time_add_full"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1979">Creates a new #GDateTime adding the specified values to the current date and
time in @datetime. Add negative values to subtract.</doc>
        <source-position filename="glib/gdatetime.h" line="217"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1992">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1981">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="years" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1982">the number of years to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="months" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1983">the number of months to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="days" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1984">the number of days to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hours" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1985">the number of hours to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="minutes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1986">the number of minutes to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1987">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_hours"
              c:identifier="g_date_time_add_hours"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1918">Creates a copy of @datetime and adds the specified number of hours.
Add negative values to subtract hours.</doc>
        <source-position filename="glib/gdatetime.h" line="204"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1926">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1920">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="hours" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1921">the number of hours to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_minutes"
              c:identifier="g_date_time_add_minutes"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1938">Creates a copy of @datetime adding the specified number of minutes.
Add negative values to subtract minutes.</doc>
        <source-position filename="glib/gdatetime.h" line="208"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1946">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1940">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="minutes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1941">the number of minutes to add</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_months"
              c:identifier="g_date_time_add_months"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1823">Creates a copy of @datetime and adds the specified number of months to the
copy. Add negative values to subtract months.

The day of the month of the resulting #GDateTime is clamped to the number
of days in the updated calendar month. For example, if adding 1 month to
31st January 2018, the result would be 28th February 2018. In 2020 (a leap
year), the result would be 29th February.</doc>
        <source-position filename="glib/gdatetime.h" line="191"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1836">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1825">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="months" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1826">the number of months</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_seconds"
              c:identifier="g_date_time_add_seconds"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1959">Creates a copy of @datetime and adds the specified number of seconds.
Add negative values to subtract seconds.</doc>
        <source-position filename="glib/gdatetime.h" line="212"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1967">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1961">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1962">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_weeks"
              c:identifier="g_date_time_add_weeks"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1871">Creates a copy of @datetime and adds the specified number of weeks to the
copy. Add negative values to subtract weeks.</doc>
        <source-position filename="glib/gdatetime.h" line="195"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1879">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1873">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="weeks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1874">the number of weeks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_years"
              c:identifier="g_date_time_add_years"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="1785">Creates a copy of @datetime and adds the specified number of years to the
copy. Add negative values to subtract years.

As with g_date_time_add_months(), if the resulting date would be 29th
February on a non-leap year, the day will be clamped to 28th February.</doc>
        <source-position filename="glib/gdatetime.h" line="187"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="1796">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1787">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="years" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="1788">the number of years</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="g_date_time_compare" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2080">A comparison function for #GDateTimes that is suitable
as a #GCompareFunc. Both #GDateTimes must be non-%NULL.</doc>
        <source-position filename="glib/gdatetime.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2088">-1, 0 or 1 if @dt1 is less than, equal to or greater
  than @dt2.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dt1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2082">first #GDateTime to compare</doc>
            <type name="DateTime" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="dt2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2083">second #GDateTime to compare</doc>
            <type name="DateTime" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="difference"
              c:identifier="g_date_time_difference"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2111">Calculates the difference in time between @end and @begin.  The
#GTimeSpan that is returned is effectively @end - @begin (ie:
positive if the first parameter is larger).</doc>
        <source-position filename="glib/gdatetime.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2120">the difference between the two #GDateTime, as a time
  span expressed in microseconds.</doc>
          <type name="TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2113">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2114">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="g_date_time_equal" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2154">Checks to see if @dt1 and @dt2 are equal.

Equal here means that they represent the same moment after converting
them to the same time zone.</doc>
        <source-position filename="glib/gdatetime.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2164">%TRUE if @dt1 and @dt2 are equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dt1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2156">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="dt2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2157">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="format" c:identifier="g_date_time_format" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="3649">Creates a newly allocated string representing the requested @format.

The format strings understood by this function are a subset of the
`strftime()` format language as specified by C99.  The `%D`, `%U` and `%W`
conversions are not supported, nor is the `E` modifier.  The GNU
extensions `%k`, `%l`, `%s` and `%P` are supported, however, as are the
`0`, `_` and `-` modifiers. The Python extension `%f` is also supported.

In contrast to `strftime()`, this function always produces a UTF-8
string, regardless of the current locale.  Note that the rendering of
many formats is locale-dependent and may not match the `strftime()`
output exactly.

The following format specifiers are supported:

- `%a`: the abbreviated weekday name according to the current locale
- `%A`: the full weekday name according to the current locale
- `%b`: the abbreviated month name according to the current locale
- `%B`: the full month name according to the current locale
- `%c`: the preferred date and time representation for the current locale
- `%C`: the century number (year/100) as a 2-digit integer (00-99)
- `%d`: the day of the month as a decimal number (range 01 to 31)
- `%e`: the day of the month as a decimal number (range 1 to 31);
  single digits are preceded by a figure space (U+2007)
- `%F`: equivalent to `%Y-%m-%d` (the ISO 8601 date format)
- `%g`: the last two digits of the ISO 8601 week-based year as a
  decimal number (00-99). This works well with `%V` and `%u`.
- `%G`: the ISO 8601 week-based year as a decimal number. This works
  well with `%V` and `%u`.
- `%h`: equivalent to `%b`
- `%H`: the hour as a decimal number using a 24-hour clock (range 00 to 23)
- `%I`: the hour as a decimal number using a 12-hour clock (range 01 to 12)
- `%j`: the day of the year as a decimal number (range 001 to 366)
- `%k`: the hour (24-hour clock) as a decimal number (range 0 to 23);
  single digits are preceded by a figure space (U+2007)
- `%l`: the hour (12-hour clock) as a decimal number (range 1 to 12);
  single digits are preceded by a figure space (U+2007)
- `%m`: the month as a decimal number (range 01 to 12)
- `%M`: the minute as a decimal number (range 00 to 59)
- `%f`: the microsecond as a decimal number (range 000000 to 999999)
- `%p`: either â€˜AMâ€™ or â€˜PMâ€™ according to the given time value, or the
  corresponding  strings for the current locale.  Noon is treated as
  â€˜PMâ€™ and midnight as â€˜AMâ€™. Use of this format specifier is discouraged, as
  many locales have no concept of AM/PM formatting. Use `%c` or `%X` instead.
- `%P`: like `%p` but lowercase: â€˜amâ€™ or â€˜pmâ€™ or a corresponding string for
  the current locale. Use of this format specifier is discouraged, as
  many locales have no concept of AM/PM formatting. Use `%c` or `%X` instead.
- `%r`: the time in a.m. or p.m. notation. Use of this format specifier is
  discouraged, as many locales have no concept of AM/PM formatting. Use `%c`
  or `%X` instead.
- `%R`: the time in 24-hour notation (`%H:%M`)
- `%s`: the number of seconds since the Epoch, that is, since 1970-01-01
  00:00:00 UTC
- `%S`: the second as a decimal number (range 00 to 60)
- `%t`: a tab character
- `%T`: the time in 24-hour notation with seconds (`%H:%M:%S`)
- `%u`: the ISO 8601 standard day of the week as a decimal, range 1 to 7,
   Monday being 1. This works well with `%G` and `%V`.
- `%V`: the ISO 8601 standard week number of the current year as a decimal
  number, range 01 to 53, where week 1 is the first week that has at
  least 4 days in the new year. See g_date_time_get_week_of_year().
  This works well with `%G` and `%u`.
- `%w`: the day of the week as a decimal, range 0 to 6, Sunday being 0.
  This is not the ISO 8601 standard format â€” use `%u` instead.
- `%x`: the preferred date representation for the current locale without
  the time
- `%X`: the preferred time representation for the current locale without
  the date
- `%y`: the year as a decimal number without the century
- `%Y`: the year as a decimal number including the century
- `%z`: the time zone as an offset from UTC (`+hhmm`)
- `%:z`: the time zone as an offset from UTC (`+hh:mm`).
  This is a gnulib `strftime()` extension. Since: 2.38
- `%::z`: the time zone as an offset from UTC (`+hh:mm:ss`). This is a
  gnulib `strftime()` extension. Since: 2.38
- `%:::z`: the time zone as an offset from UTC, with `:` to necessary
  precision (e.g., `-04`, `+05:30`). This is a gnulib `strftime()` extension. Since: 2.38
- `%Z`: the time zone or name or abbreviation
- `%%`: a literal `%` character

Some conversion specifications can be modified by preceding the
conversion specifier by one or more modifier characters.

The following modifiers are supported for many of the numeric
conversions:

- `O`: Use alternative numeric symbols, if the current locale supports those.
- `_`: Pad a numeric result with spaces. This overrides the default padding
  for the specifier.
- `-`: Do not pad a numeric result. This overrides the default padding
  for the specifier.
- `0`: Pad a numeric result with zeros. This overrides the default padding
  for the specifier.

The following modifiers are supported for many of the alphabetic conversions:

- `^`: Use upper case if possible. This is a gnulib `strftime()` extension.
  Since: 2.80
- `#`: Use opposite case if possible. This is a gnulib `strftime()`
  extension. Since: 2.80

Additionally, when `O` is used with `B`, `b`, or `h`, it produces the alternative
form of a month name. The alternative form should be used when the month
name is used without a day number (e.g., standalone). It is required in
some languages (Baltic, Slavic, Greek, and more) due to their grammatical
rules. For other languages there is no difference. `%OB` is a GNU and BSD
`strftime()` extension expected to be added to the future POSIX specification,
`%Ob` and `%Oh` are GNU `strftime()` extensions. Since: 2.56

Since GLib 2.80, when `E` is used with `%c`, `%C`, `%x`, `%X`, `%y` or `%Y`,
the date is formatted using an alternate era representation specific to the
locale. This is typically used for the Thai solar calendar or Japanese era
names, for example.

- `%Ec`: the preferred date and time representation for the current locale,
  using the alternate era representation
- `%EC`: the name of the era
- `%Ex`: the preferred date representation for the current locale without
  the time, using the alternate era representation
- `%EX`: the preferred time representation for the current locale without
  the date, using the alternate era representation
- `%Ey`: the year since the beginning of the era denoted by the `%EC`
  specifier
- `%EY`: the full alternative year representation</doc>
        <source-position filename="glib/gdatetime.h" line="300"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="3780">a newly allocated string formatted to
   the requested format or %NULL in the case that there was an error (such
   as a format specifier not being supported in the current locale). The
   string should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="3651">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="3652">a valid UTF-8 string, containing the format for the
         #GDateTime</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_iso8601"
              c:identifier="g_date_time_format_iso8601"
              version="2.62">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="3817">Format @datetime in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601),
including the date, time and time zone, and return that as a UTF-8 encoded
string.

Since GLib 2.66, this will output to sub-second precision if needed.</doc>
        <source-position filename="glib/gdatetime.h" line="303"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="3827">a newly allocated string formatted in
  ISO 8601 format or %NULL in the case that there was an error. The string
  should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="3819">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day_of_month"
              c:identifier="g_date_time_get_day_of_month"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2317">Retrieves the day of the month represented by @datetime in the gregorian
calendar.</doc>
        <source-position filename="glib/gdatetime.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2324">the day of the month</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2319">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day_of_week"
              c:identifier="g_date_time_get_day_of_week"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2465">Retrieves the ISO 8601 day of the week on which @datetime falls (1 is
Monday, 2 is Tuesday... 7 is Sunday).</doc>
        <source-position filename="glib/gdatetime.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2472">the day of the week</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2467">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_day_of_year"
              c:identifier="g_date_time_get_day_of_year"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2485">Retrieves the day of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="glib/gdatetime.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2492">the day of the year</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2487">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hour"
              c:identifier="g_date_time_get_hour"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2509">Retrieves the hour of the day represented by @datetime</doc>
        <source-position filename="glib/gdatetime.h" line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2515">the hour of the day</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2511">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_microsecond"
              c:identifier="g_date_time_get_microsecond"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2563">Retrieves the microsecond of the date represented by @datetime</doc>
        <source-position filename="glib/gdatetime.h" line="267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2569">the microsecond of the second</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2565">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_minute"
              c:identifier="g_date_time_get_minute"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2527">Retrieves the minute of the hour represented by @datetime</doc>
        <source-position filename="glib/gdatetime.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2533">the minute of the hour</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2529">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_month"
              c:identifier="g_date_time_get_month"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2294">Retrieves the month of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="glib/gdatetime.h" line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2301">the month represented by @datetime</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2296">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_second"
              c:identifier="g_date_time_get_second"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2545">Retrieves the second of the minute represented by @datetime</doc>
        <source-position filename="glib/gdatetime.h" line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2551">the second represented by @datetime</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2547">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seconds"
              c:identifier="g_date_time_get_seconds"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2581">Retrieves the number of seconds since the start of the last minute,
including the fractional part.</doc>
        <source-position filename="glib/gdatetime.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2588">the number of seconds</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2583">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone"
              c:identifier="g_date_time_get_timezone"
              version="2.58">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2714">Get the time zone for this @datetime.</doc>
        <source-position filename="glib/gdatetime.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2720">the time zone</doc>
          <type name="TimeZone" c:type="GTimeZone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2716">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone_abbreviation"
              c:identifier="g_date_time_get_timezone_abbreviation"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2732">Determines the time zone abbreviation to be used at the time and in
the time zone of @datetime.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings
time is in effect.</doc>
        <source-position filename="glib/gdatetime.h" line="287"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2743">the time zone abbreviation. The returned
         string is owned by the #GDateTime and it should not be
         modified or freed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2734">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_utc_offset"
              c:identifier="g_date_time_get_utc_offset"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2684">Determines the offset to UTC in effect at the time and in the time
zone of @datetime.

The offset is the number of microseconds that you add to UTC time to
arrive at local time for the time zone (ie: negative numbers for time
zones west of GMT, positive numbers for east).

If @datetime represents UTC time, then the offset is always zero.</doc>
        <source-position filename="glib/gdatetime.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2697">the number of microseconds that should be added to UTC to
         get the local time</doc>
          <type name="TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2686">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_week_numbering_year"
              c:identifier="g_date_time_get_week_numbering_year"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2353">Returns the ISO 8601 week-numbering year in which the week containing
@datetime falls.

This function, taken together with g_date_time_get_week_of_year() and
g_date_time_get_day_of_week() can be used to determine the full ISO
week date on which @datetime falls.

This is usually equal to the normal Gregorian year (as returned by
g_date_time_get_year()), except as detailed below:

For Thursday, the week-numbering year is always equal to the usual
calendar year.  For other days, the number is such that every day
within a complete week (Monday to Sunday) is contained within the
same week-numbering year.

For Monday, Tuesday and Wednesday occurring near the end of the year,
this may mean that the week-numbering year is one greater than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring early in the next year).

For Friday, Saturday and Sunday occurring near the start of the year,
this may mean that the week-numbering year is one less than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring late in the previous year).

An equivalent description is that the week-numbering year is equal to
the calendar year containing the majority of the days in the current
week (Monday to Sunday).

Note that January 1 0001 in the proleptic Gregorian calendar is a
Monday, so this function never returns 0.</doc>
        <source-position filename="glib/gdatetime.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2389">the ISO 8601 week-numbering year for @datetime</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2355">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_week_of_year"
              c:identifier="g_date_time_get_week_of_year"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2429">Returns the ISO 8601 week number for the week containing @datetime.
The ISO 8601 week number is the same for every day of the week (from
Moday through Sunday).  That can produce some unusual results
(described below).

The first week of the year is week 1.  This is the week that contains
the first Thursday of the year.  Equivalently, this is the first week
that has more than 4 of its days falling within the calendar year.

The value 0 is never returned by this function.  Days contained
within a year but occurring before the first ISO 8601 week of that
year are considered as being contained in the last week of the
previous year.  Similarly, the final days of a calendar year may be
considered as being part of the first ISO 8601 week of the next year
if 4 or more days of that week are contained within the new year.</doc>
        <source-position filename="glib/gdatetime.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2449">the ISO 8601 week number for @datetime.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2431">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_year"
              c:identifier="g_date_time_get_year"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2272">Retrieves the year represented by @datetime in the Gregorian calendar.</doc>
        <source-position filename="glib/gdatetime.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2278">the year represented by @datetime</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2274">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ymd" c:identifier="g_date_time_get_ymd" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2176">Retrieves the Gregorian day, month, and year of a given #GDateTime.</doc>
        <source-position filename="glib/gdatetime.h" line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2178">a #GDateTime.</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="year"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2179">the return location for the gregorian year, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="month"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2180">the return location for the month of the year, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="day"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2181">the return location for the day of the month, or %NULL.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="g_date_time_hash" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2136">Hashes @datetime into a #guint, suitable for use within #GHashTable.</doc>
        <source-position filename="glib/gdatetime.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2142">a #guint containing the hash</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2138">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_daylight_savings"
              c:identifier="g_date_time_is_daylight_savings"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2757">Determines if daylight savings time is in effect at the time and in
the time zone of @datetime.</doc>
        <source-position filename="glib/gdatetime.h" line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2764">%TRUE if daylight savings time is in effect</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2759">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_date_time_ref" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="681">Atomically increments the reference count of @datetime by one.</doc>
        <source-position filename="glib/gdatetime.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="687">the #GDateTime with the reference count increased</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="683">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_local"
              c:identifier="g_date_time_to_local"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2804">Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in the local time zone.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_local().</doc>
        <source-position filename="glib/gdatetime.h" line="295"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2814">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2806">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_timeval"
              c:identifier="g_date_time_to_timeval"
              version="2.26"
              deprecated="1"
              deprecated-version="2.62">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2644">Stores the instant in time that @datetime represents into @tv.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the time
zone associated with @datetime.

On systems where 'long' is 32bit (ie: all 32bit systems and all
Windows systems), a #GTimeVal is incapable of storing the entire
range of values that #GDateTime is capable of expressing.  On those
systems, this function returns %FALSE to indicate that the time is
out of range.

On systems where 'long' is 64bit, this function never fails.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_to_unix() instead.</doc-deprecated>
        <source-position filename="glib/gdatetime.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2663">%TRUE if successful, else %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2646">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="tv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2647">a #GTimeVal to modify</doc>
            <type name="TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_timezone"
              c:identifier="g_date_time_to_timezone"
              version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2777">Create a new #GDateTime corresponding to the same instant in time as
@datetime, but in the time zone @tz.

This call can fail in the case that the time goes out of bounds.  For
example, converting 0001-01-01 00:00:00 UTC to a time zone west of
Greenwich will fail (due to the year 0 being out of range).</doc>
        <source-position filename="glib/gdatetime.h" line="292"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2789">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2779">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
          <parameter name="tz" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2780">the new #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_unix" c:identifier="g_date_time_to_unix" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2601">Gives the Unix time corresponding to @datetime, rounding down to the
nearest second.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the time zone associated with @datetime.</doc>
        <source-position filename="glib/gdatetime.h" line="272"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2611">the Unix time corresponding to @datetime</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2603">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_unix_usec"
              c:identifier="g_date_time_to_unix_usec"
              version="2.80">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2623">Gives the Unix time corresponding to @datetime, in microseconds.

Unix time is the number of microseconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the time zone associated with @datetime.</doc>
        <source-position filename="glib/gdatetime.h" line="274"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2632">the Unix time corresponding to @datetime</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2625">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_utc" c:identifier="g_date_time_to_utc" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="2832">Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in UTC.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="glib/gdatetime.h" line="297"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="glib/gdatetime.c"
               line="2842">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="2834">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_date_time_unref" version="2.26">
        <doc xml:space="preserve"
             filename="glib/gdatetime.c"
             line="702">Atomically decrements the reference count of @datetime by one.

When the reference count reaches zero, the resources allocated by
@datetime are freed</doc>
        <source-position filename="glib/gdatetime.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdatetime.c"
                 line="704">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DateWeekday" c:type="GDateWeekday">
      <doc xml:space="preserve"
           filename="glib/gdate.c"
           line="219">Enumeration representing a day of the week; %G_DATE_MONDAY,
%G_DATE_TUESDAY, etc. %G_DATE_BAD_WEEKDAY is an invalid weekday.</doc>
      <source-position filename="glib/gdate.h" line="65"/>
      <member name="bad_weekday" value="0" c:identifier="G_DATE_BAD_WEEKDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="221">invalid value</doc>
      </member>
      <member name="monday" value="1" c:identifier="G_DATE_MONDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="222">Monday</doc>
      </member>
      <member name="tuesday" value="2" c:identifier="G_DATE_TUESDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="223">Tuesday</doc>
      </member>
      <member name="wednesday" value="3" c:identifier="G_DATE_WEDNESDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="224">Wednesday</doc>
      </member>
      <member name="thursday" value="4" c:identifier="G_DATE_THURSDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="225">Thursday</doc>
      </member>
      <member name="friday" value="5" c:identifier="G_DATE_FRIDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="226">Friday</doc>
      </member>
      <member name="saturday" value="6" c:identifier="G_DATE_SATURDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="227">Saturday</doc>
      </member>
      <member name="sunday" value="7" c:identifier="G_DATE_SUNDAY">
        <doc xml:space="preserve"
             filename="glib/gdate.c"
             line="228">Sunday</doc>
      </member>
    </enumeration>
    <record name="DebugKey" c:type="GDebugKey">
      <doc xml:space="preserve"
           filename="glib/gutils.h"
           line="257">Associates a string with a bit flag.
Used in g_parse_debug_string().</doc>
      <source-position filename="glib/gutils.h" line="270"/>
      <field name="key" writable="1">
        <doc xml:space="preserve"
             filename="glib/gutils.h"
             line="259">the string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="glib/gutils.h"
             line="260">the flag</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <callback name="DestroyNotify" c:type="GDestroyNotify">
      <doc xml:space="preserve"
           filename="glib/gdataset.c"
           line="60">Specifies the type of function which is called when a data element
is destroyed. It is passed the pointer to the data element and
should free any memory and resources allocated for it.</doc>
      <source-position filename="glib/gtypes.h" line="140"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="glib/gdataset.c"
               line="62">the data element.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Dir"
            c:type="GDir"
            opaque="1"
            glib:type-name="GDir"
            glib:get-type="g_dir_get_type"
            c:symbol-prefix="dir">
      <doc xml:space="preserve"
           filename="glib/gdir.c"
           line="51">An opaque structure representing an opened directory.</doc>
      <source-position filename="glib/gdir.h" line="39"/>
      <constructor name="open" c:identifier="g_dir_open" throws="1">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="132">Opens a directory for reading. The names of the files in the
directory can then be retrieved using g_dir_read_name().  Note
that the ordering is not defined.</doc>
        <source-position filename="glib/gdir.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdir.c"
               line="145">a newly allocated #GDir on success, %NULL on failure.
  If non-%NULL, you must free the result with g_dir_close()
  when you are finished with it.</doc>
          <type name="Dir" c:type="GDir*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="134">the path to the directory you are interested in. On Unix
        in the on-disk encoding. On Windows in UTF-8</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="136">Currently must be set to 0. Reserved for future use.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close" c:identifier="g_dir_close">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="311">Closes the directory immediately and decrements the reference count.

Once the reference count reaches zero, the `GDir` structure itself will be
freed. Prior to GLib 2.80, `GDir` was not reference counted.

It is an error to call any of the `GDir` methods other than
[method@GLib.Dir.ref] and [method@GLib.Dir.unref] on a `GDir` after calling
[method@GLib.Dir.close] on it.</doc>
        <source-position filename="glib/gdir.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dir" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="313">a #GDir* created by g_dir_open()</doc>
            <type name="Dir" c:type="GDir*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read_name" c:identifier="g_dir_read_name">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="212">Retrieves the name of another entry in the directory, or %NULL.
The order of entries returned from this function is not defined,
and may vary by file system or other operating-system dependent
factors.

%NULL may also be returned in case of errors. On Unix, you can
check `errno` to find out if %NULL was returned because of an error.

On Unix, the '.' and '..' entries are omitted, and the returned
name is in the on-disk encoding.

On Windows, as is true of all GLib functions which operate on
filenames, the returned name is in UTF-8.</doc>
        <source-position filename="glib/gdir.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="glib/gdir.c"
               line="230">The entry's name or %NULL if there are no
  more entries. The return value is owned by GLib and
  must not be modified or freed.</doc>
          <type name="filename" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="214">a #GDir* created by g_dir_open()</doc>
            <type name="Dir" c:type="GDir*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_dir_ref" version="2.80">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="333">Increment the reference count of `dir`.</doc>
        <source-position filename="glib/gdir.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="glib/gdir.c"
               line="339">the same pointer as `dir`</doc>
          <type name="Dir" c:type="GDir*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="335">a `GDir`</doc>
            <type name="Dir" c:type="GDir*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rewind" c:identifier="g_dir_rewind">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="282">Resets the given directory. The next call to g_dir_read_name()
will return the first entry again.</doc>
        <source-position filename="glib/gdir.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="284">a #GDir* created by g_dir_open()</doc>
            <type name="Dir" c:type="GDir*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_dir_unref" version="2.80">
        <doc xml:space="preserve"
             filename="glib/gdir.c"
             line="351">Decrements the reference count of `dir`.

Once the reference count reaches zero, the directory will be closed and all
resources associated with it will be freed. If [method@GLib.Dir.close] is
called when the reference count is greater than zero, the directory is closed
but the `GDir` structure will not be freed until its reference count reaches
zero.

It is an error to call any of the `GDir` methods other than
[method@GLib.Dir.ref] and [method@GLib.Dir.unref] on a `GDir` after calling
[method@GLib.Dir.close] on it.</doc>
        <source-position filename="glib/gdir.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dir" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="glib/gdir.c"
                 line="353">a `GDir`</doc>
            <type name="Dir" c:type="GDir*"/>
          </instance-parameter>
        </parameters>
      </method>
      <fun