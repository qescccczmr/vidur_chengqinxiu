<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <package name="gobject-2.0"/>
  <c:include name="glib-object.h"/>
  <namespace name="GObject"
             version="2.0"
             shared-library="libgobject-2.0.so.0"
             c:identifier-prefixes="G"
             c:symbol-prefixes="gobject,g">
    <alias name="SignalCMarshaller" c:type="GSignalCMarshaller">
      <doc xml:space="preserve"
           filename="gobject/gsignal.h"
           line="36">This is the signature of marshaller functions, required to marshall
arrays of parameter values to signal emissions into C language callback
invocations.

It is merely an alias to #GClosureMarshal since the #GClosure mechanism
takes over responsibility of actual function invocation for the signal
system.</doc>
      <source-position filename="gobject/gsignal.h" line="47"/>
      <type name="ClosureMarshal" c:type="GClosureMarshal"/>
    </alias>
    <alias name="SignalCVaMarshaller" c:type="GSignalCVaMarshaller">
      <doc xml:space="preserve"
           filename="gobject/gsignal.h"
           line="48">This is the signature of va_list marshaller functions, an optional
marshaller that can be used in some situations to avoid
marshalling the signal argument into GValues.</doc>
      <source-position filename="gobject/gsignal.h" line="55"/>
      <type name="VaClosureMarshal" c:type="GVaClosureMarshal"/>
    </alias>
    <alias name="Type" c:type="GType">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="418">A numerical value which represents the unique identifier of a registered
type.</doc>
      <source-position filename="gobject/glib-types.h" line="33"/>
      <type name="gsize" c:type="gsize"/>
    </alias>
    <function-macro name="ADD_PRIVATE"
                    c:identifier="G_ADD_PRIVATE"
                    version="2.38"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2116">A convenience macro to ease adding private data to instances of a new type
in the @_C_ section of G_DEFINE_TYPE_WITH_CODE() or
G_DEFINE_ABSTRACT_TYPE_WITH_CODE().

For instance:

|[&lt;!-- language="C" --&gt;
  typedef struct _MyObject MyObject;
  typedef struct _MyObjectClass MyObjectClass;

  typedef struct {
    gint foo;
    gint bar;
  } MyObjectPrivate;

  G_DEFINE_TYPE_WITH_CODE (MyObject, my_object, G_TYPE_OBJECT,
                           G_ADD_PRIVATE (MyObject))
]|

Will add `MyObjectPrivate` as the private data to any instance of the
`MyObject` type.

`G_DEFINE_TYPE_*` macros will automatically create a private function
based on the arguments to this macro, which can be used to safely
retrieve the private data from an instance of the type; for instance:

|[&lt;!-- language="C" --&gt;
  gint
  my_object_get_foo (MyObject *obj)
  {
    MyObjectPrivate *priv = my_object_get_instance_private (obj);

    g_return_val_if_fail (MY_IS_OBJECT (obj), 0);

    return priv-&gt;foo;
  }

  void
  my_object_set_bar (MyObject *obj,
                     gint      bar)
  {
    MyObjectPrivate *priv = my_object_get_instance_private (obj);

    g_return_if_fail (MY_IS_OBJECT (obj));

    if (priv-&gt;bar != bar)
      priv-&gt;bar = bar;
  }
]|

Since GLib 2.72, the returned `MyObjectPrivate` pointer is guaranteed to be
aligned to at least the alignment of the largest basic GLib type (typically
this is #guint64 or #gdouble). If you need larger alignment for an element in
the struct, you should allocate it on the heap (aligned), or arrange for your
`MyObjectPrivate` struct to be appropriately padded.

Note that this macro can only be used together with the `G_DEFINE_TYPE_*`
macros, since it depends on variable names from those macros.

Also note that private structs added with these macros must have a struct
name of the form `TypeNamePrivate`.

It is safe to call the `_get_instance_private` function on %NULL or invalid
objects since it's only adding an offset to the instance pointer. In that
case the returned pointer must not be dereferenced.</doc>
      <source-position filename="gobject/gtype.h" line="2188"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2118">the name of the type in CamelCase</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADD_PRIVATE_DYNAMIC"
                    c:identifier="G_ADD_PRIVATE_DYNAMIC"
                    version="2.38"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtypemodule.h"
           line="245">A convenience macro to ease adding private data to instances of a new dynamic
type in the @_C_ section of G_DEFINE_DYNAMIC_TYPE_EXTENDED().

See G_ADD_PRIVATE() for details, it is similar but for static types.

Note that this macro can only be used together with the
G_DEFINE_DYNAMIC_TYPE_EXTENDED macros, since it depends on variable
names from that macro.</doc>
      <source-position filename="gobject/gtypemodule.h" line="260"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="247">the name of the type in CamelCase</doc>
        </parameter>
      </parameters>
    </function-macro>
    <glib:boxed glib:name="Array"
                c:symbol-prefix="array"
                glib:type-name="GArray"
                glib:get-type="g_array_get_type">
    </glib:boxed>
    <function-macro name="BINDING" c:identifier="G_BINDING" introspectable="0">
      <source-position filename="gobject/gbinding.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BINDING_GROUP"
                    c:identifier="G_BINDING_GROUP"
                    introspectable="0">
      <source-position filename="gobject/gbindinggroup.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <callback name="BaseFinalizeFunc" c:type="GBaseFinalizeFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="826">A callback function used by the type system to finalize those portions
of a derived types class structure that were setup from the corresponding
GBaseInitFunc() function.

Class finalization basically works the inverse way in which class
initialization is performed.

See GClassInitFunc() for a discussion of the class initialization process.</doc>
      <source-position filename="gobject/gtype.h" line="839"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="828">The #GTypeClass structure to finalize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseInitFunc" c:type="GBaseInitFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="809">A callback function used by the type system to do base initialization
of the class structures of derived types.

This function is called as part of the initialization process of all derived
classes and should reallocate or reset all dynamic class members copied over
from the parent class.

For example, class members (such as strings) that are not sufficiently
handled by a plain memory copy of the parent class into the derived class
have to be altered. See GClassInitFunc() for a discussion of the class
initialization process.</doc>
      <source-position filename="gobject/gtype.h" line="825"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="811">The #GTypeClass structure to initialize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Binding"
           c:symbol-prefix="binding"
           c:type="GBinding"
           version="2.26"
           parent="Object"
           glib:type-name="GBinding"
           glib:get-type="g_binding_get_type">
      <doc xml:space="preserve"
           filename="gobject/gbinding.c"
           line="23">`GObject` instance (or source) and another property on another `GObject`
instance (or target).

Whenever the source property changes, the same value is applied to the
target property; for instance, the following binding:

```c
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_DEFAULT);
```

will cause the property named "property-b" of @object2 to be updated
every time [method@GObject.set] or the specific accessor changes the value of
the property "property-a" of @object1.

It is possible to create a bidirectional binding between two properties
of two `GObject` instances, so that if either property changes, the
other is updated as well, for instance:

```c
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_BIDIRECTIONAL);
```

will keep the two properties in sync.

It is also possible to set a custom transformation function (in both
directions, in case of a bidirectional binding) to apply a custom
transformation from the source value to the target value before
applying it; for instance, the following binding:

```c
  g_object_bind_property_full (adjustment1, "value",
                               adjustment2, "value",
                               G_BINDING_BIDIRECTIONAL,
                               celsius_to_fahrenheit,
                               fahrenheit_to_celsius,
                               NULL, NULL);
```

will keep the "value" property of the two adjustments in sync; the
@celsius_to_fahrenheit function will be called whenever the "value"
property of @adjustment1 changes and will transform the current value
of the property before applying it to the "value" property of @adjustment2.

Vice versa, the @fahrenheit_to_celsius function will be called whenever
the "value" property of @adjustment2 changes, and will transform the
current value of the property before applying it to the "value" property
of @adjustment1.

Note that #GBinding does not resolve cycles by itself; a cycle like

```
  object1:propertyA -&gt; object2:propertyB
  object2:propertyB -&gt; object3:propertyC
  object3:propertyC -&gt; object1:propertyA
```

might lead to an infinite loop. The loop, in this particular case,
can be avoided if the objects emit the `GObject::notify` signal only
if the value has effectively been changed. A binding is implemented
using the `GObject::notify` signal, so it is susceptible to all the
various ways of blocking a signal emission, like [func@GObject.signal_stop_emission]
or [func@GObject.signal_handler_block].

A binding will be severed, and the resources it allocates freed, whenever
either one of the `GObject` instances it refers to are finalized, or when
the #GBinding instance loses its last reference.

Bindings for languages with garbage collection can use
[method@GObject.Binding.unbind] to explicitly release a binding between the source
and target properties, instead of relying on the last reference on the
binding, source, and target instances to drop.</doc>
      <method name="dup_source"
              c:identifier="g_binding_dup_source"
              version="2.68">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1024">Retrieves the #GObject instance used as the source of the binding.

A #GBinding can outlive the source #GObject as the binding does not hold a
strong reference to the source. If the source is destroyed before the
binding then this function will return %NULL.</doc>
        <source-position filename="gobject/gbinding.h" line="109"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1034">the source #GObject, or %NULL if the
    source does not exist any more.</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1026">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_target"
              c:identifier="g_binding_dup_target"
              version="2.68">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1085">Retrieves the #GObject instance used as the target of the binding.

A #GBinding can outlive the target #GObject as the binding does not hold a
strong reference to the target. If the target is destroyed before the
binding then this function will return %NULL.</doc>
        <source-position filename="gobject/gbinding.h" line="113"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1095">the target #GObject, or %NULL if the
    target does not exist any more.</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1087">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="g_binding_get_flags"
              glib:get-property="flags"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="968">Retrieves the flags passed when constructing the #GBinding.</doc>
        <source-position filename="gobject/gbinding.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="974">the #GBindingFlags used by the #GBinding</doc>
          <type name="BindingFlags" c:type="GBindingFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="970">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="g_binding_get_source"
              glib:get-property="source"
              version="2.26"
              deprecated="1"
              deprecated-version="2.68">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="986">Retrieves the #GObject instance used as the source of the binding.

A #GBinding can outlive the source #GObject as the binding does not hold a
strong reference to the source. If the source is destroyed before the
binding then this function will return %NULL.

Use g_binding_dup_source() if the source or binding are used from different
threads as otherwise the pointer returned from this function might become
invalid if the source is finalized from another thread in the meantime.</doc>
        <doc-deprecated xml:space="preserve">Use g_binding_dup_source() for a safer version of this
function.</doc-deprecated>
        <source-position filename="gobject/gbinding.h" line="107"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1000">the source #GObject, or %NULL if the
    source does not exist any more.</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="988">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_property"
              c:identifier="g_binding_get_source_property"
              glib:get-property="source-property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1108">Retrieves the name of the property of #GBinding:source used as the source
of the binding.</doc>
        <source-position filename="gobject/gbinding.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1115">the name of the source property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1110">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="g_binding_get_target"
              glib:get-property="target"
              version="2.26"
              deprecated="1"
              deprecated-version="2.68">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1047">Retrieves the #GObject instance used as the target of the binding.

A #GBinding can outlive the target #GObject as the binding does not hold a
strong reference to the target. If the target is destroyed before the
binding then this function will return %NULL.

Use g_binding_dup_target() if the target or binding are used from different
threads as otherwise the pointer returned from this function might become
invalid if the target is finalized from another thread in the meantime.</doc>
        <doc-deprecated xml:space="preserve">Use g_binding_dup_target() for a safer version of this
function.</doc-deprecated>
        <source-position filename="gobject/gbinding.h" line="111"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1061">the target #GObject, or %NULL if the
    target does not exist any more.</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1049">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_property"
              c:identifier="g_binding_get_target_property"
              glib:get-property="target-property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1127">Retrieves the name of the property of #GBinding:target used as the target
of the binding.</doc>
        <source-position filename="gobject/gbinding.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1134">the name of the target property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1129">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="g_binding_unbind" version="2.38">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1146">Explicitly releases the binding between the source and the target
property expressed by @binding.

This function will release the reference that is being held on
the @binding instance if the binding is still bound; if you want to hold on
to the #GBinding instance after calling g_binding_unbind(), you will need
to hold a reference to it.

Note however that this function does not take ownership of @binding, it
only unrefs the reference that was initially created by
g_object_bind_property() and is owned by the binding.</doc>
        <source-position filename="gobject/gbinding.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="binding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1148">a #GBinding</doc>
            <type name="Binding" c:type="GBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_flags"
                default-value="G_BINDING_DEFAULT">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="941">Flags to be used to control the #GBinding</doc>
        <type name="BindingFlags"/>
      </property>
      <property name="source"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_source">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="881">The #GObject that should be used as the source of the binding</doc>
        <type name="Object"/>
      </property>
      <property name="source-property"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_source_property"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="907">The name of the property of #GBinding:source that should be used
as the source of the binding.

This should be in [canonical form][canonical-parameter-names] to get the
best performance.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="target"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_target">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="894">The #GObject that should be used as the target of the binding</doc>
        <type name="Object"/>
      </property>
      <property name="target-property"
                version="2.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_target_property"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="924">The name of the property of #GBinding:target that should be used
as the target of the binding.

This should be in [canonical form][canonical-parameter-names] to get the
best performance.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <bitfield name="BindingFlags"
              version="2.26"
              glib:type-name="GBindingFlags"
              glib:get-type="g_binding_flags_get_type"
              c:type="GBindingFlags">
      <doc xml:space="preserve"
           filename="gobject/gbinding.h"
           line="68">Flags to be passed to g_object_bind_property() or
g_object_bind_property_full().

This enumeration can be extended at later date.</doc>
      <member name="default"
              value="0"
              c:identifier="G_BINDING_DEFAULT"
              glib:nick="default"
              glib:name="G_BINDING_DEFAULT">
        <doc xml:space="preserve"
             filename="gobject/gbinding.h"
             line="70">The default binding; if the source property
  changes, the target property is updated with its value.</doc>
      </member>
      <member name="bidirectional"
              value="1"
              c:identifier="G_BINDING_BIDIRECTIONAL"
              glib:nick="bidirectional"
              glib:name="G_BINDING_BIDIRECTIONAL">
        <doc xml:space="preserve"
             filename="gobject/gbinding.h"
             line="72">Bidirectional binding; if either the
  property of the source or the property of the target changes,
  the other is updated.</doc>
      </member>
      <member name="sync_create"
              value="2"
              c:identifier="G_BINDING_SYNC_CREATE"
              glib:nick="sync-create"
              glib:name="G_BINDING_SYNC_CREATE">
        <doc xml:space="preserve"
             filename="gobject/gbinding.h"
             line="75">Synchronize the values of the source and
  target properties when creating the binding; the direction of
  the synchronization is always from the source to the target.</doc>
      </member>
      <member name="invert_boolean"
              value="4"
              c:identifier="G_BINDING_INVERT_BOOLEAN"
              glib:nick="invert-boolean"
              glib:name="G_BINDING_INVERT_BOOLEAN">
        <doc xml:space="preserve"
             filename="gobject/gbinding.h"
             line="78">If the two properties being bound are
  booleans, setting one to %TRUE will result in the other being
  set to %FALSE and vice versa. This flag will only work for
  boolean properties, and cannot be used when passing custom
  transformation functions to g_object_bind_property_full().</doc>
      </member>
    </bitfield>
    <class name="BindingGroup"
           c:symbol-prefix="binding_group"
           c:type="GBindingGroup"
           version="2.72"
           parent="Object"
           glib:type-name="GBindingGroup"
           glib:get-type="g_binding_group_get_type">
      <doc xml:space="preserve"
           filename="gobject/gbindinggroup.c"
           line="29">`GBindingGroup` can be used to bind multiple properties
from an object collectively.

Use the various methods to bind properties from a single source
object to multiple destination objects. Properties can be bound
bidirectionally and are connected when the source object is set
with [method@GObject.BindingGroup.set_source].</doc>
      <constructor name="new"
                   c:identifier="g_binding_group_new"
                   version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="362">Creates a new #GBindingGroup.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gbindinggroup.c"
               line="367">a new #GBindingGroup</doc>
          <type name="BindingGroup" c:type="GBindingGroup*"/>
        </return-value>
      </constructor>
      <method name="bind" c:identifier="g_binding_group_bind" version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="557">Creates a binding between @source_property on the source object
and @target_property on @target. Whenever the @source_property
is changed the @target_property is updated using the same value.
The binding flag %G_BINDING_SYNC_CREATE is automatically specified.

See g_object_bind_property() for more information.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="559">the #GBindingGroup</doc>
            <type name="BindingGroup" c:type="GBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="560">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="561">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="562">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="563">the flags used to create the #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_full"
              c:identifier="g_binding_group_bind_full"
              shadowed-by="bind_with_closures"
              version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="588">Creates a binding between @source_property on the source object and
@target_property on @target, allowing you to set the transformation
functions to be used by the binding. The binding flag
%G_BINDING_SYNC_CREATE is automatically specified.

See g_object_bind_property_full() for more information.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="590">the #GBindingGroup</doc>
            <type name="BindingGroup" c:type="GBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="591">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="592">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="593">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="594">the flags used to create the #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="595">the transformation function
    from the source object to the @target, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="597">the transformation function
    from the @target to the source object, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="599">custom data to be passed to the transformation
            functions, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="601">function to be called when disposing the binding,
    to free the resources used by the transformation functions</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_closures"
              c:identifier="g_binding_group_bind_with_closures"
              shadows="bind_full"
              version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="632">Creates a binding between @source_property on the source object and
@target_property on @target, allowing you to set the transformation
functions to be used by the binding. The binding flag
%G_BINDING_SYNC_CREATE is automatically specified.

This function is the language bindings friendly version of
g_binding_group_bind_property_full(), using #GClosures
instead of function pointers.

See g_object_bind_property_with_closures() for more information.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="634">the #GBindingGroup</doc>
            <type name="BindingGroup" c:type="GBindingGroup*"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="635">the property on the source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="636">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="637">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="638">the flags used to create the #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="639">a #GClosure wrapping the
    transformation function from the source object to the @target,
    or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="642">a #GClosure wrapping the
    transformation function from the @target to the source object,
    or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_source"
              c:identifier="g_binding_group_dup_source"
              version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="377">Gets the source object used for binding properties.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gbindinggroup.c"
               line="383">a #GObject or %NULL.</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="379">the #GBindingGroup</doc>
            <type name="BindingGroup" c:type="GBindingGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="g_binding_group_set_source"
              glib:set-property="source"
              version="2.72">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="422">Sets @source as the source object used for creating property
bindings. If there is already a source object all bindings from it
will be removed.

Note that all properties that have been bound must exist on @source.</doc>
        <source-position filename="gobject/gbindinggroup.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="424">the #GBindingGroup</doc>
            <type name="BindingGroup" c:type="GBindingGroup*"/>
          </instance-parameter>
          <parameter name="source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gbindinggroup.c"
                 line="425">the source #GObject,
  or %NULL to clear it</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="source"
                version="2.72"
                writable="1"
                transfer-ownership="none"
                setter="set_source">
        <doc xml:space="preserve"
             filename="gobject/gbindinggroup.c"
             line="340">The source object used for binding properties.</doc>
        <type name="Object"/>
      </property>
    </class>
    <callback name="BindingTransformFunc"
              c:type="GBindingTransformFunc"
              version="2.26">
      <doc xml:space="preserve"
           filename="gobject/gbinding.h"
           line="43">A function to be called to transform @from_value to @to_value.

If this is the @transform_to function of a binding, then @from_value
is the @source_property on the @source object, and @to_value is the
@target_property on the @target object. If this is the
@transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
then those roles are reversed.</doc>
      <source-position filename="gobject/gbinding.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject/gbinding.h"
             line="58">%TRUE if the transformation was successful, and %FALSE
  otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.h"
               line="45">a #GBinding</doc>
          <type name="Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="from_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.h"
               line="46">the #GValue containing the value to transform</doc>
          <type name="Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="to_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.h"
               line="47">the #GValue in which to store the transformed value</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="gobject/gbinding.h"
               line="48">data passed to the transform function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <glib:boxed glib:name="BookmarkFile"
                c:symbol-prefix="bookmark_file"
                glib:type-name="GBookmarkFile"
                glib:get-type="g_bookmark_file_get_type">
    </glib:boxed>
    <callback name="BoxedCopyFunc" c:type="GBoxedCopyFunc">
      <doc xml:space="preserve"
           filename="gobject/gboxed.h"
           line="49">This function is provided by the user and should produce a copy
of the passed in boxed structure.</doc>
      <source-position filename="gobject/gboxed.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gobject/gboxed.h"
             line="56">The newly created copy of the boxed structure.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gboxed.h"
               line="51">The boxed structure to be copied.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BoxedFreeFunc" c:type="GBoxedFreeFunc">
      <doc xml:space="preserve"
           filename="gobject/gboxed.h"
           line="60">This function is provided by the user and should free the boxed
structure passed.</doc>
      <source-position filename="gobject/gboxed.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="boxed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gboxed.h"
               line="62">The boxed structure to be freed.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <glib:boxed glib:name="ByteArray"
                c:symbol-prefix="byte_array"
                glib:type-name="GByteArray"
                glib:get-type="g_byte_array_get_type">
    </glib:boxed>
    <glib:boxed glib:name="Bytes"
                c:symbol-prefix="bytes"
                glib:type-name="GBytes"
                glib:get-type="g_bytes_get_type">
    </glib:boxed>
    <function-macro name="CALLBACK"
                    c:identifier="G_CALLBACK"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="67">Cast a function pointer to a #GCallback.</doc>
      <source-position filename="gobject/gclosure.h" line="73"/>
      <parameters>
        <parameter name="f">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="69">a function pointer.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CCLOSURE_SWAP_DATA"
                    c:identifier="G_CCLOSURE_SWAP_DATA"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="57">Checks whether the user data of the #GCClosure should be passed as the
first parameter to the callback. See g_cclosure_new_swap().</doc>
      <source-position filename="gobject/gclosure.h" line="66"/>
      <parameters>
        <parameter name="cclosure">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="59">a #GCClosure</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="CClosure" c:type="GCClosure">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="156">A #GCClosure is a specialization of #GClosure for C function callbacks.</doc>
      <source-position filename="gobject/gclosure.h" line="218"/>
      <field name="closure" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gclosure.h"
             line="158">the #GClosure</doc>
        <type name="Closure" c:type="GClosure"/>
      </field>
      <field name="callback" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gclosure.h"
             line="159">the callback function</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <function name="marshal_BOOLEAN__BOXED_BOXED"
                c:identifier="g_cclosure_marshal_BOOLEAN__BOXED_BOXED">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2390">A #GClosureMarshal function for use with signals with handlers that
take two boxed pointers as arguments and return a boolean.  If you
have such a signal, you will probably also need to use an
accumulator, such as g_signal_accumulator_true_handled().</doc>
        <source-position filename="gobject/gmarshal.h" line="399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2392">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2393">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2395">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2396">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2398">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2400">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__BOXED_BOXEDv"
                c:identifier="g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2450">The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED().</doc>
        <source-position filename="gobject/gmarshal.h" line="406"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2452">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2453">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2456">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2457">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2458">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2461">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2462">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__FLAGS"
                c:identifier="g_cclosure_marshal_BOOLEAN__FLAGS">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2143">A #GClosureMarshal function for use with signals with handlers that
take a flags type as an argument and return a boolean.  If you have
such a signal, you will probably also need to use an accumulator,
such as g_signal_accumulator_true_handled().</doc>
        <source-position filename="gobject/gmarshal.h" line="347"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2145">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2146">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2148">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2149">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2151">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2153">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_BOOLEAN__FLAGSv"
                c:identifier="g_cclosure_marshal_BOOLEAN__FLAGSv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2201">The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS().</doc>
        <source-position filename="gobject/gmarshal.h" line="354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2203">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2204">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2207">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2208">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2209">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2212">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2213">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_STRING__OBJECT_POINTER"
                c:identifier="g_cclosure_marshal_STRING__OBJECT_POINTER">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2262">A #GClosureMarshal function for use with signals with handlers that
take a #GObject and a pointer and produce a string.  It is highly
unlikely that your signal handler fits this description.</doc>
        <source-position filename="gobject/gmarshal.h" line="382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2264">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2265">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2267">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2268">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2270">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2272">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_STRING__OBJECT_POINTERv"
                c:identifier="g_cclosure_marshal_STRING__OBJECT_POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2321">The #GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER().</doc>
        <source-position filename="gobject/gmarshal.h" line="389"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2323">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2324">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2327">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2328">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2329">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2332">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2333">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOOLEAN"
                c:identifier="g_cclosure_marshal_VOID__BOOLEAN">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="169">A #GClosureMarshal function for use with signals with a single
boolean argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="171">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="172">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="174">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="175">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="177">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="179">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOOLEANv"
                c:identifier="g_cclosure_marshal_VOID__BOOLEANv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="221">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN().</doc>
        <source-position filename="gobject/gmarshal.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="223">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="224">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="227">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="228">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="229">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="232">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="233">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOXED"
                c:identifier="g_cclosure_marshal_VOID__BOXED">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1581">A #GClosureMarshal function for use with signals with a single
argument which is any boxed pointer type.</doc>
        <source-position filename="gobject/gmarshal.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1583">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1584">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1586">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1587">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1589">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1591">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__BOXEDv"
                c:identifier="g_cclosure_marshal_VOID__BOXEDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1633">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED().</doc>
        <source-position filename="gobject/gmarshal.h" line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1635">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1636">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1639">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1640">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1641">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1644">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1645">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__CHAR"
                c:identifier="g_cclosure_marshal_VOID__CHAR">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="277">A #GClosureMarshal function for use with signals with a single
character argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="279">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="280">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="282">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="283">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="285">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="287">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__CHARv"
                c:identifier="g_cclosure_marshal_VOID__CHARv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="329">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR().</doc>
        <source-position filename="gobject/gmarshal.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="331">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="332">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="335">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="336">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="337">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="340">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="341">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__DOUBLE"
                c:identifier="g_cclosure_marshal_VOID__DOUBLE">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1249">A #GClosureMarshal function for use with signals with one
double-precision floating point argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1251">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1252">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1254">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1255">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1257">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1259">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__DOUBLEv"
                c:identifier="g_cclosure_marshal_VOID__DOUBLEv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1301">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE().</doc>
        <source-position filename="gobject/gmarshal.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1303">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1304">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1307">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1308">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1309">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1312">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1313">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ENUM"
                c:identifier="g_cclosure_marshal_VOID__ENUM">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="925">A #GClosureMarshal function for use with signals with a single
argument with an enumerated type.</doc>
        <source-position filename="gobject/gmarshal.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="927">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="928">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="930">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="931">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="933">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="935">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ENUMv"
                c:identifier="g_cclosure_marshal_VOID__ENUMv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="977">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM().</doc>
        <source-position filename="gobject/gmarshal.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="979">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="980">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="983">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="984">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="985">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="988">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="989">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLAGS"
                c:identifier="g_cclosure_marshal_VOID__FLAGS">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1033">A #GClosureMarshal function for use with signals with a single
argument with a flags types.</doc>
        <source-position filename="gobject/gmarshal.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1035">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1036">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1038">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1039">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1041">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1043">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLAGSv"
                c:identifier="g_cclosure_marshal_VOID__FLAGSv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1085">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS().</doc>
        <source-position filename="gobject/gmarshal.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1087">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1088">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1091">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1092">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1093">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1096">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1097">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLOAT"
                c:identifier="g_cclosure_marshal_VOID__FLOAT">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1141">A #GClosureMarshal function for use with signals with one
single-precision floating point argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1143">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1144">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1146">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1147">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1149">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1151">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__FLOATv"
                c:identifier="g_cclosure_marshal_VOID__FLOATv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1193">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT().</doc>
        <source-position filename="gobject/gmarshal.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1195">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1196">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1199">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1200">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1201">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1204">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1205">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__INT"
                c:identifier="g_cclosure_marshal_VOID__INT">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="493">A #GClosureMarshal function for use with signals with a single
integer argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="495">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="496">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="498">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="499">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="501">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="503">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__INTv"
                c:identifier="g_cclosure_marshal_VOID__INTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="545">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT().</doc>
        <source-position filename="gobject/gmarshal.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="547">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="548">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="551">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="552">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="553">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="556">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="557">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__LONG"
                c:identifier="g_cclosure_marshal_VOID__LONG">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="709">A #GClosureMarshal function for use with signals with with a single
long integer argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="711">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="712">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="714">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="715">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="717">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="719">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__LONGv"
                c:identifier="g_cclosure_marshal_VOID__LONGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="761">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG().</doc>
        <source-position filename="gobject/gmarshal.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="763">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="764">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="767">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="768">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="769">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="772">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="773">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__OBJECT"
                c:identifier="g_cclosure_marshal_VOID__OBJECT">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1805">A #GClosureMarshal function for use with signals with a single
#GObject argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1807">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1808">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1810">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1811">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1813">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1815">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__OBJECTv"
                c:identifier="g_cclosure_marshal_VOID__OBJECTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1857">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT().</doc>
        <source-position filename="gobject/gmarshal.h" line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1859">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1860">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1863">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1864">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1865">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1868">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1869">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__PARAM"
                c:identifier="g_cclosure_marshal_VOID__PARAM">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1469">A #GClosureMarshal function for use with signals with a single
argument of type #GParamSpec.</doc>
        <source-position filename="gobject/gmarshal.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1471">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1472">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1474">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1475">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1477">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1479">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__PARAMv"
                c:identifier="g_cclosure_marshal_VOID__PARAMv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1521">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM().</doc>
        <source-position filename="gobject/gmarshal.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1523">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1524">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1527">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1528">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1529">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1532">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1533">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__POINTER"
                c:identifier="g_cclosure_marshal_VOID__POINTER">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1693">A #GClosureMarshal function for use with signals with a single raw
pointer argument type.

If it is possible, it is better to use one of the more specific
functions such as g_cclosure_marshal_VOID__OBJECT() or
g_cclosure_marshal_VOID__OBJECT().</doc>
        <source-position filename="gobject/gmarshal.h" line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1695">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1696">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1698">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1699">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1701">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1703">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__POINTERv"
                c:identifier="g_cclosure_marshal_VOID__POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1749">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER().</doc>
        <source-position filename="gobject/gmarshal.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1751">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1752">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1755">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1756">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1757">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1760">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1761">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__STRING"
                c:identifier="g_cclosure_marshal_VOID__STRING">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1357">A #GClosureMarshal function for use with signals with a single string
argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1359">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1360">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1362">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1363">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1365">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1367">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__STRINGv"
                c:identifier="g_cclosure_marshal_VOID__STRINGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1409">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING().</doc>
        <source-position filename="gobject/gmarshal.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1411">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1412">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1415">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1416">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1417">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1420">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1421">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UCHAR"
                c:identifier="g_cclosure_marshal_VOID__UCHAR">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="385">A #GClosureMarshal function for use with signals with a single
unsigned character argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="387">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="388">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="390">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="391">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="393">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="395">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UCHARv"
                c:identifier="g_cclosure_marshal_VOID__UCHARv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="437">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR().</doc>
        <source-position filename="gobject/gmarshal.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="439">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="440">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="443">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="444">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="445">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="448">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="449">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT"
                c:identifier="g_cclosure_marshal_VOID__UINT">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="601">A #GClosureMarshal function for use with signals with with a single
unsigned integer argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="603">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="604">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="606">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="607">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="609">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="611">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT_POINTER"
                c:identifier="g_cclosure_marshal_VOID__UINT_POINTER">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2029">A #GClosureMarshal function for use with signals with an unsigned int
and a pointer as arguments.</doc>
        <source-position filename="gobject/gmarshal.h" line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2031">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2032">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2034">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2035">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2037">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2039">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINT_POINTERv"
                c:identifier="g_cclosure_marshal_VOID__UINT_POINTERv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="2083">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER().</doc>
        <source-position filename="gobject/gmarshal.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2085">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2086">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2089">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2090">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2091">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2094">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="2095">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__UINTv"
                c:identifier="g_cclosure_marshal_VOID__UINTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="653">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT().</doc>
        <source-position filename="gobject/gmarshal.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="655">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="656">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="659">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="660">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="661">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="664">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="665">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ULONG"
                c:identifier="g_cclosure_marshal_VOID__ULONG">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="817">A #GClosureMarshal function for use with signals with a single
unsigned long integer argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="819">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="820">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="822">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="823">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="825">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="827">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__ULONGv"
                c:identifier="g_cclosure_marshal_VOID__ULONGv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="869">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG().</doc>
        <source-position filename="gobject/gmarshal.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="871">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="872">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="875">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="876">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="877">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="880">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="881">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VARIANT"
                c:identifier="g_cclosure_marshal_VOID__VARIANT">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1917">A #GClosureMarshal function for use with signals with a single
#GVariant argument.</doc>
        <source-position filename="gobject/gmarshal.h" line="313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1919">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1920">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1922">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1923">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1925">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1927">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VARIANTv"
                c:identifier="g_cclosure_marshal_VOID__VARIANTv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="1969">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT().</doc>
        <source-position filename="gobject/gmarshal.h" line="320"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1971">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1972">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1975">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1976">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1977">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1980">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="1981">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VOID"
                c:identifier="g_cclosure_marshal_VOID__VOID">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="72">A #GClosureMarshal function for use with signals with no arguments.</doc>
        <source-position filename="gobject/gmarshal.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="74">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="75">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="77">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="78">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="80">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="82">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_VOID__VOIDv"
                c:identifier="g_cclosure_marshal_VOID__VOIDv"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gmarshal.c"
             line="121">The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID().</doc>
        <source-position filename="gobject/gmarshal.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="123">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="124">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="127">the instance on which the closure is invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="128">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="129">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="132">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gmarshal.c"
                 line="133">the #GType of each argument from
 @args.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_generic"
                c:identifier="g_cclosure_marshal_generic"
                version="2.30">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="1444">A generic marshaller function implemented via
[libffi](http://sourceware.org/libffi/).

Normally this function is not passed explicitly to g_signal_new(),
but used automatically by GLib when specifying a %NULL marshaller.</doc>
        <source-position filename="gobject/gclosure.h" line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1446">A #GClosure.</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_gvalue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1447">A #GValue to store the return value. May be %NULL
  if the callback of closure doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1449">The length of the @param_values array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1450">An array of #GValues holding the arguments
  on which to invoke the callback of closure.</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1452">The invocation hint given as the last argument to
  g_closure_invoke().</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1454">Additional data specified when registering the
  marshaller, see g_closure_set_marshal() and
  g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="marshal_generic_va"
                c:identifier="g_cclosure_marshal_generic_va"
                version="2.30"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="1543">A generic #GVaClosureMarshal function implemented via
[libffi](http://sourceware.org/libffi/).</doc>
        <source-position filename="gobject/gclosure.h" line="304"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1545">the #GClosure to which the marshaller belongs</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="return_value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1546">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1549">the instance on which the closure is
 invoked.</doc>
            <type name="TypeInstance" c:type="gpointer"/>
          </parameter>
          <parameter name="args_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1551">va_list of arguments to be passed to the closure.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1552">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="n_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1555">the length of the @param_types array</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="param_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="1556">the #GType of each argument from
 @args_list.</doc>
            <array length="5" zero-terminated="0" c:type="GType*">
              <type name="GType" c:type="GType"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="g_cclosure_new" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="957">Creates a new closure which invokes @callback_func with @user_data as
the last parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
        <source-position filename="gobject/gclosure.h" line="223"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.c"
               line="968">a floating reference to a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func"
                     transfer-ownership="none"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="959">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="960">user data to pass to @callback_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="961">destroy notify to be called when @user_data is no longer used</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_object"
                c:identifier="g_cclosure_new_object"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="5314">A variant of g_cclosure_new() which uses @object as @user_data and
calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
        <source-position filename="gobject/gobject.h" line="627"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="5325">a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5316">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5317">a #GObject pointer to pass to @callback_func</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_object_swap"
                c:identifier="g_cclosure_new_object_swap"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="5343">A variant of g_cclosure_new_swap() which uses @object as @user_data
and calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.</doc>
        <source-position filename="gobject/gobject.h" line="630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="5354">a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5345">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5346">a #GObject pointer to pass to @callback_func</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_swap"
                c:identifier="g_cclosure_new_swap"
                introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="987">Creates a new closure which invokes @callback_func with @user_data as
the first parameter.

@destroy_data will be called as a finalize notifier on the #GClosure.</doc>
        <source-position filename="gobject/gclosure.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.c"
               line="998">a floating reference to a new #GCClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="callback_func"
                     transfer-ownership="none"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="989">the function to invoke</doc>
            <type name="Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="990">user data to pass to @callback_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="991">destroy notify to be called when @user_data is no longer used</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <function-macro name="CLOSURE_NEEDS_MARSHAL"
                    c:identifier="G_CLOSURE_NEEDS_MARSHAL"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="32">Check if the closure still needs a marshaller. See g_closure_set_marshal().</doc>
      <source-position filename="gobject/gclosure.h" line="41"/>
      <parameters>
        <parameter name="closure">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="34">a #GClosure</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLOSURE_N_NOTIFIERS"
                    c:identifier="G_CLOSURE_N_NOTIFIERS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="42">Get the total number of notifiers connected with the closure @cl.

The count includes the meta marshaller, the finalize and invalidate notifiers
and the marshal guards. Note that each guard counts as two notifiers.
See g_closure_set_meta_marshal(), g_closure_add_finalize_notifier(),
g_closure_add_invalidate_notifier() and g_closure_add_marshal_guards().</doc>
      <source-position filename="gobject/gclosure.h" line="55"/>
      <parameters>
        <parameter name="cl">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="44">a #GClosure</doc>
        </parameter>
      </parameters>
    </function-macro>
    <callback name="Callback" c:type="GCallback">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="80">The type used for callback functions in structure definitions and function
signatures.

This doesn't mean that all callback functions must take no  parameters and
return void. The required signature of a callback function is determined by
the context in which is used (e.g. the signal to which it is connected).

Use G_CALLBACK() to cast the callback function to a #GCallback.</doc>
      <source-position filename="gobject/gclosure.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </callback>
    <glib:boxed glib:name="Checksum"
                c:symbol-prefix="checksum"
                glib:type-name="GChecksum"
                glib:get-type="g_checksum_get_type">
    </glib:boxed>
    <callback name="ClassFinalizeFunc" c:type="GClassFinalizeFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="945">A callback function used by the type system to finalize a class.

This function is rarely needed, as dynamically allocated class resources
should be handled by GBaseInitFunc() and GBaseFinalizeFunc().

Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
structure of a static type is invalid, because classes of static types
will never be finalized (they are artificially kept alive when their
reference count drops to zero).</doc>
      <source-position filename="gobject/gtype.h" line="960"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="947">The #GTypeClass structure to finalize</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
        <parameter name="class_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="948">The @class_data member supplied via the #GTypeInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClassInitFunc" c:type="GClassInitFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="840">A callback function used by the type system to initialize the class
of a specific type.

This function should initialize all static class members.

The initialization process of a class involves:

- Copying common members from the parent class over to the
  derived class structure.
- Zero initialization of the remaining members not copied
  over from the parent class.
- Invocation of the GBaseInitFunc() initializers of all parent
  types and the class' type.
- Invocation of the class' GClassInitFunc() initializer.

Since derived classes are partially initialized through a memory copy
of the parent class, the general rule is that GBaseInitFunc() and
GBaseFinalizeFunc() should take care of necessary reinitialization
and release of those class members that were introduced by the type
that specified these GBaseInitFunc()/GBaseFinalizeFunc().
GClassInitFunc() should only care about initializing static
class members, while dynamic class members (such as allocated strings
or reference counted resources) are better handled by a GBaseInitFunc()
for this type, so proper initialization of the dynamic class members
is performed for class initialization of derived types as well.

An example may help to correspond the intend of the different class
initializers:

|[&lt;!-- language="C" --&gt;
typedef struct {
  GObjectClass parent_class;
  gint         static_integer;
  gchar       *dynamic_string;
} TypeAClass;
static void
type_a_base_class_init (TypeAClass *class)
{
  class-&gt;dynamic_string = g_strdup ("some string");
}
static void
type_a_base_class_finalize (TypeAClass *class)
{
  g_free (class-&gt;dynamic_string);
}
static void
type_a_class_init (TypeAClass *class)
{
  class-&gt;static_integer = 42;
}

typedef struct {
  TypeAClass   parent_class;
  gfloat       static_float;
  GString     *dynamic_gstring;
} TypeBClass;
static void
type_b_base_class_init (TypeBClass *class)
{
  class-&gt;dynamic_gstring = g_string_new ("some other string");
}
static void
type_b_base_class_finalize (TypeBClass *class)
{
  g_string_free (class-&gt;dynamic_gstring);
}
static void
type_b_class_init (TypeBClass *class)
{
  class-&gt;static_float = 3.14159265358979323846;
}
]|

Initialization of TypeBClass will first cause initialization of
TypeAClass (derived classes reference their parent classes, see
g_type_class_ref() on this).

Initialization of TypeAClass roughly involves zero-initializing its fields,
then calling its GBaseInitFunc() type_a_base_class_init() to allocate
its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
type_a_class_init() to initialize its static members (static_integer).
The first step in the initialization process of TypeBClass is then
a plain memory copy of the contents of TypeAClass into TypeBClass and
zero-initialization of the remaining fields in TypeBClass.
The dynamic members of TypeAClass within TypeBClass now need
reinitialization which is performed by calling type_a_base_class_init()
with an argument of TypeBClass.

After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
is called to complete the initialization process with the static members
(static_float).

Corresponding finalization counter parts to the GBaseInitFunc() functions
have to be provided to release allocated resources at class finalization
time.</doc>
      <source-position filename="gobject/gtype.h" line="943"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="842">The #GTypeClass structure to initialize.</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
        <parameter name="class_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="843">The @class_data member supplied via the #GTypeInfo structure.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Closure"
            c:type="GClosure"
            glib:type-name="GClosure"
            glib:get-type="g_closure_get_type"
            c:symbol-prefix="closure">
      <doc xml:space="preserve"
           filename="gobject/gclosure.c"
           line="41">A `GClosure` represents a callback supplied by the programmer.

It will generally comprise a function of some kind and a marshaller
used to call it. It is the responsibility of the marshaller to
convert the arguments for the invocation from #GValues into
a suitable form, perform the callback on the converted arguments,
and transform the return value back into a #GValue.

In the case of C programs, a closure usually just holds a pointer
to a function and maybe a data argument, and the marshaller
converts between #GValue and native C types. The GObject
library provides the #GCClosure type for this purpose. Bindings for
other languages need marshallers which convert between #GValues
and suitable representations in the runtime of the language in
order to use functions written in that language as callbacks. Use
g_closure_set_marshal() to set the marshaller on such a custom
closure implementation.

Within GObject, closures play an important role in the
implementation of signals. When a signal is registered, the
@c_marshaller argument to g_signal_new() specifies the default C
marshaller for any closure which is connected to this
signal. GObject provides a number of C marshallers for this
purpose, see the g_cclosure_marshal_*() functions. Additional C
marshallers can be generated with the [glib-genmarshal][glib-genmarshal]
utility.  Closures can be explicitly connected to signals with
g_signal_connect_closure(), but it usually more convenient to let
GObject create a closure automatically by using one of the
g_signal_connect_*() functions which take a callback function/user
data pair.

Using closures has a number of important advantages over a simple
callback function/data pointer combination:

- Closures allow the callee to get the types of the callback parameters,
  which means that language bindings don't have to write individual glue
  for each callback type.

- The reference counting of #GClosure makes it easy to handle reentrancy
  right; if a callback is removed while it is being invoked, the closure
  and its parameters won't be freed until the invocation finishes.

- g_closure_invalidate() and invalidation notifiers allow callbacks to be
  automatically removed when the objects they point to go away.</doc>
      <source-position filename="gobject/gclosure.h" line="211"/>
      <field name="ref_count" readable="0" bits="15" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="meta_marshal_nouse" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_guards" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_fnotifiers" readable="0" bits="2" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_inotifiers" readable="0" bits="8" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_inotify" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="floating" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="derivative_flag" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="in_marshal" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="43">Indicates whether the closure is currently being invoked with
  g_closure_invoke()</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="is_invalid" writable="1" bits="1">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="45">Indicates whether the closure has been invalidated by
  g_closure_invalidate()</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="marshal">
        <callback name="marshal">
          <source-position filename="gobject/gclosure.h" line="191"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="closure" transfer-ownership="none">
              <type name="Closure" c:type="GClosure*"/>
            </parameter>
            <parameter name="return_value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="n_param_values" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="param_values" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="invocation_hint" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="marshal_data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="notifiers" readable="0" private="1">
        <type name="ClosureNotifyData" c:type="GClosureNotifyData*"/>
      </field>
      <constructor name="new_object" c:identifier="g_closure_new_object">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="5285">A variant of g_closure_new_simple() which stores @object in the
@data field of the closure and calls g_object_watch_closure() on
@object and the created closure. This function is mainly useful
when implementing new types of closures.</doc>
        <source-position filename="gobject/gobject.h" line="633"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="5297">a newly allocated #GClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="sizeof_closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5287">the size of the structure to allocate, must be at least
 `sizeof (GClosure)`</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5289">a #GObject pointer to store in the @data field of the newly
 allocated #GClosure</doc>
            <type name="Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_simple" c:identifier="g_closure_new_simple">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="142">Allocates a struct of the given size and initializes the initial
part as a #GClosure.

This function is mainly useful when implementing new types of closures:

|[&lt;!-- language="C" --&gt;
typedef struct _MyClosure MyClosure;
struct _MyClosure
{
  GClosure closure;
  // extra data goes here
};

static void
my_closure_finalize (gpointer  notify_data,
                     GClosure *closure)
{
  MyClosure *my_closure = (MyClosure *)closure;

  // free extra data here
}

MyClosure *my_closure_new (gpointer data)
{
  GClosure *closure;
  MyClosure *my_closure;

  closure = g_closure_new_simple (sizeof (MyClosure), data);
  my_closure = (MyClosure *) closure;

  // initialize extra data here

  g_closure_add_finalize_notifier (closure, notify_data,
                                   my_closure_finalize);
  return my_closure;
}
]|</doc>
        <source-position filename="gobject/gclosure.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.c"
               line="186">a floating reference to a new #GClosure</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <parameter name="sizeof_closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="144">the size of the structure to allocate, must be at least
                 `sizeof (GClosure)`</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="146">data to store in the @data field of the newly allocated #GClosure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_finalize_notifier"
              c:identifier="g_closure_add_finalize_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="426">Registers a finalization notifier which will be called when the
reference count of @closure goes down to 0.

Multiple finalization notifiers on a single closure are invoked in
unspecified order. If a single call to g_closure_unref() results in
the closure being both invalidated and finalized, then the invalidate
notifiers will be run before the finalize notifiers.</doc>
        <source-position filename="gobject/gclosure.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="428">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="429">data to pass to @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="430">the callback function to register</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_invalidate_notifier"
              c:identifier="g_closure_add_invalidate_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="463">Registers an invalidation notifier which will be called when the
@closure is invalidated with g_closure_invalidate().

Invalidation notifiers are invoked before finalization notifiers,
in an unspecified order.</doc>
        <source-position filename="gobject/gclosure.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="465">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="466">data to pass to @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="467">the callback function to register</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_marshal_guards"
              c:identifier="g_closure_add_marshal_guards"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="365">Adds a pair of notifiers which get invoked before and after the
closure callback, respectively.

This is typically used to protect the extra arguments for the
duration of the callback. See g_object_watch_closure() for an
example of marshal guards.</doc>
        <source-position filename="gobject/gclosure.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="367">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="pre_marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="368">data to pass
 to @pre_marshal_notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pre_marshal_notify"
                     transfer-ownership="none"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="370">a function to call before the closure callback</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
          <parameter name="post_marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="371">data to pass
 to @post_marshal_notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="post_marshal_notify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="373">a function to call after the closure callback</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="g_closure_invalidate">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="572">Sets a flag on the closure to indicate that its calling
environment has become invalid, and thus causes any future
invocations of g_closure_invoke() on this @closure to be
ignored.

Also, invalidation notifiers installed on the closure will
be called at this point. Note that unless you are holding a
reference to the closure yourself, the invalidation notifiers may
unref the closure and cause it to be destroyed, so if you need to
access the closure after calling g_closure_invalidate(), make sure
that you've previously called g_closure_ref().

Note that g_closure_invalidate() will also be called when the
reference count of a closure drops to zero (unless it has already
been invalidated before).</doc>
        <source-position filename="gobject/gclosure.h" line="276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="574">#GClosure to invalidate</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invoke" c:identifier="g_closure_invoke">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="784">Invokes the closure, i.e. executes the callback represented by the @closure.</doc>
        <source-position filename="gobject/gclosure.h" line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="786">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="return_value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="787">a #GValue to store the return
               value. May be %NULL if the callback of @closure
               doesn't return a value.</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="n_param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="790">the length of the @param_values array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="param_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="791">an array of
               #GValues holding the arguments on which to
               invoke the callback of @closure</doc>
            <array length="1" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
          <parameter name="invocation_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="794">a context-dependent invocation hint</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_closure_ref">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="538">Increments the reference count on a closure to force it staying
alive while the caller holds a pointer to it.</doc>
        <source-position filename="gobject/gclosure.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.c"
               line="545">The @closure passed in, for convenience</doc>
          <type name="Closure" c:type="GClosure*"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="540">#GClosure to increment the reference count on</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_finalize_notifier"
              c:identifier="g_closure_remove_finalize_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="756">Removes a finalization notifier.

Notice that notifiers are automatically removed after they are run.</doc>
        <source-position filename="gobject/gclosure.h" line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="758">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="759">data which was passed to g_closure_add_finalize_notifier()
 when registering @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="761">the callback function to remove</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_invalidate_notifier"
              c:identifier="g_closure_remove_invalidate_notifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="728">Removes an invalidation notifier.

Notice that notifiers are automatically removed after they are run.</doc>
        <source-position filename="gobject/gclosure.h" line="259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="730">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="731">data which was passed to g_closure_add_invalidate_notifier()
              when registering @notify_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="733">the callback function to remove</doc>
            <type name="ClosureNotify" c:type="GClosureNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_marshal"
              c:identifier="g_closure_set_marshal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="909">Sets the marshaller of @closure.

The `marshal_data` of @marshal provides a way for a meta marshaller to
provide additional information to the marshaller.

For GObject's C predefined marshallers (the `g_cclosure_marshal_*()`
functions), what it provides is a callback function to use instead of
@closure-&gt;callback.

See also: g_closure_set_meta_marshal()</doc>
        <source-position filename="gobject/gclosure.h" line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="911">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="marshal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="912">a #GClosureMarshal function</doc>
            <type name="ClosureMarshal" c:type="GClosureMarshal"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_meta_marshal"
              c:identifier="g_closure_set_meta_marshal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="320">Sets the meta marshaller of @closure.

A meta marshaller wraps the @closure's marshal and modifies the way
it is called in some fashion. The most common use of this facility
is for C callbacks.

The same marshallers (generated by [glib-genmarshal][glib-genmarshal]),
are used everywhere, but the way that we get the callback function
differs. In most cases we want to use the @closure's callback, but in
other cases we want to use some different technique to retrieve the
callback function.

For example, class closures for signals (see
g_signal_type_cclosure_new()) retrieve the callback function from a
fixed offset in the class structure.  The meta marshaller retrieves
the right callback and passes it to the marshaller as the
@marshal_data argument.</doc>
        <source-position filename="gobject/gclosure.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="322">a #GClosure</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
          <parameter name="marshal_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="323">context-dependent data to pass
 to @meta_marshal</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="meta_marshal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="325">a #GClosureMarshal function</doc>
            <type name="ClosureMarshal" c:type="GClosureMarshal"/>
          </parameter>
        </parameters>
      </method>
      <method name="sink" c:identifier="g_closure_sink">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="654">Takes over the initial ownership of a closure.

Each closure is initially created in a "floating" state, which means
that the initial reference count is not owned by any caller.

This function checks to see if the object is still floating, and if so,
unsets the floating state and decreases the reference count. If the
closure is not floating, g_closure_sink() does nothing.

The reason for the existence of the floating state is to prevent
cumbersome code sequences like:

|[&lt;!-- language="C" --&gt;
closure = g_cclosure_new (cb_func, cb_data);
g_source_set_closure (source, closure);
g_closure_unref (closure); // GObject doesn't really need this
]|

Because g_source_set_closure() (and similar functions) take ownership of the
initial reference count, if it is unowned, we instead can write:

|[&lt;!-- language="C" --&gt;
g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));
]|

Generally, this function is used together with g_closure_ref(). An example
of storing a closure for later notification looks like:

|[&lt;!-- language="C" --&gt;
static GClosure *notify_closure = NULL;
void
foo_notify_set_closure (GClosure *closure)
{
  if (notify_closure)
    g_closure_unref (notify_closure);
  notify_closure = closure;
  if (notify_closure)
    {
      g_closure_ref (notify_closure);
      g_closure_sink (notify_closure);
    }
}
]|

Because g_closure_sink() may decrement the reference count of a closure
(if it hasn't been called on @closure yet) just like g_closure_unref(),
g_closure_ref() should be called prior to this function.</doc>
        <source-position filename="gobject/gclosure.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="656">#GClosure to decrement the initial reference count on, if it's
          still being held</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_closure_unref">
        <doc xml:space="preserve"
             filename="gobject/gclosure.c"
             line="605">Decrements the reference count of a closure after it was previously
incremented by the same caller.

If no other callers are using the closure, then the closure will be
destroyed and freed.</doc>
        <source-position filename="gobject/gclosure.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gclosure.c"
                 line="607">#GClosure to decrement the reference count on</doc>
            <type name="Closure" c:type="GClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="ClosureMarshal" c:type="GClosureMarshal">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="103">The type used for marshaller functions.</doc>
      <source-position filename="gobject/gclosure.h" line="121"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="105">the #GClosure to which the marshaller belongs</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="106">a #GValue to store the return
 value. May be %NULL if the callback of @closure doesn't return a
 value.</doc>
          <type name="Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="109">the length of the @param_values array</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="110">an array of
 #GValues holding the arguments on which to invoke the
 callback of @closure</doc>
          <array length="2" zero-terminated="0" c:type="const GValue*">
            <type name="Value" c:type="GValue"/>
          </array>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="113">the invocation hint given as the
 last argument to g_closure_invoke()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="115">additional data specified when
 registering the marshaller, see g_closure_set_marshal() and
 g_closure_set_meta_marshal()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClosureNotify" c:type="GClosureNotify">
      <doc xml:space="preserve"
           filename="gobject/gclosure.h"
           line="93">The type used for the various notification callbacks which can be registered
on closures.</doc>
      <source-position filename="gobject/gclosure.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="95">data specified when registering the notification callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="closure" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gclosure.h"
               line="96">the #GClosure on which the notification is emitted</doc>
          <type name="Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ClosureNotifyData" c:type="GClosureNotifyData">
      <source-position filename="gobject/gclosure.h" line="171"/>
      <field name="data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="notify" writable="1">
        <type name="ClosureNotify" c:type="GClosureNotify"/>
      </field>
    </record>
    <bitfield name="ConnectFlags" c:type="GConnectFlags">
      <doc xml:space="preserve"
           filename="gobject/gsignal.h"
           line="158">The connection flags are used to specify the behaviour of a signal's
connection.</doc>
      <source-position filename="gobject/gsignal.h" line="175"/>
      <member name="default" value="0" c:identifier="G_CONNECT_DEFAULT">
        <doc xml:space="preserve"
             filename="gobject/gsignal.h"
             line="160">Default behaviour (no special flags). Since: 2.74</doc>
      </member>
      <member name="after" value="1" c:identifier="G_CONNECT_AFTER">
        <doc xml:space="preserve"
             filename="gobject/gsignal.h"
             line="161">If set, the handler should be called after the
 default handler of the signal. Normally, the handler is called before
 the default handler.</doc>
      </member>
      <member name="swapped" value="2" c:identifier="G_CONNECT_SWAPPED">
        <doc xml:space="preserve"
             filename="gobject/gsignal.h"
             line="164">If set, the instance and data should be swapped when
 calling the handler; see g_signal_connect_swapped() for an example.</doc>
      </member>
    </bitfield>
    <function-macro name="DECLARE_DERIVABLE_TYPE"
                    c:identifier="G_DECLARE_DERIVABLE_TYPE"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1617">A convenience macro for emitting the usual declarations in the
header file for a type which is intended to be subclassed.

You might use it in a header as follows:

|[&lt;!-- language="C" --&gt;
#ifndef _gtk_frobber_h_
#define _gtk_frobber_h_

#define GTK_TYPE_FROBBER gtk_frobber_get_type ()
GDK_AVAILABLE_IN_3_12
G_DECLARE_DERIVABLE_TYPE (GtkFrobber, gtk_frobber, GTK, FROBBER, GtkWidget)

struct _GtkFrobberClass
{
  GtkWidgetClass parent_class;

  void (* handle_frob)  (GtkFrobber *frobber,
                         guint       n_frobs);

  gpointer padding[12];
};

GtkWidget *    gtk_frobber_new   (void);

...

#endif
]|

Since the instance structure is public it is often needed to declare a
private struct as follow in your C file:

|[&lt;!-- language="C" --&gt;
typedef struct _GtkFrobberPrivate GtkFrobberPrivate;
struct _GtkFrobberPrivate
{
  ...
};
G_DEFINE_TYPE_WITH_PRIVATE (GtkFrobber, gtk_frobber, GTK_TYPE_WIDGET)
]|

This results in the following things happening:

- the usual `gtk_frobber_get_type()` function is declared with a return type of #GType

- the `GtkFrobber` struct is created with `GtkWidget` as the first and only item.  You are expected to use
  a private structure from your .c file to store your instance variables.

- the `GtkFrobberClass` type is defined as a typedef to `struct _GtkFrobberClass`, which is left undefined.
  You should do this from the header file directly after you use the macro.

- the `GTK_FROBBER()` and `GTK_FROBBER_CLASS()` casts are emitted as `static inline` functions along with
  the `GTK_IS_FROBBER()` and `GTK_IS_FROBBER_CLASS()` type checking functions and `GTK_FROBBER_GET_CLASS()`
  function.

- g_autoptr() support being added for your type, based on the type of your parent class

You can only use this function if your parent type also supports g_autoptr().

Because the type macro (`GTK_TYPE_FROBBER` in the above example) is not a callable, you must continue to
manually define this as a macro for yourself.

The declaration of the `_get_type()` function is the first thing emitted by the macro.  This allows this macro
to be used in the usual way with export control and API versioning macros.

If you are writing a library, it is important to note that it is possible to convert a type from using
G_DECLARE_FINAL_TYPE() to G_DECLARE_DERIVABLE_TYPE() without breaking API or ABI.  As a precaution, you
should therefore use G_DECLARE_FINAL_TYPE() until you are sure that it makes sense for your class to be
subclassed.  Once a class structure has been exposed it is not possible to change its size or remove or
reorder items without breaking the API and/or ABI.  If you want to declare your own class structure, use
G_DECLARE_DERIVABLE_TYPE().  If you want to declare a class without exposing the class or instance
structures, use G_DECLARE_FINAL_TYPE().

If you must use G_DECLARE_DERIVABLE_TYPE() you should be sure to include some padding at the bottom of your
class structure to leave space for the addition of future virtual functions.</doc>
      <source-position filename="gobject/gtype.h" line="1705"/>
      <parameters>
        <parameter name="ModuleObjName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1619">The name of the new type, in camel case (like `GtkWidget`)</doc>
        </parameter>
        <parameter name="module_obj_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1620">The name of the new type in lowercase, with words
 separated by `_` (like `gtk_widget`)</doc>
        </parameter>
        <parameter name="MODULE">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1622">The name of the module, in all caps (like `GTK`)</doc>
        </parameter>
        <parameter name="OBJ_NAME">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1623">The bare name of the type, in all caps (like `WIDGET`)</doc>
        </parameter>
        <parameter name="ParentName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1624">the name of the parent type, in camel case (like `GtkWidget`)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECLARE_FINAL_TYPE"
                    c:identifier="G_DECLARE_FINAL_TYPE"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1525">A convenience macro for emitting the usual declarations in the header file
for a type which is not (at the present time) intended to be subclassed.

You might use it in a header as follows:

|[&lt;!-- language="C" --&gt;
#ifndef _myapp_window_h_
#define _myapp_window_h_

#include &lt;gtk/gtk.h&gt;

#define MY_APP_TYPE_WINDOW my_app_window_get_type ()
G_DECLARE_FINAL_TYPE (MyAppWindow, my_app_window, MY_APP, WINDOW, GtkWindow)

MyAppWindow *    my_app_window_new    (void);

...

#endif
]|

And use it as follow in your C file:

|[&lt;!-- language="C" --&gt;
struct _MyAppWindow
{
 GtkWindow parent;
 ...
};
G_DEFINE_TYPE (MyAppWindow, my_app_window, GTK_TYPE_WINDOW)
]|

This results in the following things happening:

- the usual `my_app_window_get_type()` function is declared with a return type of #GType

- the `MyAppWindow` type is defined as a `typedef` of `struct _MyAppWindow`.  The struct itself is not
  defined and should be defined from the .c file before G_DEFINE_TYPE() is used.

- the `MY_APP_WINDOW()` cast is emitted as `static inline` function along with the `MY_APP_IS_WINDOW()` type
  checking function

- the `MyAppWindowClass` type is defined as a struct containing `GtkWindowClass`.  This is done for the
  convenience of the person defining the type and should not be considered to be part of the ABI.  In
  particular, without a firm declaration of the instance structure, it is not possible to subclass the type
  and therefore the fact that the size of the class structure is exposed is not a concern and it can be
  freely changed at any point in the future.

- g_autoptr() support being added for your type, based on the type of your parent class

You can only use this function if your parent type also supports g_autoptr().

Because the type macro (`MY_APP_TYPE_WINDOW` in the above example) is not a callable, you must continue to
manually define this as a macro for yourself.

The declaration of the `_get_type()` function is the first thing emitted by the macro.  This allows this macro
to be used in the usual way with export control and API versioning macros.

If you want to declare your own class structure, use G_DECLARE_DERIVABLE_TYPE().

If you are writing a library, it is important to note that it is possible to convert a type from using
G_DECLARE_FINAL_TYPE() to G_DECLARE_DERIVABLE_TYPE() without breaking API or ABI.  As a precaution, you
should therefore use G_DECLARE_FINAL_TYPE() until you are sure that it makes sense for your class to be
subclassed.  Once a class structure has been exposed it is not possible to change its size or remove or
reorder items without breaking the API and/or ABI.</doc>
      <source-position filename="gobject/gtype.h" line="1602"/>
      <parameters>
        <parameter name="ModuleObjName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1527">The name of the new type, in camel case (like `GtkWidget`)</doc>
        </parameter>
        <parameter name="module_obj_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1528">The name of the new type in lowercase, with words
 separated by `_` (like `gtk_widget`)</doc>
        </parameter>
        <parameter name="MODULE">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1530">The name of the module, in all caps (like `GTK`)</doc>
        </parameter>
        <parameter name="OBJ_NAME">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1531">The bare name of the type, in all caps (like `WIDGET`)</doc>
        </parameter>
        <parameter name="ParentName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1532">the name of the parent type, in camel case (like `GtkWidget`)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECLARE_INTERFACE"
                    c:identifier="G_DECLARE_INTERFACE"
                    version="2.44"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1727">A convenience macro for emitting the usual declarations in the header file for a #GInterface type.

You might use it in a header as follows:

|[&lt;!-- language="C" --&gt;
#ifndef _my_model_h_
#define _my_model_h_

#define MY_TYPE_MODEL my_model_get_type ()
GDK_AVAILABLE_IN_3_12
G_DECLARE_INTERFACE (MyModel, my_model, MY, MODEL, GObject)

struct _MyModelInterface
{
  GTypeInterface g_iface;

  gpointer (* get_item)  (MyModel *model);
};

gpointer my_model_get_item (MyModel *model);

...

#endif
]|

And use it as follow in your C file:

|[&lt;!-- language="C" --&gt;
G_DEFINE_INTERFACE (MyModel, my_model, G_TYPE_OBJECT);

static void
my_model_default_init (MyModelInterface *iface)
{
  ...
}
]|

This results in the following things happening:

- the usual `my_model_get_type()` function is declared with a return type of #GType

- the `MyModelInterface` type is defined as a typedef to `struct _MyModelInterface`,
  which is left undefined. You should do this from the header file directly after
  you use the macro.

- the `MY_MODEL()` cast is emitted as `static inline` functions along with
  the `MY_IS_MODEL()` type checking function and `MY_MODEL_GET_IFACE()` function.

- g_autoptr() support being added for your type, based on your prerequisite type.

You can only use this function if your prerequisite type also supports g_autoptr().

Because the type macro (`MY_TYPE_MODEL` in the above example) is not a callable, you must continue to
manually define this as a macro for yourself.

The declaration of the `_get_type()` function is the first thing emitted by the macro.  This allows this macro
to be used in the usual way with export control and API versioning macros.</doc>
      <source-position filename="gobject/gtype.h" line="1797"/>
      <parameters>
        <parameter name="ModuleObjName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1729">The name of the new type, in camel case (like `GtkWidget`)</doc>
        </parameter>
        <parameter name="module_obj_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1730">The name of the new type in lowercase, with words
 separated by `_` (like `gtk_widget`)</doc>
        </parameter>
        <parameter name="MODULE">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1732">The name of the module, in all caps (like `GTK`)</doc>
        </parameter>
        <parameter name="OBJ_NAME">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1733">The bare name of the type, in all caps (like `WIDGET`)</doc>
        </parameter>
        <parameter name="PrerequisiteName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1734">the name of the prerequisite type, in camel case (like `GtkWidget`)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ABSTRACT_TYPE"
                    c:identifier="G_DEFINE_ABSTRACT_TYPE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1871">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE(), but defines an abstract type.
See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1885"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1873">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1874">The name of the new type, in lowercase, with words
 separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1876">The #GType of the parent type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ABSTRACT_TYPE_WITH_CODE"
                    c:identifier="G_DEFINE_ABSTRACT_TYPE_WITH_CODE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1886">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE_WITH_CODE(), but defines an abstract type and
allows you to insert custom code into the `*_get_type()` function, e.g.
interface implementations via G_IMPLEMENT_INTERFACE().

See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1904"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1888">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1889">The name of the new type, in lowercase, with words
 separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1891">The #GType of the parent type.</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1892">Custom code that gets inserted in the `type_name_get_type()` function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ABSTRACT_TYPE_WITH_PRIVATE"
                    c:identifier="G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE"
                    version="2.38"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1905">Similar to G_DEFINE_TYPE_WITH_PRIVATE(), but defines an abstract type.

See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1918"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1907">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1908">The name of the new type, in lowercase, with words
 separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1910">The #GType of the parent type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_BOXED_TYPE"
                    c:identifier="G_DEFINE_BOXED_TYPE"
                    version="2.26"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2371">A convenience macro for defining a new custom boxed type.

Using this macro is the recommended way of defining new custom boxed
types, over calling g_boxed_type_register_static() directly. It defines
a `type_name_get_type()` function which will return the newly defined
#GType, enabling lazy instantiation.

You might start by putting declarations in a header as follows:

|[&lt;!-- language="C" --&gt;
#define MY_TYPE_STRUCT my_struct_get_type ()
GType my_struct_get_type (void) G_GNUC_CONST;

MyStruct *    my_struct_new (void);
void          my_struct_free (MyStruct *self);
MyStruct *    my_struct_copy (MyStruct *self);
]|

And then use this macro and define your implementation in the source file as
follows:

|[&lt;!-- language="C" --&gt;
MyStruct *
my_struct_new (void)
{
  // ... your code to allocate a new MyStruct ...
}

void
my_struct_free (MyStruct *self)
{
  // ... your code to free a MyStruct ...
}

MyStruct *
my_struct_copy (MyStruct *self)
{
  // ... your code return a newly allocated copy of a MyStruct ...
}

G_DEFINE_BOXED_TYPE (MyStruct, my_struct, my_struct_copy, my_struct_free)

void
foo ()
{
  MyStruct *ms;

  ms = my_struct_new ();
  // ... your code ...
  my_struct_free (ms);
}
]|</doc>
      <source-position filename="gobject/gtype.h" line="2434"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2373">The name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2374">The name of the new type, in lowercase, with words
 separated by `_`</doc>
        </parameter>
        <parameter name="copy_func">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2376">the #GBoxedCopyFunc for the new type</doc>
        </parameter>
        <parameter name="free_func">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2377">the #GBoxedFreeFunc for the new type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_BOXED_TYPE_WITH_CODE"
                    c:identifier="G_DEFINE_BOXED_TYPE_WITH_CODE"
                    version="2.26"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2435">A convenience macro for boxed type implementations.

Similar to G_DEFINE_BOXED_TYPE(), but allows to insert custom code into the
`type_name_get_type()` function, e.g. to register value transformations with
g_value_register_transform_func(), for instance:

|[&lt;!-- language="C" --&gt;
G_DEFINE_BOXED_TYPE_WITH_CODE (GdkRectangle, gdk_rectangle,
                               gdk_rectangle_copy,
                               gdk_rectangle_free,
                               register_rectangle_transform_funcs (g_define_type_id))
]|

Similarly to the `G_DEFINE_TYPE_*` family of macros, the #GType of the newly
defined boxed type is exposed in the `g_define_type_id` variable.</doc>
      <source-position filename="gobject/gtype.h" line="2462"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2437">The name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2438">The name of the new type, in lowercase, with words
 separated by `_`</doc>
        </parameter>
        <parameter name="copy_func">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2440">the #GBoxedCopyFunc for the new type</doc>
        </parameter>
        <parameter name="free_func">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2441">the #GBoxedFreeFunc for the new type</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2442">Custom code that gets inserted in the `*_get_type()` function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_DYNAMIC_TYPE"
                    c:identifier="G_DEFINE_DYNAMIC_TYPE"
                    version="2.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtypemodule.h"
           line="81">A convenience macro for dynamic type implementations, which declares a
class initialization function, an instance initialization function (see
#GTypeInfo for information about these) and a static variable named
`t_n`_parent_class pointing to the parent class.

Furthermore, it defines a `*_get_type()` and a static `*_register_type()`
functions for use in your `module_init()`.

See G_DEFINE_DYNAMIC_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtypemodule.h" line="100"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="83">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="84">The name of the new type, in lowercase, with words
 separated by '_'.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="86">The #GType of the parent type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_DYNAMIC_TYPE_EXTENDED"
                    c:identifier="G_DEFINE_DYNAMIC_TYPE_EXTENDED"
                    version="2.14"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtypemodule.h"
           line="101">A more general version of G_DEFINE_DYNAMIC_TYPE() which
allows to specify #GTypeFlags and custom code.

|[&lt;!-- language="C" --&gt;
G_DEFINE_DYNAMIC_TYPE_EXTENDED (GtkGadget,
                                gtk_gadget,
                                GTK_TYPE_THING,
                                0,
                                G_IMPLEMENT_INTERFACE_DYNAMIC (TYPE_GIZMO,
                                                               gtk_gadget_gizmo_init));
]|

expands to

|[&lt;!-- language="C" --&gt;
static void     gtk_gadget_init              (GtkGadget      *self);
static void     gtk_gadget_class_init        (GtkGadgetClass *klass);
static void     gtk_gadget_class_finalize    (GtkGadgetClass *klass);

static gpointer gtk_gadget_parent_class = NULL;
static GType    gtk_gadget_type_id = 0;

static void     gtk_gadget_class_intern_init (gpointer klass)
{
  gtk_gadget_parent_class = g_type_class_peek_parent (klass);
  gtk_gadget_class_init ((GtkGadgetClass*) klass);
}

GType
gtk_gadget_get_type (void)
{
  return gtk_gadget_type_id;
}

static void
gtk_gadget_register_type (GTypeModule *type_module)
{
  const GTypeInfo g_define_type_info = {
    sizeof (GtkGadgetClass),
    (GBaseInitFunc) NULL,
    (GBaseFinalizeFunc) NULL,
    (GClassInitFunc) gtk_gadget_class_intern_init,
    (GClassFinalizeFunc) gtk_gadget_class_finalize,
    NULL,   // class_data
    sizeof (GtkGadget),
    0,      // n_preallocs
    (GInstanceInitFunc) gtk_gadget_init,
    NULL    // value_table
  };
  gtk_gadget_type_id = g_type_module_register_type (type_module,
                                                    GTK_TYPE_THING,
                                                    "GtkGadget",
                                                    &amp;g_define_type_info,
                                                    (GTypeFlags) flags);
  {
    const GInterfaceInfo g_implement_interface_info = {
      (GInterfaceInitFunc) gtk_gadget_gizmo_init
    };
    g_type_module_add_interface (type_module, g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);
  }
}
]|</doc>
      <source-position filename="gobject/gtypemodule.h" line="175"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="103">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="104">The name of the new type, in lowercase, with words
 separated by '_'.</doc>
        </parameter>
        <parameter name="TYPE_PARENT">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="106">The #GType of the parent type.</doc>
        </parameter>
        <parameter name="flags">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="107">#GTypeFlags to pass to g_type_module_register_type()</doc>
        </parameter>
        <parameter name="CODE">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="108">Custom code that gets inserted in the *_get_type() function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ENUM_TYPE"
                    c:identifier="G_DEFINE_ENUM_TYPE"
                    version="2.74"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="297">A convenience macro for defining enumeration types.

This macro will generate a `*_get_type()` function for the
given @TypeName, using @type_name as the function prefix.

|[&lt;!-- language="C" --&gt;
G_DEFINE_ENUM_TYPE (GtkOrientation, gtk_orientation,
  G_DEFINE_ENUM_VALUE (GTK_ORIENTATION_HORIZONTAL, "horizontal"),
  G_DEFINE_ENUM_VALUE (GTK_ORIENTATION_VERTICAL, "vertical"))
]|

For projects that have multiple enumeration types, or enumeration
types with many values, you should consider using glib-mkenums to
generate the type function.</doc>
      <source-position filename="gobject/genums.h" line="320"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="299">the enumeration type, in `CamelCase`</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="300">the enumeration type prefixed, in `snake_case`</doc>
        </parameter>
        <parameter name="...">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="301">a list of enumeration values, defined using G_DEFINE_ENUM_VALUE()</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ENUM_VALUE"
                    c:identifier="G_DEFINE_ENUM_VALUE"
                    version="2.74"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="281">Defines an enumeration value, and maps it to a "nickname".

This macro can only be used with G_DEFINE_ENUM_TYPE() and
G_DEFINE_FLAGS_TYPE().</doc>
      <source-position filename="gobject/genums.h" line="293"/>
      <parameters>
        <parameter name="EnumValue">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="283">an enumeration value</doc>
        </parameter>
        <parameter name="EnumNick">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="284">a short string representing the enumeration value</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_FINAL_TYPE"
                    c:identifier="G_DEFINE_FINAL_TYPE"
                    version="2.70"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1919">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE(), but defines a final type.

See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1934"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1921">the name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1922">the name of the new type, in lower case, with words
  separated by `_` (snake case)</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1924">the #GType of the parent type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_FINAL_TYPE_WITH_CODE"
                    c:identifier="G_DEFINE_FINAL_TYPE_WITH_CODE"
                    version="2.70"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1935">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE_WITH_CODE(), but defines a final type and
allows you to insert custom code into the `*_get_type()` function, e.g.
interface implementations via G_IMPLEMENT_INTERFACE().

See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1953"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1937">the name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1938">the name of the new type, in lower case, with words
  separated by `_` (snake case)</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1940">the #GType of the parent type</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1941">Custom code that gets inserted in the `type_name_get_type()` function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_FINAL_TYPE_WITH_PRIVATE"
                    c:identifier="G_DEFINE_FINAL_TYPE_WITH_PRIVATE"
                    version="2.70"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1954">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE_WITH_PRIVATE(), but defines a final type.

See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1969"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1956">the name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1957">the name of the new type, in lower case, with words
  separated by `_` (snake case)</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1959">the #GType of the parent type</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_FLAGS_TYPE"
                    c:identifier="G_DEFINE_FLAGS_TYPE"
                    version="2.74"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="336">A convenience macro for defining flag types.

This macro will generate a `*_get_type()` function for the
given @TypeName, using @type_name as the function prefix.

|[&lt;!-- language="C" --&gt;
G_DEFINE_FLAGS_TYPE (GSettingsBindFlags, g_settings_bind_flags,
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_DEFAULT, "default"),
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_GET, "get"),
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_SET, "set"),
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_NO_SENSITIVITY, "no-sensitivity"),
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_GET_NO_CHANGES, "get-no-changes"),
  G_DEFINE_ENUM_VALUE (G_SETTINGS_BIND_INVERT_BOOLEAN, "invert-boolean"))
]|

For projects that have multiple enumeration types, or enumeration
types with many values, you should consider using glib-mkenums to
generate the type function.</doc>
      <source-position filename="gobject/genums.h" line="363"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="338">the enumeration type, in `CamelCase`</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="339">the enumeration type prefixed, in `snake_case`</doc>
        </parameter>
        <parameter name="...">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="340">a list of enumeration values, defined using G_DEFINE_ENUM_VALUE()</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_INTERFACE"
                    c:identifier="G_DEFINE_INTERFACE"
                    version="2.24"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2049">A convenience macro for #GTypeInterface definitions, which declares
a default vtable initialization function and defines a `*_get_type()`
function.

The macro expects the interface initialization function to have the
name `t_n ## _default_init`, and the interface structure to have the
name `TN ## Interface`.

The initialization function has signature
`static void t_n ## _default_init (TypeName##Interface *klass);`, rather than
the full #GInterfaceInitFunc signature, for brevity and convenience. If you
need to use an initialization function with an `iface_data` argument, you
must write the #GTypeInterface definitions manually.</doc>
      <source-position filename="gobject/gtype.h" line="2072"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2051">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2052">The name of the new type, in lowercase, with words separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2053">The #GType of the prerequisite type for the interface, or %G_TYPE_INVALID
for no prerequisite type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_INTERFACE_WITH_CODE"
                    c:identifier="G_DEFINE_INTERFACE_WITH_CODE"
                    version="2.24"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2074">A convenience macro for #GTypeInterface definitions.

Similar to G_DEFINE_INTERFACE(), but allows you to insert custom code
into the `*_get_type()` function, e.g. additional interface implementations
via G_IMPLEMENT_INTERFACE(), or additional prerequisite types.

See G_DEFINE_TYPE_EXTENDED() for a similar example using
G_DEFINE_TYPE_WITH_CODE().</doc>
      <source-position filename="gobject/gtype.h" line="2093"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2076">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2077">The name of the new type, in lowercase, with words separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2078">The #GType of the prerequisite type for the interface, or %G_TYPE_INVALID
for no prerequisite type.</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2080">Custom code that gets inserted in the `*_get_type()` function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_POINTER_TYPE"
                    c:identifier="G_DEFINE_POINTER_TYPE"
                    version="2.26"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2532">A convenience macro for pointer type implementations, which defines a
`type_name_get_type()` function registering the pointer type.</doc>
      <source-position filename="gobject/gtype.h" line="2543"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2534">The name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2535">The name of the new type, in lowercase, with words
 separated by `_`</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_POINTER_TYPE_WITH_CODE"
                    c:identifier="G_DEFINE_POINTER_TYPE_WITH_CODE"
                    version="2.26"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2544">A convenience macro for pointer type implementations.
Similar to G_DEFINE_POINTER_TYPE(), but allows to insert
custom code into the `type_name_get_type()` function.</doc>
      <source-position filename="gobject/gtype.h" line="2557"/>
      <parameters>
        <parameter name="TypeName">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2546">The name of the new type, in Camel case</doc>
        </parameter>
        <parameter name="type_name">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2547">The name of the new type, in lowercase, with words
 separated by `_`</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2549">Custom code that gets inserted in the `*_get_type()` function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_TYPE"
                    c:identifier="G_DEFINE_TYPE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1813">A convenience macro for type implementations, which declares a class
initialization function, an instance initialization function (see #GTypeInfo
for information about these) and a static variable named `t_n_parent_class`
pointing to the parent class. Furthermore, it defines a `*_get_type()` function.
See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1828"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1815">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1816">The name of the new type, in lowercase, with words
 separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1818">The #GType of the parent type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_TYPE_EXTENDED"
                    c:identifier="G_DEFINE_TYPE_EXTENDED"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1970">The most general convenience macro for type implementations, on which
G_DEFINE_TYPE(), etc are based.

|[&lt;!-- language="C" --&gt;
G_DEFINE_TYPE_EXTENDED (GtkGadget,
                        gtk_gadget,
                        GTK_TYPE_WIDGET,
                        0,
                        G_ADD_PRIVATE (GtkGadget)
                        G_IMPLEMENT_INTERFACE (TYPE_GIZMO,
                                               gtk_gadget_gizmo_init));
]|

expands to

|[&lt;!-- language="C" --&gt;
static void     gtk_gadget_init       (GtkGadget      *self);
static void     gtk_gadget_class_init (GtkGadgetClass *klass);
static gpointer gtk_gadget_parent_class = NULL;
static gint     GtkGadget_private_offset;
static void     gtk_gadget_class_intern_init (gpointer klass)
{
  gtk_gadget_parent_class = g_type_class_peek_parent (klass);
  if (GtkGadget_private_offset != 0)
    g_type_class_adjust_private_offset (klass, &amp;GtkGadget_private_offset);
  gtk_gadget_class_init ((GtkGadgetClass*) klass);
}
static inline gpointer gtk_gadget_get_instance_private (GtkGadget *self)
{
  return (G_STRUCT_MEMBER_P (self, GtkGadget_private_offset));
}

GType
gtk_gadget_get_type (void)
{
  static GType static_g_define_type_id = 0;
  if (g_once_init_enter_pointer (&amp;static_g_define_type_id))
    {
      GType g_define_type_id =
        g_type_register_static_simple (GTK_TYPE_WIDGET,
                                       g_intern_static_string ("GtkGadget"),
                                       sizeof (GtkGadgetClass),
                                       (GClassInitFunc) gtk_gadget_class_intern_init,
                                       sizeof (GtkGadget),
                                       (GInstanceInitFunc) gtk_gadget_init,
                                       0);
      {
        GtkGadget_private_offset =
          g_type_add_instance_private (g_define_type_id, sizeof (GtkGadgetPrivate));
      }
      {
        const GInterfaceInfo g_implement_interface_info = {
          (GInterfaceInitFunc) gtk_gadget_gizmo_init
        };
        g_type_add_interface_static (g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);
      }
      g_once_init_leave_pointer (&amp;static_g_define_type_id, g_define_type_id);
    }
  return static_g_define_type_id;
}
]|

The only pieces which have to be manually provided are the definitions of
the instance and class structure and the definitions of the instance and
class init functions.</doc>
      <source-position filename="gobject/gtype.h" line="2047"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1972">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1973">The name of the new type, in lowercase, with words
   separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1975">The #GType of the parent type.</doc>
        </parameter>
        <parameter name="_f_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1976">#GTypeFlags to pass to g_type_register_static()</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1977">Custom code that gets inserted in the `*_get_type()` function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_TYPE_WITH_CODE"
                    c:identifier="G_DEFINE_TYPE_WITH_CODE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1829">A convenience macro for type implementations.

Similar to G_DEFINE_TYPE(), but allows you to insert custom code into the
`*_get_type()` function, e.g. interface implementations via G_IMPLEMENT_INTERFACE().
See G_DEFINE_TYPE_EXTENDED() for an example.</doc>
      <source-position filename="gobject/gtype.h" line="1844"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1831">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1832">The name of the new type in lowercase, with words separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1833">The #GType of the parent type.</doc>
        </parameter>
        <parameter name="_C_">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1834">Custom code that gets inserted in the `*_get_type()` function.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_TYPE_WITH_PRIVATE"
                    c:identifier="G_DEFINE_TYPE_WITH_PRIVATE"
                    version="2.38"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1845">A convenience macro for type implementations, which declares a class
initialization function, an instance initialization function (see #GTypeInfo
for information about these), a static variable named `t_n_parent_class`
pointing to the parent class, and adds private instance data to the type.

Furthermore, it defines a `*_get_type()` function. See G_DEFINE_TYPE_EXTENDED()
for an example.

Note that private structs added with this macros must have a struct
name of the form `TN ## Private`.

The private instance data can be retrieved using the automatically generated
getter function `t_n_get_instance_private()`.

See also: G_ADD_PRIVATE()</doc>
      <source-position filename="gobject/gtype.h" line="1870"/>
      <parameters>
        <parameter name="TN">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1847">The name of the new type, in Camel case.</doc>
        </parameter>
        <parameter name="t_n">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1848">The name of the new type, in lowercase, with words
 separated by `_`.</doc>
        </parameter>
        <parameter name="T_P">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1850">The #GType of the parent type.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_26_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="42"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_28_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="76"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_30_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="110"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_32_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="144"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_34_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="178"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_36_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="212"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_38_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="246"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_40_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="280"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_42_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="314"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_44_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="348"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_46_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="382"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_48_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="416"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_50_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="450"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_52_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="484"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_54_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="518"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_56_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="552"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_58_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="586"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_60_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="620"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_62_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="654"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_64_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="688"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_66_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="722"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_68_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="756"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_70_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="790"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_72_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="824"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_74_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="858"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_76_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="892"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_78_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="926"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_80_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="960"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_ENUMERATOR_IN_2_82_FOR"
                    c:identifier="GOBJECT_DEPRECATED_ENUMERATOR_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="994"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="GOBJECT_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="26"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_26_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="38"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_28_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="72"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_30_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="106"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_32_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="140"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_34_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="174"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_36_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="208"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_38_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="242"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_40_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="276"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_42_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="310"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_44_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="344"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_46_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="378"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_48_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="412"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_50_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="446"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_52_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="480"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_54_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="514"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_56_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="548"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_58_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="582"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_60_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="616"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_62_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="650"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_64_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="684"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_66_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="718"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_68_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="752"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_70_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="786"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_72_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="820"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_74_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="854"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_76_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="888"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_78_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="922"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_80_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="956"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_2_82_FOR"
                    c:identifier="GOBJECT_DEPRECATED_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="990"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_26_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="40"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_28_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="74"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_30_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="108"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_32_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="142"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_34_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="176"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_36_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="210"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_38_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="244"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_40_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="278"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_42_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="312"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_44_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="346"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_46_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="380"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_48_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="414"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_50_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="448"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_52_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="482"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_54_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="516"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_56_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="550"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_58_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="584"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_60_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="618"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_62_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="652"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_64_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="686"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_66_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="720"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_68_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="754"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_70_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="788"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_72_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="822"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_74_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="856"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_76_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="890"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_78_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="924"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_80_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="958"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_MACRO_IN_2_82_FOR"
                    c:identifier="GOBJECT_DEPRECATED_MACRO_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="992"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_26_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_26_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="44"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_28_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_28_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="78"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_30_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_30_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="112"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_32_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_32_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="146"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_34_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_34_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="180"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_36_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_36_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="214"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_38_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_38_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="248"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_40_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_40_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="282"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_42_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_42_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="316"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_44_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_44_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="350"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_46_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_46_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="384"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_48_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_48_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="418"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_50_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_50_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="452"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_52_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_52_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="486"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_54_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_54_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="520"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_56_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_56_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="554"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_58_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_58_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="588"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_60_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_60_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="622"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_62_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_62_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="656"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_64_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_64_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="690"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_66_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_66_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="724"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_68_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_68_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="758"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_70_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_70_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="792"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_72_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_72_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="826"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_74_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_74_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="860"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_76_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_76_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="894"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_78_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_78_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="928"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_80_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_80_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="962"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_2_82_FOR"
                    c:identifier="GOBJECT_DEPRECATED_TYPE_IN_2_82_FOR"
                    introspectable="0">
      <source-position filename="gobject/gobject-visibility.h" line="996"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <glib:boxed glib:name="Date"
                c:symbol-prefix="date"
                glib:type-name="GDate"
                glib:get-type="g_date_get_type">
    </glib:boxed>
    <glib:boxed glib:name="DateTime"
                c:symbol-prefix="date_time"
                glib:type-name="GDateTime"
                glib:get-type="g_date_time_get_type">
    </glib:boxed>
    <glib:boxed glib:name="Dir"
                c:symbol-prefix="dir"
                glib:type-name="GDir"
                glib:get-type="g_dir_get_type">
    </glib:boxed>
    <function-macro name="ENUM_CLASS"
                    c:identifier="G_ENUM_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="40">Casts a derived #GEnumClass structure into a #GEnumClass structure.</doc>
      <source-position filename="gobject/genums.h" line="46"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="42">a valid #GEnumClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENUM_CLASS_TYPE"
                    c:identifier="G_ENUM_CLASS_TYPE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="55">Get the type identifier from a given #GEnumClass structure.</doc>
      <source-position filename="gobject/genums.h" line="63"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="57">a #GEnumClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENUM_CLASS_TYPE_NAME"
                    c:identifier="G_ENUM_CLASS_TYPE_NAME"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="64">Get the static type name from a given #GEnumClass structure.</doc>
      <source-position filename="gobject/genums.h" line="72"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="66">a #GEnumClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="EnumClass" c:type="GEnumClass">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="145">The class of an enumeration type holds information about its
possible values.</doc>
      <source-position filename="gobject/genums.h" line="166"/>
      <field name="g_type_class" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="147">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="minimum" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="148">the smallest possible value.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="maximum" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="149">the largest possible value.</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="n_values" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="150">the number of possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="values" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="151">an array of #GEnumValue structs describing the
 individual values.</doc>
        <type name="EnumValue" c:type="GEnumValue*"/>
      </field>
    </record>
    <record name="EnumValue" c:type="GEnumValue">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="187">A structure which contains a single enum value, its name, and its
nickname.</doc>
      <source-position filename="gobject/genums.h" line="201"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="189">the enum value</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="value_name" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="190">the name of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_nick" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="191">the nickname of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <glib:boxed glib:name="Error"
                c:symbol-prefix="error"
                glib:type-name="GError"
                glib:get-type="g_error_get_type">
    </glib:boxed>
    <function-macro name="FLAGS_CLASS"
                    c:identifier="G_FLAGS_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="84">Casts a derived #GFlagsClass structure into a #GFlagsClass structure.</doc>
      <source-position filename="gobject/genums.h" line="90"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="86">a valid #GFlagsClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FLAGS_CLASS_TYPE"
                    c:identifier="G_FLAGS_CLASS_TYPE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="99">Get the type identifier from a given #GFlagsClass structure.</doc>
      <source-position filename="gobject/genums.h" line="107"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="101">a #GFlagsClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FLAGS_CLASS_TYPE_NAME"
                    c:identifier="G_FLAGS_CLASS_TYPE_NAME"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="108">Get the static type name from a given #GFlagsClass structure.</doc>
      <source-position filename="gobject/genums.h" line="116"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="110">a #GFlagsClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <record name="FlagsClass" c:type="GFlagsClass">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="167">The class of a flags type holds information about its
possible values.</doc>
      <source-position filename="gobject/genums.h" line="186"/>
      <field name="g_type_class" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="169">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="mask" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="170">a mask covering all possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_values" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="171">the number of possible values.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="values" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="172">an array of #GFlagsValue structs describing the
 individual values.</doc>
        <type name="FlagsValue" c:type="GFlagsValue*"/>
      </field>
    </record>
    <record name="FlagsValue" c:type="GFlagsValue">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="202">A structure which contains a single flags value, its name, and its
nickname.</doc>
      <source-position filename="gobject/genums.h" line="216"/>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="204">the flags value</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="value_name" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="205">the name of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="value_nick" writable="1">
        <doc xml:space="preserve"
             filename="gobject/genums.h"
             line="206">the nickname of the value</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <glib:boxed glib:name="HashTable"
                c:symbol-prefix="hash_table"
                glib:type-name="GHashTable"
                glib:get-type="g_hash_table_get_type">
    </glib:boxed>
    <glib:boxed glib:name="Hmac"
                c:symbol-prefix="hmac"
                glib:type-name="GHmac"
                glib:get-type="g_hmac_get_type">
    </glib:boxed>
    <function-macro name="IMPLEMENT_INTERFACE"
                    c:identifier="G_IMPLEMENT_INTERFACE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="2095">A convenience macro to ease interface addition in the `_C_` section
of G_DEFINE_TYPE_WITH_CODE() or G_DEFINE_ABSTRACT_TYPE_WITH_CODE().
See G_DEFINE_TYPE_EXTENDED() for an example.

Note that this macro can only be used together with the `G_DEFINE_TYPE_*`
macros, since it depends on variable names from those macros.</doc>
      <source-position filename="gobject/gtype.h" line="2109"/>
      <parameters>
        <parameter name="TYPE_IFACE">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2097">The #GType of the interface to add</doc>
        </parameter>
        <parameter name="iface_init">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="2098">The interface init function, of type #GInterfaceInitFunc</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IMPLEMENT_INTERFACE_DYNAMIC"
                    c:identifier="G_IMPLEMENT_INTERFACE_DYNAMIC"
                    version="2.24"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gtypemodule.h"
           line="222">A convenience macro to ease interface addition in the @_C_ section
of G_DEFINE_DYNAMIC_TYPE_EXTENDED().

See G_DEFINE_DYNAMIC_TYPE_EXTENDED() for an example.

Note that this macro can only be used together with the
G_DEFINE_DYNAMIC_TYPE_EXTENDED macros, since it depends on variable
names from that macro.</doc>
      <source-position filename="gobject/gtypemodule.h" line="238"/>
      <parameters>
        <parameter name="TYPE_IFACE">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="224">The #GType of the interface to add</doc>
        </parameter>
        <parameter name="iface_init">
          <doc xml:space="preserve"
               filename="gobject/gtypemodule.h"
               line="225">The interface init function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INITIALLY_UNOWNED"
                    c:identifier="G_INITIALLY_UNOWNED"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="145">Casts a #GInitiallyUnowned or derived pointer into a (GInitiallyUnowned*)
pointer.

Depending on the current debugging level, this function may invoke
certain runtime checks to identify invalid casts.</doc>
      <source-position filename="gobject/gobject.h" line="155"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="147">Object which is subject to casting.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INITIALLY_UNOWNED_CLASS"
                    c:identifier="G_INITIALLY_UNOWNED_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="156">Casts a derived #GInitiallyUnownedClass structure into a
#GInitiallyUnownedClass structure.</doc>
      <source-position filename="gobject/gobject.h" line="163"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="158">a valid #GInitiallyUnownedClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INITIALLY_UNOWNED_GET_CLASS"
                    c:identifier="G_INITIALLY_UNOWNED_GET_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="179">Get the class structure associated to a #GInitiallyUnowned instance.</doc>
      <source-position filename="gobject/gobject.h" line="187"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="181">a #GInitiallyUnowned instance.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <glib:boxed glib:name="IOChannel"
                c:symbol-prefix="io_channel"
                glib:type-name="GIOChannel"
                glib:get-type="g_io_channel_get_type">
    </glib:boxed>
    <bitfield name="IOCondition"
              glib:type-name="GIOCondition"
              glib:get-type="g_io_condition_get_type"
              c:type="GIOCondition">
      <member name="in"
              value="1"
              c:identifier="G_IO_IN"
              glib:nick="in"
              glib:name="G_IO_IN">
      </member>
      <member name="out"
              value="4"
              c:identifier="G_IO_OUT"
              glib:nick="out"
              glib:name="G_IO_OUT">
      </member>
      <member name="pri"
              value="2"
              c:identifier="G_IO_PRI"
              glib:nick="pri"
              glib:name="G_IO_PRI">
      </member>
      <member name="err"
              value="8"
              c:identifier="G_IO_ERR"
              glib:nick="err"
              glib:name="G_IO_ERR">
      </member>
      <member name="hup"
              value="16"
              c:identifier="G_IO_HUP"
              glib:nick="hup"
              glib:name="G_IO_HUP">
      </member>
      <member name="nval"
              value="32"
              c:identifier="G_IO_NVAL"
              glib:nick="nval"
              glib:name="G_IO_NVAL">
      </member>
    </bitfield>
    <function-macro name="IS_BINDING"
                    c:identifier="G_IS_BINDING"
                    introspectable="0">
      <source-position filename="gobject/gbinding.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BINDING_GROUP"
                    c:identifier="G_IS_BINDING_GROUP"
                    introspectable="0">
      <source-position filename="gobject/gbindinggroup.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENUM_CLASS"
                    c:identifier="G_IS_ENUM_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="47">Checks whether @class "is a" valid #GEnumClass structure of type %G_TYPE_ENUM
or derived.</doc>
      <source-position filename="gobject/genums.h" line="54"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="49">a #GEnumClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FLAGS_CLASS"
                    c:identifier="G_IS_FLAGS_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/genums.h"
           line="91">Checks whether @class "is a" valid #GFlagsClass structure of type %G_TYPE_FLAGS
or derived.</doc>
      <source-position filename="gobject/genums.h" line="98"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/genums.h"
               line="93">a #GFlagsClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INITIALLY_UNOWNED"
                    c:identifier="G_IS_INITIALLY_UNOWNED"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="164">Checks whether a valid #GTypeInstance pointer is of type %G_TYPE_INITIALLY_UNOWNED.</doc>
      <source-position filename="gobject/gobject.h" line="170"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="166">Instance to check for being a %G_TYPE_INITIALLY_UNOWNED.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INITIALLY_UNOWNED_CLASS"
                    c:identifier="G_IS_INITIALLY_UNOWNED_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="171">Checks whether @class "is a" valid #GInitiallyUnownedClass structure of type
%G_TYPE_INITIALLY_UNOWNED or derived.</doc>
      <source-position filename="gobject/gobject.h" line="178"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="173">a #GInitiallyUnownedClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="G_IS_OBJECT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="62">Checks whether a valid #GTypeInstance pointer is of type %G_TYPE_OBJECT.</doc>
      <source-position filename="gobject/gobject.h" line="69"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="64">Instance to check for being a %G_TYPE_OBJECT.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_CLASS"
                    c:identifier="G_IS_OBJECT_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="73">Checks whether @class "is a" valid #GObjectClass structure of type
%G_TYPE_OBJECT or derived.</doc>
      <source-position filename="gobject/gobject.h" line="80"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="75">a #GObjectClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC"
                    c:identifier="G_IS_PARAM_SPEC"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparam.h"
           line="48">Checks whether @pspec "is a" valid #GParamSpec structure of type %G_TYPE_PARAM
or derived.</doc>
      <source-position filename="gobject/gparam.h" line="56"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparam.h"
               line="50">a #GParamSpec</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_BOOLEAN"
                    c:identifier="G_IS_PARAM_SPEC_BOOLEAN"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="88">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_BOOLEAN.</doc>
      <source-position filename="gobject/gparamspecs.h" line="96"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="90">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_BOXED"
                    c:identifier="G_IS_PARAM_SPEC_BOXED"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="410">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_BOXED.</doc>
      <source-position filename="gobject/gparamspecs.h" line="418"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="412">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_CHAR"
                    c:identifier="G_IS_PARAM_SPEC_CHAR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="42">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_CHAR.</doc>
      <source-position filename="gobject/gparamspecs.h" line="50"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="44">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_CLASS"
                    c:identifier="G_IS_PARAM_SPEC_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparam.h"
           line="67">Checks whether @pclass "is a" valid #GParamSpecClass structure of type
%G_TYPE_PARAM or derived.</doc>
      <source-position filename="gobject/gparam.h" line="74"/>
      <parameters>
        <parameter name="pclass">
          <doc xml:space="preserve"
               filename="gobject/gparam.h"
               line="69">a #GParamSpecClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_DOUBLE"
                    c:identifier="G_IS_PARAM_SPEC_DOUBLE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="341">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_DOUBLE.</doc>
      <source-position filename="gobject/gparamspecs.h" line="349"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="343">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_ENUM"
                    c:identifier="G_IS_PARAM_SPEC_ENUM"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="272">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_ENUM.</doc>
      <source-position filename="gobject/gparamspecs.h" line="280"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="274">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_FLAGS"
                    c:identifier="G_IS_PARAM_SPEC_FLAGS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="295">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_FLAGS.</doc>
      <source-position filename="gobject/gparamspecs.h" line="303"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="297">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_FLOAT"
                    c:identifier="G_IS_PARAM_SPEC_FLOAT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="318">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_FLOAT.</doc>
      <source-position filename="gobject/gparamspecs.h" line="326"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="320">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_GTYPE"
                    c:identifier="G_IS_PARAM_SPEC_GTYPE"
                    version="2.10"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="538">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_GTYPE.</doc>
      <source-position filename="gobject/gparamspecs.h" line="547"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="540">a #GParamSpec</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_INT"
                    c:identifier="G_IS_PARAM_SPEC_INT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="111">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_INT.</doc>
      <source-position filename="gobject/gparamspecs.h" line="119"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="113">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_INT64"
                    c:identifier="G_IS_PARAM_SPEC_INT64"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="203">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_INT64.</doc>
      <source-position filename="gobject/gparamspecs.h" line="211"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="205">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_LONG"
                    c:identifier="G_IS_PARAM_SPEC_LONG"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="157">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_LONG.</doc>
      <source-position filename="gobject/gparamspecs.h" line="165"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="159">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_OBJECT"
                    c:identifier="G_IS_PARAM_SPEC_OBJECT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="485">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_OBJECT.</doc>
      <source-position filename="gobject/gparamspecs.h" line="493"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="487">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_OVERRIDE"
                    c:identifier="G_IS_PARAM_SPEC_OVERRIDE"
                    version="2.4"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="510">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_OVERRIDE.</doc>
      <source-position filename="gobject/gparamspecs.h" line="519"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="512">a #GParamSpec</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_PARAM"
                    c:identifier="G_IS_PARAM_SPEC_PARAM"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="387">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_PARAM.</doc>
      <source-position filename="gobject/gparamspecs.h" line="395"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="389">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_POINTER"
                    c:identifier="G_IS_PARAM_SPEC_POINTER"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="433">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_POINTER.</doc>
      <source-position filename="gobject/gparamspecs.h" line="441"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="435">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_STRING"
                    c:identifier="G_IS_PARAM_SPEC_STRING"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="364">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_STRING.</doc>
      <source-position filename="gobject/gparamspecs.h" line="372"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="366">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_UCHAR"
                    c:identifier="G_IS_PARAM_SPEC_UCHAR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="65">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_UCHAR.</doc>
      <source-position filename="gobject/gparamspecs.h" line="73"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="67">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_UINT"
                    c:identifier="G_IS_PARAM_SPEC_UINT"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="134">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_UINT.</doc>
      <source-position filename="gobject/gparamspecs.h" line="142"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="136">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_UINT64"
                    c:identifier="G_IS_PARAM_SPEC_UINT64"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="226">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_UINT64.</doc>
      <source-position filename="gobject/gparamspecs.h" line="234"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="228">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_ULONG"
                    c:identifier="G_IS_PARAM_SPEC_ULONG"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="180">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_ULONG.</doc>
      <source-position filename="gobject/gparamspecs.h" line="188"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="182">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_UNICHAR"
                    c:identifier="G_IS_PARAM_SPEC_UNICHAR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="256">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_UNICHAR.</doc>
      <source-position filename="gobject/gparamspecs.h" line="264"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="258">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_VALUE_ARRAY"
                    c:identifier="G_IS_PARAM_SPEC_VALUE_ARRAY"
                    introspectable="0"
                    deprecated="1"
                    deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="458">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_VALUE_ARRAY.</doc>
      <doc-deprecated xml:space="preserve">Use #GArray instead of #GValueArray</doc-deprecated>
      <source-position filename="gobject/gparamspecs.h" line="468"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="460">a valid #GParamSpec instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARAM_SPEC_VARIANT"
                    c:identifier="G_IS_PARAM_SPEC_VARIANT"
                    version="2.26"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gparamspecs.h"
           line="566">Checks whether the given #GParamSpec is of type %G_TYPE_PARAM_VARIANT.</doc>
      <source-position filename="gobject/gparamspecs.h" line="576"/>
      <parameters>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gparamspecs.h"
               line="568">a #GParamSpec</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIGNAL_GROUP"
                    c:identifier="G_IS_SIGNAL_GROUP"
                    introspectable="0">
      <source-position filename="gobject/gsignalgroup.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TYPE_MODULE"
                    c:identifier="G_IS_TYPE_MODULE"
                    introspectable="0">
      <source-position filename="gobject/gtypemodule.h" line="37"/>
      <parameters>
        <parameter name="module">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TYPE_MODULE_CLASS"
                    c:identifier="G_IS_TYPE_MODULE_CLASS"
                    introspectable="0">
      <source-position filename="gobject/gtypemodule.h" line="38"/>
      <parameters>
        <parameter name="class">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TYPE_PLUGIN"
                    c:identifier="G_IS_TYPE_PLUGIN"
                    introspectable="0">
      <source-position filename="gobject/gtypeplugin.h" line="34"/>
      <parameters>
        <parameter name="inst">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TYPE_PLUGIN_CLASS"
                    c:identifier="G_IS_TYPE_PLUGIN_CLASS"
                    introspectable="0">
      <source-position filename="gobject/gtypeplugin.h" line="35"/>
      <parameters>
        <parameter name="vtable">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VALUE"
                    c:identifier="G_IS_VALUE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gvalue.h"
           line="45">Checks if @value is a valid and initialized #GValue structure.</doc>
      <source-position filename="gobject/gvalue.h" line="53"/>
      <parameters>
        <parameter name="value">
          <doc xml:space="preserve"
               filename="gobject/gvalue.h"
               line="47">A #GValue structure.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="InitiallyUnowned"
           c:symbol-prefix="initially_unowned"
           c:type="GInitiallyUnowned"
           parent="Object"
           glib:type-name="GInitiallyUnowned"
           glib:get-type="g_initially_unowned_get_type"
           glib:type-struct="InitiallyUnownedClass">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="382">A type for objects that have an initially floating reference.

All the fields in the `GInitiallyUnowned` structure are private to the
implementation and should never be accessed directly.</doc>
      <source-position filename="gobject/gobject.h" line="195"/>
      <field name="g_type_instance">
        <type name="TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="qdata" readable="0" private="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
    </class>
    <record name="InitiallyUnownedClass"
            c:type="GInitiallyUnownedClass"
            glib:is-gtype-struct-for="InitiallyUnowned">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="390">The class structure for the GInitiallyUnowned type.</doc>
      <source-position filename="gobject/gobject.h" line="195"/>
      <field name="g_type_class">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="262">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="construct_properties" readable="0" private="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="constructor" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="263">the @constructor function is called by g_object_new () to
 complete the object initialization after all the construction properties are
 set. The first thing a @constructor implementation must do is chain up to the
 @constructor of the parent class. Overriding @constructor should be rarely
 needed, e.g. to handle construct properties, or to implement singletons.</doc>
        <callback name="constructor" introspectable="0">
          <source-position filename="gobject/gobject.h" line="331"/>
          <return-value>
            <type name="Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="type" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="n_construct_properties" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="construct_properties" transfer-ownership="none">
              <type name="ObjectConstructParam"
                    c:type="GObjectConstructParam*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="268">the generic setter for all properties of this type. Should be
 overridden for every type with properties. If implementations of
 @set_property don't emit property change notification explicitly, this will
 be done implicitly by the type system. However, if the notify signal is
 emitted explicitly, the type system will not emit it a second time.</doc>
        <callback name="set_property">
          <source-position filename="gobject/gobject.h" line="335"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="273">the generic getter for all properties of this type. Should be
 overridden for every type with properties.</doc>
        <callback name="get_property">
          <source-position filename="gobject/gobject.h" line="339"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispose">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="275">the @dispose function is supposed to drop all references to other
 objects, but keep the instance otherwise intact, so that client method
 invocations still work. It may be run multiple times (due to reference
 loops). Before returning, @dispose should chain up to the @dispose method
 of the parent class.</doc>
        <callback name="dispose">
          <source-position filename="gobject/gobject.h" line="343"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finalize">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="280">instance finalization function, should finish the finalization of
 the instance begun in @dispose and chain up to the @finalize method of the
 parent class.</doc>
        <callback name="finalize">
          <source-position filename="gobject/gobject.h" line="344"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispatch_properties_changed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="283">emits property change notification for a bunch
 of properties. Overriding @dispatch_properties_changed should be rarely
 needed.</doc>
        <callback name="dispatch_properties_changed">
          <source-position filename="gobject/gobject.h" line="346"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="n_pspecs" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="pspecs" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="286">the class closure for the notify signal</doc>
        <callback name="notify">
          <source-position filename="gobject/gobject.h" line="350"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gobject/gobject.c"
                   line="1936">a #GObject</doc>
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="constructed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="287">the @constructed function is called by g_object_new() as the
 final step of the object creation process.  At the point of the call, all
 construction properties have been set on the object.  The purpose of this
 call is to allow for object initialisation steps that can only be performed
 after construction properties have been set.  @constructed implementors
 should chain up to the @constructed call of their parent class to allow it
 to complete its initialisation.</doc>
        <callback name="constructed">
          <source-position filename="gobject/gobject.h" line="354"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="n_construct_properties" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pspecs" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="n_pspecs" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pdummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="InstanceInitFunc" c:type="GInstanceInitFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="962">A callback function used by the type system to initialize a new
instance of a type.

This function initializes all instance members and allocates any resources
required by it.

Initialization of a derived instance involves calling all its parent
types instance initializers, so the class member of the instance
is altered during its initialization to always point to the class that
belongs to the type the current initializer was introduced for.

The extended members of @instance are guaranteed to have been filled with
zeros before this function is called.</doc>
      <source-position filename="gobject/gtype.h" line="982"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="964">The instance to initialize</doc>
          <type name="TypeInstance" c:type="GTypeInstance*"/>
        </parameter>
        <parameter name="g_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="965">The class of the type the instance is
   created for</doc>
          <type name="TypeClass" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="InterfaceFinalizeFunc" c:type="GInterfaceFinalizeFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1000">A callback function used by the type system to finalize an interface.

This function should destroy any internal data and release any resources
allocated by the corresponding GInterfaceInitFunc() function.</doc>
      <source-position filename="gobject/gtype.h" line="1010"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1002">The interface structure to finalize</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="1003">The @interface_data supplied via the #GInterfaceInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="InterfaceInfo" c:type="GInterfaceInfo">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="1154">A structure that provides information to the type system which is
used specifically for managing interface types.</doc>
      <source-position filename="gobject/gtype.h" line="1168"/>
      <field name="interface_init" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gtype.h"
             line="1156">location of the interface initialization function</doc>
        <type name="InterfaceInitFunc" c:type="GInterfaceInitFunc"/>
      </field>
      <field name="interface_finalize" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gtype.h"
             line="1157">location of the interface finalization function</doc>
        <type name="InterfaceFinalizeFunc" c:type="GInterfaceFinalizeFunc"/>
      </field>
      <field name="interface_data" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gtype.h"
             line="1158">user-supplied data passed to the interface init/finalize functions</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="InterfaceInitFunc" c:type="GInterfaceInitFunc">
      <doc xml:space="preserve"
           filename="gobject/gtype.h"
           line="984">A callback function used by the type system to initialize a new
interface.

This function should initialize all internal data and* allocate any
resources required by the interface.

The members of @iface_data are guaranteed to have been filled with
zeros before this function is called.</doc>
      <source-position filename="gobject/gtype.h" line="998"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="986">The interface structure to initialize</doc>
          <type name="TypeInterface" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gobject/gtype.h"
               line="987">The @interface_data supplied via the #GInterfaceInfo structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <glib:boxed glib:name="KeyFile"
                c:symbol-prefix="key_file"
                glib:type-name="GKeyFile"
                glib:get-type="g_key_file_get_type">
    </glib:boxed>
    <glib:boxed glib:name="MainContext"
                c:symbol-prefix="main_context"
                glib:type-name="GMainContext"
                glib:get-type="g_main_context_get_type">
    </glib:boxed>
    <glib:boxed glib:name="MainLoop"
                c:symbol-prefix="main_loop"
                glib:type-name="GMainLoop"
                glib:get-type="g_main_loop_get_type">
    </glib:boxed>
    <glib:boxed glib:name="MappedFile"
                c:symbol-prefix="mapped_file"
                glib:type-name="GMappedFile"
                glib:get-type="g_mapped_file_get_type">
    </glib:boxed>
    <glib:boxed glib:name="MarkupParseContext"
                c:symbol-prefix="markup_parse_context"
                glib:type-name="GMarkupParseContext"
                glib:get-type="g_markup_parse_context_get_type">
    </glib:boxed>
    <glib:boxed glib:name="MatchInfo"
                c:symbol-prefix="match_info"
                glib:type-name="GMatchInfo"
                glib:get-type="g_match_info_get_type">
    </glib:boxed>
    <function-macro name="OBJECT" c:identifier="G_OBJECT" introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="45">Casts a #GObject or derived pointer into a (GObject*) pointer.

Depending on the current debugging level, this function may invoke
certain runtime checks to identify invalid casts.</doc>
      <source-position filename="gobject/gobject.h" line="54"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="47">Object which is subject to casting.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CLASS"
                    c:identifier="G_OBJECT_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="55">Casts a derived #GObjectClass structure into a #GObjectClass structure.</doc>
      <source-position filename="gobject/gobject.h" line="61"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="57">a valid #GObjectClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CLASS_NAME"
                    c:identifier="G_OBJECT_CLASS_NAME"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="118">Return the name of a class structure's type.</doc>
      <source-position filename="gobject/gobject.h" line="127"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="120">a valid #GObjectClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CLASS_TYPE"
                    c:identifier="G_OBJECT_CLASS_TYPE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="109">Get the type id of a class structure.</doc>
      <source-position filename="gobject/gobject.h" line="117"/>
      <parameters>
        <parameter name="class">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="111">a valid #GObjectClass</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_CLASS"
                    c:identifier="G_OBJECT_GET_CLASS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="81">Get the class structure associated to a #GObject instance.</doc>
      <source-position filename="gobject/gobject.h" line="89"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="83">a #GObject instance.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_TYPE"
                    c:identifier="G_OBJECT_TYPE"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="90">Get the type id of an object.</doc>
      <source-position filename="gobject/gobject.h" line="98"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="92">Object to return the type id for.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_TYPE_NAME"
                    c:identifier="G_OBJECT_TYPE_NAME"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="99">Get the name of an object's type.</doc>
      <source-position filename="gobject/gobject.h" line="108"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="101">Object to return the type name for.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_WARN_INVALID_PROPERTY_ID"
                    c:identifier="G_OBJECT_WARN_INVALID_PROPERTY_ID"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="681">This macro should be used to emit a standard warning about unexpected
properties in set_property() and get_property() implementations.</doc>
      <source-position filename="gobject/gobject.h" line="690"/>
      <parameters>
        <parameter name="object">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="683">the #GObject on which set_property() or get_property() was called</doc>
        </parameter>
        <parameter name="property_id">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="684">the numeric id of the property</doc>
        </parameter>
        <parameter name="pspec">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="685">the #GParamSpec of the property</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_WARN_INVALID_PSPEC"
                    c:identifier="G_OBJECT_WARN_INVALID_PSPEC"
                    introspectable="0">
      <source-position filename="gobject/gobject.h" line="668"/>
      <parameters>
        <parameter name="object">
        </parameter>
        <parameter name="pname">
        </parameter>
        <parameter name="property_id">
        </parameter>
        <parameter name="pspec">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="GObject"
           glib:type-name="GObject"
           glib:get-type="g_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:space="preserve"
           filename="gobject/gobject.c"
           line="40">The base object type.

`GObject` is the fundamental type providing the common attributes and
methods for all object types in GTK, Pango and other libraries
based on GObject. The `GObject` class provides methods for object
construction and destruction, property access methods, and signal
support. Signals are described in detail [here][gobject-Signals].

For a tutorial on implementing a new `GObject` class, see [How to define and
implement a new GObject](tutorial.html#how-to-define-and-implement-a-new-gobject).
For a list of naming conventions for GObjects and their methods, see the
[GType conventions](concepts.html#conventions). For the high-level concepts
behind GObject, read
[Instantiatable classed types: Objects](concepts.html#instantiatable-classed-types-objects).

Since GLib 2.72, all `GObject`s are guaranteed to be aligned to at least the
alignment of the largest basic GLib type (typically this is `guint64` or
`gdouble`). If you need larger alignment for an element in a `GObject`, you
should allocate it on the heap (aligned), or arrange for your `GObject` to be
appropriately padded. This guarantee applies to the `GObject` (or derived)
struct, the `GObjectClass` (or derived) struct, and any private data allocated
by `G_ADD_PRIVATE()`.</doc>
      <source-position filename="gobject/gobject.h" line="366"/>
      <constructor name="new" c:identifier="g_object_new" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="2368">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values. Any
private data for the object is guaranteed to be initialized with zeros, as
per g_type_create_instance().

Note that in C, small integer types in variable argument lists are promoted
up to `gint` or `guint` as appropriate, and read back accordingly. `gint` is
32 bits on every platform on which GLib is currently supported. This means that
you can use C expressions of type `gint` with g_object_new() and properties of
type `gint` or `guint` or smaller. Specifically, you can use integer literals
with these property types.

When using property types of `gint64` or `guint64`, you must ensure that the
value that you provide is 64 bit. This means that you should use a cast or
make use of the %G_GINT64_CONSTANT or %G_GUINT64_CONSTANT macros.

Similarly, `gfloat` is promoted to `gdouble`, so you must ensure that the value
you provide is a `gdouble`, even for a property of type `gfloat`.

Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the
alignment of the largest basic GLib type (typically this is `guint64` or
`gdouble`). If you need larger alignment for an element in a #GObject, you
should allocate it on the heap (aligned), or arrange for your #GObject to be
appropriately padded.</doc>
        <source-position filename="gobject/gobject.h" line="432"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="2402">a new instance of
  @object_type</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2370">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2371">the name of the first property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2372">the value of the first property, followed optionally by more
  name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="g_object_new_valist"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="2847">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <source-position filename="gobject/gobject.h" line="451"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="2859">a new instance of @object_type</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2849">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2850">the name of the first property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2851">the value of the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_properties"
                   c:identifier="g_object_new_with_properties"
                   version="2.54"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="2712">Creates a new instance of a #GObject subtype and sets its properties using
the provided arrays. Both arrays must have exactly @n_properties elements,
and the names and values correspond by index.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <source-position filename="gobject/gobject.h" line="436"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="2726">a new instance of
@object_type</doc>
          <type name="Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2714">the object type to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2715">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2716">the names of each property to be set</doc>
            <array length="1" zero-terminated="0" c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2717">the values of each property to be set</doc>
            <array length="1" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="newv"
                   c:identifier="g_object_newv"
                   deprecated="1"
                   deprecated-version="2.54">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="2777">Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_new_with_properties() instead.
deprecated. See #GParameter for more information.</doc-deprecated>
        <source-position filename="gobject/gobject.h" line="444"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="2788">a new instance of
@object_type</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2779">the type id of the #GObject subtype to instantiate</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="n_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2780">the length of the @parameters array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2781">an array of #GParameter</doc>
            <array length="1" zero-terminated="0" c:type="GParameter*">
              <type name="Parameter" c:type="GParameter"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <function name="compat_control" c:identifier="g_object_compat_control">
        <source-position filename="gobject/gobject.h" line="664"/>
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <parameter name="what" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_find_property"
                c:identifier="g_object_interface_find_property"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1455">Find the #GParamSpec with the given name for an
interface. Generally, the interface vtable passed in as @g_iface
will be the default vtable from g_type_default_interface_ref(), or,
if you know the interface has already been loaded,
g_type_default_interface_peek().</doc>
        <source-position filename="gobject/gobject.h" line="423"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="1469">the #GParamSpec for the property of the
         interface with the name @property_name, or %NULL if no
         such property exists.</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1457">any interface vtable for the
 interface, or the default vtable for the interface</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1459">name of a property to look up.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_install_property"
                c:identifier="g_object_interface_install_property"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1375">Add a property to an interface; this is only useful for interfaces
that are added to GObject-derived types. Adding a property to an
interface forces all objects classes with that interface to have a
compatible property. The compatible property could be a newly
created #GParamSpec, but normally
g_object_class_override_property() will be used so that the object
class only needs to provide an implementation and inherits the
property description, default value, bounds, and so forth from the
interface property.

This function is meant to be called from the interface's default
vtable initialization function (the @class_init member of
#GTypeInfo.) It must not be called after after @class_init has
been called for any object types implementing this interface.

If @pspec is a floating reference, it will be consumed.</doc>
        <source-position filename="gobject/gobject.h" line="420"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1377">any interface vtable for the
   interface, or the default
 vtable for the interface.</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1380">the #GParamSpec for the new property</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="interface_list_properties"
                c:identifier="g_object_interface_list_properties"
                version="2.4">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1595">Lists the properties of an interface.Generally, the interface
vtable passed in as @g_iface will be the default vtable from
g_type_default_interface_ref(), or, if you know the interface has
already been loaded, g_type_default_interface_peek().</doc>
        <source-position filename="gobject/gobject.h" line="426"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="1608">a
  pointer to an array of pointers to #GParamSpec
  structures. The paramspecs are owned by GLib, but the
  array should be freed with g_free() when you are done with
  it.</doc>
          <array length="1" zero-terminated="0" c:type="GParamSpec**">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="g_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1597">any interface vtable for the
 interface, or the default vtable for the interface</doc>
            <type name="TypeInterface" c:type="gpointer"/>
          </parameter>
          <parameter name="n_properties_p"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1599">location to store number of properties returned.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="constructed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="287">the @constructed function is called by g_object_new() as the
 final step of the object creation process.  At the point of the call, all
 construction properties have been set on the object.  The purpose of this
 call is to allow for object initialisation steps that can only be performed
 after construction properties have been set.  @constructed implementors
 should chain up to the @constructed call of their parent class to allow it
 to complete its initialisation.</doc>
        <source-position filename="gobject/gobject.h" line="354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dispatch_properties_changed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="283">emits property change notification for a bunch
 of properties. Overriding @dispatch_properties_changed should be rarely
 needed.</doc>
        <source-position filename="gobject/gobject.h" line="346"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_pspecs" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dispose">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="275">the @dispose function is supposed to drop all references to other
 objects, but keep the instance otherwise intact, so that client method
 invocations still work. It may be run multiple times (due to reference
 loops). Before returning, @dispose should chain up to the @dispose method
 of the parent class.</doc>
        <source-position filename="gobject/gobject.h" line="343"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="finalize">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="280">instance finalization function, should finish the finalization of
 the instance begun in @dispose and chain up to the @finalize method of the
 parent class.</doc>
        <source-position filename="gobject/gobject.h" line="344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="273">the generic getter for all properties of this type. Should be
 overridden for every type with properties.</doc>
        <source-position filename="gobject/gobject.h" line="339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify" invoker="notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1934">Emits a "notify" signal for the property @property_name on @object.

When possible, eg. when signaling a property change from within the class
that registered the property, you should use g_object_notify_by_pspec()
instead.

Note that emission of the notify signal may be blocked with
g_object_freeze_notify(). In this case, the signal emissions are queued
and will be emitted (in reverse order) when g_object_thaw_notify() is
called.</doc>
        <source-position filename="gobject/gobject.h" line="350"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1936">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="268">the generic setter for all properties of this type. Should be
 overridden for every type with properties. If implementations of
 @set_property don't emit property change notification explicitly, this will
 be done implicitly by the type system. However, if the notify signal is
 emitted explicitly, the type system will not emit it a second time.</doc>
        <source-position filename="gobject/gobject.h" line="335"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="Value" c:type="const GValue*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_toggle_ref"
              c:identifier="g_object_add_toggle_ref"
              version="2.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4021">Increases the reference count of the object by one and sets a
callback to be called when all other references to the object are
dropped, or when this is already the last reference to the object
and another reference is established.

This functionality is intended for binding @object to a proxy
object managed by another memory manager. This is done with two
paired references: the strong reference added by
g_object_add_toggle_ref() and a reverse reference to the proxy
object which is either a strong reference or weak reference.

The setup is that when there are no other references to @object,
only a weak reference is held in the reverse direction from @object
to the proxy object, but when there are other references held to
@object, a strong reference is held. The @notify callback is called
when the reference from @object to the proxy object should be
"toggled" from strong to weak (@is_last_ref true) or weak to strong
(@is_last_ref false).

Since a (normal) reference must be held to the object before
calling g_object_add_toggle_ref(), the initial state of the reverse
link is always strong.

Multiple toggle references may be added to the same gobject,
however if there are multiple toggle references to an object, none
of them will ever be notified until all but one are removed.  For
this reason, you should only ever use a toggle reference if there
is important state in the proxy object.

Note that if you unref the object on another thread, then @notify might
still be invoked after g_object_remove_toggle_ref(), and the object argument
might be a dangling pointer. If the object is destroyed on other threads,
you must take care of that yourself.

A g_object_add_toggle_ref() must be released with g_object_remove_toggle_ref().</doc>
        <source-position filename="gobject/gobject.h" line="556"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4023">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4024">a function to call when this reference is the
 last reference to the object, or is no longer
 the last reference.</doc>
            <type name="ToggleNotify" c:type="GToggleNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4027">data to pass to @notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_weak_pointer"
              c:identifier="g_object_add_weak_pointer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3743">Adds a weak reference from weak_pointer to @object to indicate that
the pointer located at @weak_pointer_location is only valid during
the lifetime of @object. When the @object is finalized,
@weak_pointer will be set to %NULL.

Note that as with g_object_weak_ref(), the weak references created by
this method are not thread-safe: they cannot safely be used in one
thread if the object's last g_object_unref() might happen in another
thread. Use #GWeakRef if thread-safety is required.</doc>
        <source-position filename="gobject/gobject.h" line="525"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3745">The object that should be weak referenced.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="weak_pointer_location"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3746">The memory address
   of a pointer.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property"
              c:identifier="g_object_bind_property"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1369">Creates a binding between @source_property on @source and @target_property
on @target.

Whenever the @source_property is changed the @target_property is
updated using the same value. For instance:

|[&lt;!-- language="C" --&gt;
  g_object_bind_property (action, "active", widget, "sensitive", 0);
]|

Will result in the "sensitive" property of the widget #GObject instance to be
updated with the same value of the "active" property of the action #GObject
instance.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well.

The binding will automatically be removed when either the @source or the
@target instances are finalized. To remove the binding without affecting the
@source and the @target you can just call g_object_unref() on the returned
#GBinding instance.

Removing the binding by calling g_object_unref() on it must only be done if
the binding, @source and @target are only used from a single thread and it
is clear that both @source and @target outlive the binding. Especially it
is not safe to rely on this if the binding, @source or @target can be
finalized from different threads. Keep another reference to the binding and
use g_binding_unbind() instead to be on the safe side.

A #GObject can have multiple bindings.</doc>
        <source-position filename="gobject/gbinding.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1409">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1371">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1372">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1373">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1374">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1375">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property_full"
              c:identifier="g_object_bind_property_full"
              shadowed-by="bind_property_with_closures"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1172">Complete version of g_object_bind_property().

Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well. The @transform_from function is only used in case
of bidirectional bindings, otherwise it will be ignored

The binding will automatically be removed when either the @source or the
@target instances are finalized. This will release the reference that is
being held on the #GBinding instance; if you want to hold on to the
#GBinding instance, you will need to hold a reference to it.

To remove the binding, call g_binding_unbind().

A #GObject can have multiple bindings.

The same @user_data parameter will be used for both @transform_to
and @transform_from transformation functions; the @notify function will
be called once, when the binding is removed. If you need different data
for each transformation function, please use
g_object_bind_property_with_closures() instead.</doc>
        <source-position filename="gobject/gbinding.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1214">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1174">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1175">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1176">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1177">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1178">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1179">the transformation function
    from the @source to the @target, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="transform_from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1181">the transformation function
    from the @target to the @source, or %NULL to use the default</doc>
            <type name="BindingTransformFunc" c:type="GBindingTransformFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1183">custom data to be passed to the transformation functions,
    or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1185">a function to call when disposing the binding, to free
    resources used by the transformation functions, or %NULL if not required</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_property_with_closures"
              c:identifier="g_object_bind_property_with_closures"
              shadows="bind_property_full"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gbinding.c"
             line="1538">Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

This function is the language bindings friendly version of
g_object_bind_property_full(), using #GClosures instead of
function pointers.</doc>
        <source-position filename="gobject/gbinding.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gbinding.c"
               line="1558">the #GBinding instance representing the
    binding between the two #GObject instances. The binding is released
    whenever the #GBinding reference count reaches zero.</doc>
          <type name="Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1540">the source #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1541">the property on @source to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1542">the target #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1543">the property on @target to bind</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1544">flags to pass to #GBinding</doc>
            <type name="BindingFlags" c:type="GBindingFlags"/>
          </parameter>
          <parameter name="transform_to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1545">a #GClosure wrapping the transformation function
    from the @source to the @target, or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
          <parameter name="transform_from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gbinding.c"
                 line="1547">a #GClosure wrapping the transformation function
    from the @target to the @source, or %NULL to use the default</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect"
              c:identifier="g_object_connect"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3465">A convenience function to connect multiple signals at once.

The signal specs expected by this function have the form
`modifier::signal_name`, where `modifier` can be one of the
following:

- `signal`: equivalent to `g_signal_connect_data (..., NULL, G_CONNECT_DEFAULT)`
- `object-signal`, `object_signal`: equivalent to `g_signal_connect_object (..., G_CONNECT_DEFAULT)`
- `swapped-signal`, `swapped_signal`: equivalent to `g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED)`
- `swapped_object_signal`, `swapped-object-signal`: equivalent to `g_signal_connect_object (..., G_CONNECT_SWAPPED)`
- `signal_after`, `signal-after`: equivalent to `g_signal_connect_data (..., NULL, G_CONNECT_AFTER)`
- `object_signal_after`, `object-signal-after`: equivalent to `g_signal_connect_object (..., G_CONNECT_AFTER)`
- `swapped_signal_after`, `swapped-signal-after`: equivalent to `g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED | G_CONNECT_AFTER)`
- `swapped_object_signal_after`, `swapped-object-signal-after`: equivalent to `g_signal_connect_object (..., G_CONNECT_SWAPPED | G_CONNECT_AFTER)`

```c
menu-&gt;toplevel = g_object_connect (g_object_new (GTK_TYPE_WINDOW,
                                                 "type", GTK_WINDOW_POPUP,
                                                 "child", menu,
                                                 NULL),
                                   "signal::event", gtk_menu_window_event, menu,
                                   "signal::size_request", gtk_menu_window_size_request, menu,
                                   "signal::destroy", gtk_widget_destroyed, &amp;menu-&gt;toplevel,
                                   NULL);
```</doc>
        <source-position filename="gobject/gobject.h" line="463"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="3499">the object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3467">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="signal_spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3468">the spec for the first signal</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3469">[type@GObject.Callback] for the first signal, followed by data for the
  first signal, followed optionally by more signal
  spec/callback/data triples, followed by `NULL`</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect"
              c:identifier="g_object_disconnect"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3569">A convenience function to disconnect multiple signals at once.

The signal specs expected by this function have the form
"any_signal", which means to disconnect any signal with matching
callback and data, or "any_signal::signal_name", which only
disconnects the signal named "signal_name".</doc>
        <source-position filename="gobject/gobject.h" line="467"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3571">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="signal_spec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3572">the spec for the first signal</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3573">#GCallback for the first signal, followed by data for the first signal,
 followed optionally by more signal spec/callback/data triples,
 followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_data"
              c:identifier="g_object_dup_data"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4787">This is a variant of g_object_get_data() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @key is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.</doc>
        <source-position filename="gobject/gobject.h" line="610"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4809">the result of calling @dup_func on the value
    associated with @key on @object, or %NULL if not set.
    If @dup_func is %NULL, the value is returned
    unmodified.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4789">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4790">a string, naming the user data pointer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dup_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4791">function to dup the value</doc>
            <type name="GLib.DuplicateFunc" c:type="GDuplicateFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4792">passed as user_data to @dup_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_qdata"
              c:identifier="g_object_dup_qdata"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4574">This is a variant of g_object_get_qdata() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @quark is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.</doc>
        <source-position filename="gobject/gobject.h" line="581"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4596">the result of calling @dup_func on the value
    associated with @quark on @object, or %NULL if not set.
    If @dup_func is %NULL, the value is returned
    unmodified.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4576">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4577">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="dup_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4578">function to dup the value</doc>
            <type name="GLib.DuplicateFunc" c:type="GDuplicateFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4579">passed as user_data to @dup_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_floating"
              c:identifier="g_object_force_floating"
              version="2.10">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3929">This function is intended for #GObject implementations to re-enforce
a [floating][floating-ref] object reference. Doing this is seldom
required: all #GInitiallyUnowneds are created with a floating reference
which usually just needs to be sunken by calling g_object_ref_sink().</doc>
        <source-position filename="gobject/gobject.h" line="651"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3931">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_notify" c:identifier="g_object_freeze_notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1856">Increases the freeze count on @object. If the freeze count is
non-zero, the emission of "notify" signals on @object is
stopped. The signals are queued until the freeze count is decreased
to zero. Duplicate notifications are squashed so that at most one
#GObject::notify signal is emitted for each property modified while the
object is frozen.

This is necessary for accessors that modify multiple properties to prevent
premature notification while the object is still being modified.</doc>
        <source-position filename="gobject/gobject.h" line="497"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1858">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="g_object_get" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3321">Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

Here is an example of using g_object_get() to get the contents
of three properties: an integer, a string and an object:
|[&lt;!-- language="C" --&gt;
 gint intval;
 guint64 uint64val;
 gchar *strval;
 GObject *objval;

 g_object_get (my_object,
               "int-property", &amp;intval,
               "uint64-property", &amp;uint64val,
               "str-property", &amp;strval,
               "obj-property", &amp;objval,
               NULL);

 // Do something with intval, uint64val, strval, objval

 g_free (strval);
 g_object_unref (objval);
]|</doc>
        <source-position filename="gobject/gobject.h" line="459"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3323">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3324">name of the first property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3325">return location for the first property, followed optionally by more
 name/return location pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="g_object_get_data">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4739">Gets a named field from the objects table of associations (see g_object_set_data()).</doc>
        <source-position filename="gobject/gobject.h" line="594"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4746">the data if found,
         or %NULL if no such data exists.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4741">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4742">name of the key for that association</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="g_object_get_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3386">Gets a property of an object.

The @value can be:

 - an empty #GValue initialized by %G_VALUE_INIT, which will be
   automatically initialized with the expected type of the property
   (since GLib 2.60)
 - a #GValue initialized with the expected type of the property
 - a #GValue initialized with a type to which the expected type
   of the property can be transformed

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory by calling g_value_unset().

Note that g_object_get_property() is really intended for language
bindings, g_object_get() is much more convenient for C programming.</doc>
        <source-position filename="gobject/gobject.h" line="493"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3388">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3389">the name of the property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3390">return location for the property value</doc>
            <type name="Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_qdata" c:identifier="g_object_get_qdata">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4529">This function gets back user data pointers stored via
g_object_set_qdata().</doc>
        <source-position filename="gobject/gobject.h" line="565"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4537">The user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4531">The GObject to get a stored user data pointer from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4532">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="g_object_get_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3225">Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

See g_object_get().</doc>
        <source-position filename="gobject/gobject.h" line="485"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3227">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3228">name of the first property to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3229">return location for the first property, followed optionally by more
 name/return location pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="getv" c:identifier="g_object_getv" version="2.54">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3178">Gets @n_properties properties for an @object.
Obtained properties will be set to @values. All properties must be valid.
Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.</doc>
        <source-position filename="gobject/gobject.h" line="480"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3180">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3181">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3182">the names of each property to get</doc>
            <array length="0" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3183">the values of each property to get</doc>
            <array length="0" zero-terminated="0" c:type="GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="is_floating"
              c:identifier="g_object_is_floating"
              version="2.10">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3821">Checks whether @object has a [floating][floating-ref] reference.</doc>
        <source-position filename="gobject/gobject.h" line="507"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="3829">%TRUE if @object has a floating reference</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3823">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify" c:identifier="g_object_notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1934">Emits a "notify" signal for the property @property_name on @object.

When possible, eg. when signaling a property change from within the class
that registered the property, you should use g_object_notify_by_pspec()
instead.

Note that emission of the notify signal may be blocked with
g_object_freeze_notify(). In this case, the signal emissions are queued
and will be emitted (in reverse order) when g_object_thaw_notify() is
called.</doc>
        <source-position filename="gobject/gobject.h" line="499"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1936">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1937">the name of a property installed on the class of @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_by_pspec"
              c:identifier="g_object_notify_by_pspec"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1977">Emits a "notify" signal for the property specified by @pspec on @object.

This function omits the property name lookup, hence it is faster than
g_object_notify().

One way to avoid using g_object_notify() from within the
class that registered the properties, and using g_object_notify_by_pspec()
instead, is to store the GParamSpec used with
g_object_class_install_property() inside a static array, e.g.:

|[&lt;!-- language="C" --&gt;
  typedef enum
  {
    PROP_FOO = 1,
    PROP_LAST
  } MyObjectProperty;

  static GParamSpec *properties[PROP_LAST];

  static void
  my_object_class_init (MyObjectClass *klass)
  {
    properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
                                             0, 100,
                                             50,
                                             G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
    g_object_class_install_property (gobject_class,
                                     PROP_FOO,
                                     properties[PROP_FOO]);
  }
]|

and then notify a change on the "foo" property with:

|[&lt;!-- language="C" --&gt;
  g_object_notify_by_pspec (self, properties[PROP_FOO]);
]|</doc>
        <source-position filename="gobject/gobject.h" line="502"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1979">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1980">the #GParamSpec of a property installed on the class of @object.</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="g_object_ref">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4220">Increases the reference count of @object.

Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
of @object will be propagated to the return type (using the GCC typeof()
extension), so any casting the caller needs to do on the return type must be
explicit.</doc>
        <source-position filename="gobject/gobject.h" line="513"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4231">the same @object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4222">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_sink" c:identifier="g_object_ref_sink" version="2.10">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3839">Increase the reference count of @object, and possibly remove the
[floating][floating-ref] reference, if @object has a floating reference.

In other words, if the object is floating, then this call "assumes
ownership" of the floating reference, converting it to a normal
reference by clearing the floating flag while leaving the reference
count unchanged.  If the object is not floating, then this call
adds a new normal reference increasing the reference count by one.

Since GLib 2.56, the type of @object will be propagated to the return type
under the same conditions as for g_object_ref().</doc>
        <source-position filename="gobject/gobject.h" line="509"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="3857">@object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3841">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_toggle_ref"
              c:identifier="g_object_remove_toggle_ref"
              version="2.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4108">Removes a reference added with g_object_add_toggle_ref(). The
reference count of the object is decreased by one.

Note that if you unref the object on another thread, then @notify might
still be invoked after g_object_remove_toggle_ref(), and the object argument
might be a dangling pointer. If the object is destroyed on other threads,
you must take care of that yourself.</doc>
        <source-position filename="gobject/gobject.h" line="560"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4110">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4111">a function to call when this reference is the
 last reference to the object, or is no longer
 the last reference.</doc>
            <type name="ToggleNotify" c:type="GToggleNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4114">data to pass to @notify, or %NULL to
 match any toggle refs with the @notify argument.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_weak_pointer"
              c:identifier="g_object_remove_weak_pointer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3771">Removes a weak reference from @object that was previously added
using g_object_add_weak_pointer(). The @weak_pointer_location has
to match the one used with g_object_add_weak_pointer().</doc>
        <source-position filename="gobject/gobject.h" line="528"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3773">The object that is weak referenced.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="weak_pointer_location"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3774">The memory address
   of a pointer.</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_data"
              c:identifier="g_object_replace_data"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4830">Compares the user data for the key @key on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.

See g_object_set_data() for guidance on using a small, bounded set of values
for @key.</doc>
        <source-position filename="gobject/gobject.h" line="615"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4856">%TRUE if the existing value for @key was replaced
 by @newval, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4832">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4833">a string, naming the user data pointer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="oldval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4834">the old value to compare against</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="newval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4835">the new value</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4836">a destroy notify for the new value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="old_destroy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4837">destroy notify for the existing value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_qdata"
              c:identifier="g_object_replace_qdata"
              version="2.34"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4615">Compares the user data for the key @quark on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.</doc>
        <source-position filename="gobject/gobject.h" line="586"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4638">%TRUE if the existing value for @quark was replaced
 by @newval, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4617">the #GObject to store user data on</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4618">a #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="oldval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4619">the old value to compare against</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="newval"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4620">the new value</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4621">a destroy notify for the new value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="old_destroy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4622">destroy notify for the existing value</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_dispose" c:identifier="g_object_run_dispose">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1822">Releases all references to other objects. This can be used to break
reference cycles.

This function should only be called from object system implementations.</doc>
        <source-position filename="gobject/gobject.h" line="653"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1824">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="g_object_set" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3288">Sets properties on an object.

The same caveats about passing integer literals as varargs apply as with
g_object_new(). In particular, any integer literals set as the values for
properties of type #gint64 or #guint64 must be 64 bits wide, using the
%G_GINT64_CONSTANT or %G_GUINT64_CONSTANT macros.

Note that the "notify" signals are queued and only emitted (in
reverse order) after all properties have been set. See
g_object_freeze_notify().</doc>
        <source-position filename="gobject/gobject.h" line="455"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3290">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3291">name of the first property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3292">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="g_object_set_data">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4759">Each object carries around a table of associations from
strings to pointers.  This function lets you set an association.

If the object already had an association with that name,
the old association will be destroyed.

Internally, the @key is converted to a #GQuark using g_quark_from_string().
This means a copy of @key is kept permanently (even after @object has been
finalized) — so it is recommended to only use a small, bounded set of values
for @key in your program, to avoid the #GQuark storage growing unbounded.</doc>
        <source-position filename="gobject/gobject.h" line="597"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4761">#GObject containing the associations.</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4762">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4763">data to associate with that key</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_full"
              c:identifier="g_object_set_data_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4878">Like g_object_set_data() except it adds notification
for when the association is destroyed, either by setting it
to a different value or when the object is destroyed.

Note that the @destroy callback is not called if @data is %NULL.</doc>
        <source-position filename="gobject/gobject.h" line="601"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4880">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4881">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4882">data to associate with that key</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4883">function to call when the association is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property" c:identifier="g_object_set_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3370">Sets a property on an object.</doc>
        <source-position filename="gobject/gobject.h" line="489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3372">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3373">the name of the property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3374">the value</doc>
            <type name="Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qdata"
              c:identifier="g_object_set_qdata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4548">This sets an opaque, named pointer on an object.
The name is specified through a #GQuark (retrieved e.g. via
g_quark_from_static_string()), and the pointer
can be gotten back from the @object with g_object_get_qdata()
until the @object is finalized.
Setting a previously set user data pointer, overrides (frees)
the old pointer set, using #NULL as pointer essentially
removes the data stored.</doc>
        <source-position filename="gobject/gobject.h" line="568"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4550">The GObject to set store a user data pointer</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4551">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4552">An opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_qdata_full"
              c:identifier="g_object_set_qdata_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4659">This function works like g_object_set_qdata(), but in addition,
a void (*destroy) (gpointer) function may be specified which is
called with @data as argument when the @object is finalized, or
the data is being overwritten by a call to g_object_set_qdata()
with the same @quark.</doc>
        <source-position filename="gobject/gobject.h" line="572"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4661">The GObject to set store a user data pointer</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4662">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4663">An opaque user data pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4664">Function to invoke with @data as argument, when @data
          needs to be freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="g_object_set_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3092">Sets properties on an object.</doc>
        <source-position filename="gobject/gobject.h" line="476"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3094">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3095">name of the first property to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3096">value for the first property, followed optionally by more
 name/value pairs, followed by %NULL</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="setv"
              c:identifier="g_object_setv"
              version="2.54"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3039">Sets @n_properties properties for an @object.
Properties to be set will be taken from @values. All properties must be
valid. Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.</doc>
        <source-position filename="gobject/gobject.h" line="471"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3041">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="n_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3042">the number of properties</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3043">the names of each property to be set</doc>
            <array length="0" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3044">the values of each property to be set</doc>
            <array length="0" zero-terminated="0" c:type="const GValue*">
              <type name="Value" c:type="GValue"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="steal_data" c:identifier="g_object_steal_data">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4904">Remove a specified datum from the object's data associations,
without invoking the association's destroy handler.</doc>
        <source-position filename="gobject/gobject.h" line="606"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4912">the data if found, or %NULL
         if no such data exists.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4906">#GObject containing the associations</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4907">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_qdata" c:identifier="g_object_steal_qdata">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4686">This function gets back user data pointers stored via
g_object_set_qdata() and removes the @data from object
without invoking its destroy() function (if any was
set).
Usually, calling this function is only required to update
user data pointers with a destroy notifier, for example:
|[&lt;!-- language="C" --&gt;
void
object_add_to_user_list (GObject     *object,
                         const gchar *new_string)
{
  // the quark, naming the object data
  GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
  // retrieve the old string list
  GList *list = g_object_steal_qdata (object, quark_string_list);

  // prepend new string
  list = g_list_prepend (list, g_strdup (new_string));
  // this changed 'list', so we need to set it again
  g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
}
static void
free_string_list (gpointer data)
{
  GList *node, *list = data;

  for (node = list; node; node = node-&gt;next)
    g_free (node-&gt;data);
  g_list_free (list);
}
]|
Using g_object_get_qdata() in the above example, instead of
g_object_steal_qdata() would have left the destroy function set,
and thus the partial string list would have been freed upon
g_object_set_qdata_full().</doc>
        <source-position filename="gobject/gobject.h" line="577"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="4727">The user data pointer set, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4688">The GObject to get a stored user data pointer from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="quark" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4689">A #GQuark, naming the user data pointer</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_ref"
              c:identifier="g_object_take_ref"
              version="2.70"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3873">If @object is floating, sink it.  Otherwise, do nothing.

In other words, this function will convert a floating reference (if
present) into a full reference.

Typically you want to use g_object_ref_sink() in order to
automatically do the correct thing with respect to floating or
non-floating references, but there is one specific scenario where
this function is helpful.

The situation where this function is helpful is when creating an API
that allows the user to provide a callback function that returns a
GObject. We certainly want to allow the user the flexibility to
return a non-floating reference from this callback (for the case
where the object that is being returned already exists).

At the same time, the API style of some popular GObject-based
libraries (such as Gtk) make it likely that for newly-created GObject
instances, the user can be saved some typing if they are allowed to
return a floating reference.

Using this function on the return value of the user's callback allows
the user to do whichever is more convenient for them. The caller will
always receives exactly one full reference to the value: either the
one that was returned in the first place, or a floating reference
that has been converted to a full reference.

This function has an odd interaction when combined with
g_object_ref_sink() running at the same time in another thread on
the same #GObject instance. If g_object_ref_sink() runs first then
the result will be that the floating reference is converted to a hard
reference. If g_object_take_ref() runs first then the result will be
that the floating reference is converted to a hard reference and an
additional reference on top of that one is added. It is best to avoid
this situation.</doc>
        <source-position filename="gobject/gobject.h" line="511"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="3915">@object</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3875">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="thaw_notify" c:identifier="g_object_thaw_notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="2033">Reverts the effect of a previous call to
g_object_freeze_notify(). The freeze count is decreased on @object
and when it reaches zero, queued "notify" signals are emitted.

Duplicate notifications for each property are squashed so that at most one
#GObject::notify signal is emitted for each property, in the reverse order
in which they have been queued.

It is an error to call this function when the freeze count is zero.</doc>
        <source-position filename="gobject/gobject.h" line="505"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="2035">a #GObject</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="g_object_unref">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="4305">Decreases the reference count of @object. When its reference count
drops to 0, the object is finalized (i.e. its memory is freed).

If the pointer to the #GObject may be reused in future (for example, if it is
an instance variable of another object), it is recommended to clear the
pointer to %NULL rather than retain a dangling pointer to a potentially
invalid #GObject instance. Use g_clear_object() for this.</doc>
        <source-position filename="gobject/gobject.h" line="515"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="4307">a #GObject</doc>
            <type name="Object" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="watch_closure" c:identifier="g_object_watch_closure">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="5234">This function essentially limits the life time of the @closure to
the life time of the object. That is, when the object is finalized,
the @closure is invalidated by calling g_closure_invalidate() on
it, in order to prevent invocations of the closure with a finalized
(nonexisting) object. Also, g_object_ref() and g_object_unref() are
added as marshal guards to the @closure, to ensure that an extra
reference count is held on @object during invocation of the
@closure.  Usually, this function will be called on closures that
use this @object as closure data.</doc>
        <source-position filename="gobject/gobject.h" line="624"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5236">#GObject restricting lifetime of @closure</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="5237">#GClosure to watch</doc>
            <type name="Closure" c:type="GClosure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="weak_ref"
              c:identifier="g_object_weak_ref"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3652">Adds a weak reference callback to an object. Weak references are
used for notification when an object is disposed. They are called
"weak references" because they allow you to safely hold a pointer
to an object without calling g_object_ref() (g_object_ref() adds a
strong reference, that is, forces the object to stay alive).

Note that the weak references created by this method are not
thread-safe: they cannot safely be used in one thread if the
object's last g_object_unref() might happen in another thread.
Use #GWeakRef if thread-safety is required.</doc>
        <source-position filename="gobject/gobject.h" line="517"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3654">#GObject to reference weakly</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3655">callback to invoke before the object is freed</doc>
            <type name="WeakNotify" c:type="GWeakNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3656">extra data to pass to notify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="weak_unref"
              c:identifier="g_object_weak_unref"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="3701">Removes a weak reference callback to an object.</doc>
        <source-position filename="gobject/gobject.h" line="521"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3703">#GObject to remove a weak reference from</doc>
            <type name="Object" c:type="GObject*"/>
          </instance-parameter>
          <parameter name="notify" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3704">callback to search for</doc>
            <type name="WeakNotify" c:type="GWeakNotify"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="3705">data to search for</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <field name="g_type_instance">
        <type name="TypeInstance" c:type="GTypeInstance"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="qdata" readable="0" private="1">
        <type name="GLib.Data" c:type="GData*"/>
      </field>
      <glib:signal name="notify"
                   when="first"
                   no-recurse="1"
                   detailed="1"
                   action="1"
                   no-hooks="1">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="995">The notify signal is emitted on an object when one of its properties has
its value set through g_object_set_property(), g_object_set(), et al.

Note that getting this signal doesn’t itself guarantee that the value of
the property has actually changed. When it is emitted is determined by the
derived GObject class. If the implementor did not create the property with
%G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
in ::notify being emitted, even if the new value is the same as the old.
If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
and common practice is to do that only when the value has actually changed.

This signal is typically used to obtain change notification for a
single property, by specifying the property name as a detail in the
g_signal_connect() call, like this:

|[&lt;!-- language="C" --&gt;
g_signal_connect (text_view-&gt;buffer, "notify::paste-target-list",
                  G_CALLBACK (gtk_text_view_target_list_notify),
                  text_view)
]|

It is important to note that you must use
[canonical parameter names][class@GObject.ParamSpec#parameter-names] as
detail strings for the notify signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="998">the #GParamSpec of the property which changed.</doc>
            <type name="ParamSpec"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="GObjectClass"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="260">The class structure for the GObject type.

|[&lt;!-- language="C" --&gt;
// Example of implementing a singleton using a constructor.
static MySingleton *the_singleton = NULL;

static GObject*
my_singleton_constructor (GType                  type,
                          guint                  n_construct_params,
                          GObjectConstructParam *construct_params)
{
  GObject *object;
  
  if (!the_singleton)
    {
      object = G_OBJECT_CLASS (parent_class)-&gt;constructor (type,
                                                           n_construct_params,
                                                           construct_params);
      the_singleton = MY_SINGLETON (object);
    }
  else
    object = g_object_ref (G_OBJECT (the_singleton));

  return object;
}
]|</doc>
      <source-position filename="gobject/gobject.h" line="366"/>
      <field name="g_type_class">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="262">the parent class</doc>
        <type name="TypeClass" c:type="GTypeClass"/>
      </field>
      <field name="construct_properties" readable="0" private="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="constructor" introspectable="0">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="263">the @constructor function is called by g_object_new () to
 complete the object initialization after all the construction properties are
 set. The first thing a @constructor implementation must do is chain up to the
 @constructor of the parent class. Overriding @constructor should be rarely
 needed, e.g. to handle construct properties, or to implement singletons.</doc>
        <callback name="constructor" introspectable="0">
          <source-position filename="gobject/gobject.h" line="331"/>
          <return-value>
            <type name="Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="type" transfer-ownership="none">
              <type name="GType" c:type="GType"/>
            </parameter>
            <parameter name="n_construct_properties" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="construct_properties" transfer-ownership="none">
              <type name="ObjectConstructParam"
                    c:type="GObjectConstructParam*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="268">the generic setter for all properties of this type. Should be
 overridden for every type with properties. If implementations of
 @set_property don't emit property change notification explicitly, this will
 be done implicitly by the type system. However, if the notify signal is
 emitted explicitly, the type system will not emit it a second time.</doc>
        <callback name="set_property">
          <source-position filename="gobject/gobject.h" line="335"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="const GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="273">the generic getter for all properties of this type. Should be
 overridden for every type with properties.</doc>
        <callback name="get_property">
          <source-position filename="gobject/gobject.h" line="339"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="property_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="Value" c:type="GValue*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispose">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="275">the @dispose function is supposed to drop all references to other
 objects, but keep the instance otherwise intact, so that client method
 invocations still work. It may be run multiple times (due to reference
 loops). Before returning, @dispose should chain up to the @dispose method
 of the parent class.</doc>
        <callback name="dispose">
          <source-position filename="gobject/gobject.h" line="343"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finalize">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="280">instance finalization function, should finish the finalization of
 the instance begun in @dispose and chain up to the @finalize method of the
 parent class.</doc>
        <callback name="finalize">
          <source-position filename="gobject/gobject.h" line="344"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dispatch_properties_changed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="283">emits property change notification for a bunch
 of properties. Overriding @dispatch_properties_changed should be rarely
 needed.</doc>
        <callback name="dispatch_properties_changed">
          <source-position filename="gobject/gobject.h" line="346"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="n_pspecs" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="pspecs" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="286">the class closure for the notify signal</doc>
        <callback name="notify">
          <source-position filename="gobject/gobject.h" line="350"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gobject/gobject.c"
                   line="1936">a #GObject</doc>
              <type name="Object" c:type="GObject*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="constructed">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="287">the @constructed function is called by g_object_new() as the
 final step of the object creation process.  At the point of the call, all
 construction properties have been set on the object.  The purpose of this
 call is to allow for object initialisation steps that can only be performed
 after construction properties have been set.  @constructed implementors
 should chain up to the @constructed call of their parent class to allow it
 to complete its initialisation.</doc>
        <callback name="constructed">
          <source-position filename="gobject/gobject.h" line="354"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="n_construct_properties" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pspecs" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="n_pspecs" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pdummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="find_property" c:identifier="g_object_class_find_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1428">Looks up the #GParamSpec for a property of a class.</doc>
        <source-position filename="gobject/gobject.h" line="405"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="1435">the #GParamSpec for the property, or
         %NULL if the class doesn't have a property of that name</doc>
          <type name="ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1430">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1431">the name of the property to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_properties"
              c:identifier="g_object_class_install_properties"
              version="2.26">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1241">Installs new properties from an array of #GParamSpecs.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

The property id of each property is the index of each #GParamSpec in
the @pspecs array.

The property id of 0 is treated specially by #GObject and it should not
be used to store a #GParamSpec.

This function should be used if you plan to use a static array of
#GParamSpecs and g_object_notify_by_pspec(). For instance, this
class initialization:

|[&lt;!-- language="C" --&gt;
typedef enum {
  PROP_FOO = 1,
  PROP_BAR,
  N_PROPERTIES
} MyObjectProperty;

static GParamSpec *obj_properties[N_PROPERTIES] = { NULL, };

static void
my_object_class_init (MyObjectClass *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

  obj_properties[PROP_FOO] =
    g_param_spec_int ("foo", NULL, NULL,
                      -1, G_MAXINT,
                      0,
                      G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);

  obj_properties[PROP_BAR] =
    g_param_spec_string ("bar", NULL, NULL,
                         NULL,
                         G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);

  gobject_class-&gt;set_property = my_object_set_property;
  gobject_class-&gt;get_property = my_object_get_property;
  g_object_class_install_properties (gobject_class,
                                     G_N_ELEMENTS (obj_properties),
                                     obj_properties);
}
]|

allows calling g_object_notify_by_pspec() to notify of property changes:

|[&lt;!-- language="C" --&gt;
void
my_object_set_foo (MyObject *self, gint foo)
{
  if (self-&gt;foo != foo)
    {
      self-&gt;foo = foo;
      g_object_notify_by_pspec (G_OBJECT (self), obj_properties[PROP_FOO]);
    }
 }
]|</doc>
        <source-position filename="gobject/gobject.h" line="415"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1243">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="n_pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1244">the length of the #GParamSpecs array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspecs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1245">the #GParamSpecs array
  defining the new properties</doc>
            <array length="0" zero-terminated="0" c:type="GParamSpec**">
              <type name="ParamSpec" c:type="GParamSpec*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="install_property"
              c:identifier="g_object_class_install_property">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1132">Installs a new property.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

Note that it is possible to redefine a property in a derived class,
by installing a property with the same name. This can be useful at times,
e.g. to change the range of allowed values or the default value.</doc>
        <source-position filename="gobject/gobject.h" line="401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1134">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1135">the id for the new property</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1136">the #GParamSpec for the new property</doc>
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_properties"
              c:identifier="g_object_class_list_properties">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1567">Get an array of #GParamSpec* for all properties of a class.</doc>
        <source-position filename="gobject/gobject.h" line="408"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gobject/gobject.c"
               line="1574">an array of
         #GParamSpec* which should be freed after use</doc>
          <array length="0" zero-terminated="0" c:type="GParamSpec**">
            <type name="ParamSpec" c:type="GParamSpec*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1569">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="n_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1570">return location for the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="override_property"
              c:identifier="g_object_class_override_property"
              version="2.4">
        <doc xml:space="preserve"
             filename="gobject/gobject.c"
             line="1490">Registers @property_id as referring to a property with the name
@name in a parent class or in an interface implemented by @oclass.
This allows this class to "override" a property implementation in
a parent class or to provide the implementation of a property from
an interface.

Internally, overriding is implemented by creating a property of type
#GParamSpecOverride; generally operations that query the properties of
the object class, such as g_object_class_find_property() or
g_object_class_list_properties() will return the overridden
property. However, in one case, the @construct_properties argument of
the @constructor virtual function, the #GParamSpecOverride is passed
instead, so that the @param_id field of the #GParamSpec will be
correct.  For virtually all uses, this makes no difference. If you
need to get the overridden property, you can call
g_param_spec_get_redirect_target().</doc>
        <source-position filename="gobject/gobject.h" line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oclass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1492">a #GObjectClass</doc>
            <type name="ObjectClass" c:type="GObjectClass*"/>
          </instance-parameter>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1493">the new property ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gobject/gobject.c"
                 line="1494">the name of a property registered in a parent class or
 in an interface of this class.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="ObjectConstructParam" c:type="GObjectConstructParam">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="368">The GObjectConstructParam struct is an auxiliary structure used to hand
#GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.</doc>
      <source-position filename="gobject/gobject.h" line="380"/>
      <field name="pspec" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="370">the #GParamSpec of the construct parameter</doc>
        <type name="ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="gobject/gobject.h"
             line="371">the value to set the parameter to</doc>
        <type name="Value" c:type="GValue*"/>
      </field>
    </record>
    <callback name="ObjectFinalizeFunc" c:type="GObjectFinalizeFunc">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="225">The type of the @finalize function of #GObjectClass.</doc>
      <source-position filename="gobject/gobject.h" line="231"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="227">the #GObject being finalized</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ObjectGetPropertyFunc" c:type="GObjectGetPropertyFunc">
      <doc xml:space="preserve"
           filename="gobject/gobject.h"
           line="197">The type of the @get_property function of #GObjectClass.</doc>
      <source-position filename="gobject/gobject.h" line="207"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="199">a #GObject</doc>
          <type name="Object" c:type="GObject*"/>
        </parameter>
        <parameter name="property_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="200">the numeric id under which the property was registered with
 g_object_class_install_property().</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gobject/gobject.h"
               line="202">a #GValue to return the